{"version":3,"sources":["modbus-io-config.js"],"names":["module","exports","RED","require","install","coreIO","ModbusIOConfigNode","config","fs","UNLIMITED_LISTENERS","nodes","createNode","name","path","format","addressOffset","node","setMaxListeners","lastUpdatedAt","lineReader","LineByLineReader","internalDebug","configData","on","err","message","line","push","JSON","parse","Date","now","warn","payload","allValueNamesFromIOFile","emit","watcher","watchFile","curr","prev","mtime","done","unwatchFile","close","registerType"],"mappings":"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","sourcesContent":["/**\r\n Copyright (c) 2016,2017,2018,2019,2020,2021 Klaus Landsdorf (https://bianco-royal.space/)\r\n All rights reserved.\r\n node-red-contrib-modbus\r\n node-red-contrib-modbusio\r\n\r\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\r\n */\r\nmodule.exports = function (RED) {\r\n  'use strict'\r\n  require('source-map-support').install()\r\n  const coreIO = require('./core/modbus-io-core')\r\n\r\n  function ModbusIOConfigNode (config) {\r\n    const fs = require('fs-extra')\r\n    const UNLIMITED_LISTENERS = 0\r\n\r\n    RED.nodes.createNode(this, config)\r\n\r\n    this.name = config.name\r\n    this.path = config.path\r\n    this.format = config.format\r\n    this.addressOffset = config.addressOffset\r\n\r\n    const node = this\r\n    node.setMaxListeners(UNLIMITED_LISTENERS)\r\n    node.lastUpdatedAt = null\r\n    const lineReader = new coreIO.LineByLineReader(node.path)\r\n    coreIO.internalDebug('Read IO File ' + node.path)\r\n    node.configData = []\r\n\r\n    lineReader.on('error', function (err) {\r\n      coreIO.internalDebug(err.message)\r\n    })\r\n\r\n    lineReader.on('line', function (line) {\r\n      if (line) {\r\n        node.configData.push(JSON.parse(line))\r\n      }\r\n    })\r\n\r\n    lineReader.on('end', function () {\r\n      node.lastUpdatedAt = Date.now()\r\n      coreIO.internalDebug('Read IO Done From File ' + node.path)\r\n      node.warn({ payload: coreIO.allValueNamesFromIOFile(node), name: 'Modbus Value Names From IO File', path: node.path })\r\n      node.emit('updatedConfig', node.configData)\r\n    })\r\n\r\n    coreIO.internalDebug('Loading IO File Started For ' + node.path)\r\n\r\n    node.watcher = fs.watchFile(node.path, (curr, prev) => {\r\n      coreIO.internalDebug(`the current mtime is: ${curr.mtime}`)\r\n      coreIO.internalDebug(`the previous mtime was: ${prev.mtime}`)\r\n\r\n      if (curr.mtime !== prev.mtime) {\r\n        coreIO.internalDebug('Reload IO File ' + node.path)\r\n        node.configData = []\r\n        delete node.lastUpdatedAt\r\n\r\n        const lineReader = new coreIO.LineByLineReader(node.path)\r\n        lineReader.on('error', function (err) {\r\n          coreIO.internalDebug(err.message)\r\n        })\r\n\r\n        lineReader.on('line', function (line) {\r\n          if (line) {\r\n            node.configData.push(JSON.parse(line))\r\n          }\r\n        })\r\n\r\n        lineReader.on('end', function () {\r\n          node.lastUpdatedAt = Date.now()\r\n          coreIO.internalDebug('Reload IO Done From File ' + node.path)\r\n          node.warn({ payload: coreIO.allValueNamesFromIOFile(node), name: 'Modbus Value Names From IO File', path: node.path })\r\n          node.emit('updatedConfig', node.configData)\r\n        })\r\n\r\n        coreIO.internalDebug('Reloading IO File Started For ' + node.path)\r\n      }\r\n    })\r\n\r\n    node.on('close', function (done) {\r\n      fs.unwatchFile(node.path)\r\n      node.watcher.close()\r\n      done()\r\n    })\r\n  }\r\n\r\n  RED.nodes.registerType('modbus-io-config', ModbusIOConfigNode)\r\n}\r\n"],"file":"../modbus-io-config.js"}