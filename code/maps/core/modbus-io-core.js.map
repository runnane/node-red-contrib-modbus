{"version":3,"sources":["core/modbus-io-core.js"],"names":["require","install","de","biancoroyal","modbus","io","core","internalDebug","LineByLineReader","nameValuesFromIOFile","node","msg","values","response","readingOffset","valueNames","ioCore","ioFile","configData","forEach","mapping","valueAddress","startsWith","push","buildInputAddressMapping","Number","addressOffset","logIOActivities","buildOutputAddressMapping","insertValues","convertValuesByType","allValueNamesFromIOFile","ioNode","getDataTypeFromFirstCharType","type","registerName","offset","logging","addressStart","coilStart","bits","bitAddress","name","substring","registerType","addressType","split","Math","floor","addressStartIO","register","addressOffsetIO","registerAddress","Bit","dataType","error","index","item","Object","prototype","hasOwnProperty","call","JSON","stringify","isRegisterSizeWrong","value","pow","getValueFromBufferByDataType","bufferOffset","responseBuffer","registerLength","length","readUInt16BE","readInt8","readInt16BE","convertedValue","readInt32BE","readIntBE","readFloatBE","readDoubleBE","readUInt8","readUInt32BE","readUIntBE","sixteenBitBufferLength","buffer","Buffer","err","message","filterValueNames","fc","adr","quantity","filter","functionType","startRegister","endRegister","valueName","start","sizeDivisor","buildMessageWithIO","origMsg","getOriginalMessage","bufferMessageList","modbusRequest","assign","payload","topic","rawMsg","useIOFile","lastUpdatedAt","allValueNames","parseInt","address","useIOForPayload","module","exports"],"mappings":"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","sourcesContent":["/**\r\n Copyright (c) 2016,2017,2018,2019,2020,2021 Klaus Landsdorf (https://bianco-royal.space/)\r\n All rights reserved.\r\n node-red-contrib-modbus\r\n node-red-contrib-modbusio\r\n\r\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\r\n */\r\n'use strict'\r\nrequire('source-map-support').install()\r\n\r\n// eslint-disable-next-line no-var\r\nvar de = de || { biancoroyal: { modbus: { io: { core: {} } } } } // eslint-disable-line no-use-before-define\r\nde.biancoroyal.modbus.io.core.internalDebug = de.biancoroyal.modbus.io.core.internalDebug || require('debug')('contribModbus:io:core') // eslint-disable-line no-use-before-define\r\nde.biancoroyal.modbus.io.core.LineByLineReader = de.biancoroyal.modbus.io.core.LineByLineReader || require('line-by-line') // eslint-disable-line no-use-before-define\r\nde.biancoroyal.modbus.io.core.core = de.biancoroyal.modbus.io.core.core || require('./modbus-core') // eslint-disable-line no-use-before-define\r\n\r\nde.biancoroyal.modbus.io.core.nameValuesFromIOFile = function (node, msg, values, response, readingOffset) {\r\n  let valueNames = []\r\n  const ioCore = de.biancoroyal.modbus.io.core\r\n\r\n  if (node.ioFile && node.ioFile.configData) {\r\n    node.ioFile.configData.forEach(function (mapping) {\r\n      if (mapping.valueAddress && mapping.valueAddress.startsWith('%I')) {\r\n        valueNames.push(ioCore.buildInputAddressMapping('MB-INPUTS', mapping, Number(node.ioFile.addressOffset), Number(readingOffset), node.logIOActivities))\r\n      }\r\n\r\n      if (mapping.valueAddress && mapping.valueAddress.startsWith('%Q')) {\r\n        valueNames.push(ioCore.buildOutputAddressMapping('MB-OUTPUTS', mapping, Number(node.ioFile.addressOffset), Number(readingOffset), node.logIOActivities))\r\n      }\r\n    })\r\n  }\r\n\r\n  valueNames = ioCore.insertValues(valueNames, values, node.logIOActivities)\r\n\r\n  return ioCore.convertValuesByType(valueNames, values, response, node.logIOActivities)\r\n}\r\n\r\nde.biancoroyal.modbus.io.core.allValueNamesFromIOFile = function (ioNode) {\r\n  const valueNames = []\r\n  const ioCore = de.biancoroyal.modbus.io.core\r\n\r\n  if (ioNode && ioNode.configData) {\r\n    ioNode.configData.forEach(function (mapping) {\r\n      if (mapping.valueAddress && mapping.valueAddress.startsWith('%I')) {\r\n        valueNames.push(ioCore.buildInputAddressMapping('MB-INPUTS', mapping, Number(ioNode.addressOffset), 0))\r\n      }\r\n\r\n      if (mapping.valueAddress && mapping.valueAddress.startsWith('%Q')) {\r\n        valueNames.push(ioCore.buildOutputAddressMapping('MB-OUTPUTS', mapping, Number(ioNode.addressOffset), 0))\r\n      }\r\n    })\r\n  }\r\n\r\n  return valueNames\r\n}\r\n\r\nde.biancoroyal.modbus.io.core.getDataTypeFromFirstCharType = function (type) {\r\n  switch (type) {\r\n    case 'w':\r\n      return 'Word'\r\n    case 'd':\r\n      return 'Double'\r\n    case 'r':\r\n      return 'Real'\r\n    case 'f':\r\n      return 'Float'\r\n    case 'i':\r\n      return 'Integer'\r\n    case 'l':\r\n      return 'Long'\r\n    case 'b':\r\n      return 'Boolean'\r\n    default:\r\n      return 'Unsigned Integer'\r\n  }\r\n}\r\n\r\nde.biancoroyal.modbus.io.core.buildInputAddressMapping = function (registerName, mapping, offset, readingOffset, logging) {\r\n  const ioCore = de.biancoroyal.modbus.io.core\r\n  let addressStart = 0\r\n  let coilStart = 0\r\n  let addressOffset = 0\r\n  let bits = 0\r\n  let bitAddress = null\r\n\r\n  const type = mapping.name.substring(0, 1)\r\n  const registerType = mapping.valueAddress.substring(2, 3)\r\n  const addressType = mapping.valueAddress.substring(0, 3)\r\n\r\n  switch (type) {\r\n    case 'w': // word\r\n    case 'u': // unsigned integer\r\n      addressStart = Number(mapping.valueAddress.split(addressType)[1])\r\n      addressOffset = 1\r\n      bits = 16\r\n      break\r\n    case 'i': // integer\r\n      addressStart = Number(mapping.valueAddress.split(addressType)[1])\r\n\r\n      if (registerType === 'W') {\r\n        addressOffset = 1\r\n        bits = 16\r\n      } else {\r\n        addressOffset = 2\r\n        bits = 32\r\n      }\r\n      break\r\n    case 'r': // real\r\n    case 'f': // float\r\n      addressStart = Number(mapping.valueAddress.split(addressType)[1])\r\n      addressOffset = 2\r\n      bits = 32\r\n      break\r\n    case 'd': // double\r\n      addressStart = Number(mapping.valueAddress.split(addressType)[1])\r\n      addressOffset = 4\r\n      bits = 64\r\n      break\r\n    case 'l': // long\r\n      addressStart = Number(mapping.valueAddress.split(addressType)[1])\r\n      addressOffset = 5\r\n      bits = 80\r\n      break\r\n    case 'b': // bit - boolean\r\n      if (registerType === 'X') {\r\n        bitAddress = mapping.valueAddress.split('%IX')[1].split('.')\r\n        addressStart = Math.floor(Number(bitAddress[0]) / 2)\r\n        coilStart = Number(bitAddress[0]) * 8 + Number(bitAddress[1])\r\n        addressOffset = 1\r\n        bits = 1\r\n      }\r\n      break\r\n    default:\r\n      if (logging) {\r\n        ioCore.internalDebug('unknown input type ' + type)\r\n      }\r\n      bits = 0\r\n  }\r\n\r\n  if (bits) {\r\n    const addressStartIO = addressStart - (Number(offset) || 0)\r\n\r\n    return {\r\n      register: registerName,\r\n      name: mapping.name,\r\n      addressStart: addressStart,\r\n      addressOffset: addressOffset,\r\n      addressOffsetIO: Number(offset) || 0,\r\n      addressStartIO: addressStartIO,\r\n      registerAddress: addressStartIO - Number(readingOffset),\r\n      coilStart: coilStart,\r\n      bitAddress: bitAddress,\r\n      Bit: (bitAddress) ? (Number(bitAddress[0]) * 8) + Number(bitAddress[1]) : 0,\r\n      bits: bits,\r\n      dataType: ioCore.getDataTypeFromFirstCharType(type),\r\n      type: 'input'\r\n    }\r\n  }\r\n\r\n  return { name: mapping.name, type: type, mapping: mapping, error: 'variable name does not match input mapping' }\r\n}\r\n\r\nde.biancoroyal.modbus.io.core.buildOutputAddressMapping = function (registerName, mapping, offset, readingOffset, logging) {\r\n  const ioCore = de.biancoroyal.modbus.io.core\r\n  let addressStart = 0\r\n  let coilStart = 0\r\n  let addressOffset = 0\r\n  let bits = 0\r\n  let bitAddress = null\r\n\r\n  const type = mapping.name.substring(0, 1)\r\n  const registerType = mapping.valueAddress.substring(2, 3)\r\n  const addressType = mapping.valueAddress.substring(0, 3)\r\n\r\n  switch (type) {\r\n    case 'w': // word\r\n    case 'u': // unsigned integer\r\n      addressStart = Number(mapping.valueAddress.split(addressType)[1])\r\n      addressOffset = 1\r\n      bits = 16\r\n      break\r\n    case 'i': // integer\r\n      addressStart = Number(mapping.valueAddress.split(addressType)[1])\r\n\r\n      if (registerType === 'W') {\r\n        addressOffset = 1\r\n        bits = 16\r\n      } else {\r\n        addressOffset = 2\r\n        bits = 32\r\n      }\r\n      break\r\n    case 'r': // real\r\n    case 'f': // float\r\n      addressStart = Number(mapping.valueAddress.split(addressType)[1])\r\n      addressOffset = 2\r\n      bits = 32\r\n      break\r\n    case 'd': // double\r\n      addressStart = Number(mapping.valueAddress.split(addressType)[1])\r\n      addressOffset = 4\r\n      bits = 64\r\n      break\r\n    case 'l': // long\r\n      addressStart = Number(mapping.valueAddress.split(addressType)[1])\r\n      addressOffset = 5\r\n      bits = 80\r\n      break\r\n    case 'b': // bit - boolean\r\n      if (registerType === 'X') {\r\n        bitAddress = mapping.valueAddress.split('%QX')[1].split('.')\r\n        addressStart = Math.floor(Number(bitAddress[0]) / 2)\r\n        coilStart = Number(bitAddress[0]) * 8 + Number(bitAddress[1])\r\n        addressOffset = 1\r\n        bits = 1\r\n      }\r\n      break\r\n    default:\r\n      if (logging) {\r\n        ioCore.internalDebug('unknown output type ' + type)\r\n      }\r\n      bits = 0\r\n  }\r\n\r\n  if (bits) {\r\n    const addressStartIO = addressStart - (Number(offset) || 0)\r\n\r\n    return {\r\n      register: registerName,\r\n      name: mapping.name,\r\n      addressStart: addressStart,\r\n      addressOffset: addressOffset,\r\n      addressOffsetIO: Number(offset) || 0,\r\n      addressStartIO: addressStartIO,\r\n      registerAddress: addressStartIO - Number(readingOffset),\r\n      coilStart: coilStart,\r\n      bitAddress: bitAddress,\r\n      Bit: (bitAddress) ? (Number(bitAddress[0]) * 8) + Number(bitAddress[1]) : 0,\r\n      bits: bits,\r\n      dataType: ioCore.getDataTypeFromFirstCharType(type),\r\n      type: 'output'\r\n    }\r\n  }\r\n\r\n  return { name: mapping.name, type: type, mapping: mapping, error: 'variable name does not match output mapping' }\r\n}\r\n\r\nde.biancoroyal.modbus.io.core.insertValues = function (valueNames, register, logging) {\r\n  const ioCore = de.biancoroyal.modbus.io.core\r\n\r\n  let index = 0\r\n  for (index in valueNames) {\r\n    const item = valueNames[index]\r\n\r\n    if (!item || !Object.prototype.hasOwnProperty.call(item, 'registerAddress') || item.registerAddress < 0) {\r\n      if (logging) {\r\n        ioCore.internalDebug('Item Not Valid To Insert Value ' + JSON.stringify(item))\r\n      }\r\n      continue\r\n    }\r\n\r\n    if (de.biancoroyal.modbus.io.core.isRegisterSizeWrong(register, item.registerAddress, Number(item.bits))) {\r\n      if (logging) {\r\n        ioCore.internalDebug('Insert Value Register Reached At Address-Start-IO:' + item.registerAddress + ' Bits:' + Number(item.bits))\r\n      }\r\n      break\r\n    }\r\n\r\n    switch (Number(item.bits)) {\r\n      case 1:\r\n        item.value = !!((register[item.registerAddress] & Math.pow(item.bitAddress[1], 2)))\r\n        break\r\n      case 16:\r\n        item.value = register[item.registerAddress]\r\n        break\r\n      case 32:\r\n        item.value = register[item.registerAddress + 1] << 16 |\r\n          register[item.registerAddress]\r\n        break\r\n      case 64:\r\n        item.value = register[item.registerAddress + 3] << 48 |\r\n          register[item.registerAddress + 2] << 32 |\r\n          register[item.registerAddress + 1] << 16 |\r\n          register[item.registerAddress]\r\n        break\r\n      case 80:\r\n        item.value = register[item.registerAddress + 4] << 64 |\r\n          register[item.registerAddress + 3] << 48 |\r\n          register[item.registerAddress + 2] << 32 |\r\n          register[item.registerAddress + 1] << 16 |\r\n          register[item.registerAddress]\r\n        break\r\n      default:\r\n        item.value = null\r\n        break\r\n    }\r\n  }\r\n\r\n  return valueNames\r\n}\r\n\r\nde.biancoroyal.modbus.io.core.getValueFromBufferByDataType = function (item, bufferOffset, responseBuffer, logging) {\r\n  const ioCore = de.biancoroyal.modbus.io.core\r\n  const registerLength = responseBuffer.length / 2\r\n\r\n  if (bufferOffset < 0 || bufferOffset > responseBuffer.length) {\r\n    if (logging) {\r\n      ioCore.internalDebug('Wrong Buffer Access Parameter Type:' + item.dataType + ' Register-Length: ' + registerLength +\r\n        ' Buffer-Length:' + responseBuffer.length + ' Address-Buffer-Offset:' + bufferOffset)\r\n      ioCore.internalDebug(JSON.stringify(item))\r\n    }\r\n    return item\r\n  }\r\n\r\n  if (logging) {\r\n    ioCore.internalDebug('Get Value From Buffer By Data Type:' + item.dataType + ' Register:' + item.registerAddress + ' Bits:' + Number(item.bits))\r\n  }\r\n\r\n  switch (item.dataType) {\r\n    case 'Boolean':\r\n      item.value = !!(responseBuffer.readUInt16BE(bufferOffset) & Math.pow(item.bitAddress[1], 2))\r\n      break\r\n    case 'Word':\r\n      switch (item.bits) {\r\n        case '8':\r\n          item.value = responseBuffer.readInt8(bufferOffset)\r\n          break\r\n        default:\r\n          item.value = responseBuffer.readInt16BE(bufferOffset) // DWord\r\n          item.convertedValue = false\r\n      }\r\n      break\r\n    case 'Integer':\r\n      switch (item.bits) {\r\n        case '8':\r\n          item.value = responseBuffer.readInt8(bufferOffset)\r\n          break\r\n        case '32':\r\n          item.value = responseBuffer.readInt32BE(bufferOffset)\r\n          break\r\n        case '64':\r\n          item.value = responseBuffer.readIntBE(bufferOffset, 8)\r\n          break\r\n        default:\r\n          item.value = responseBuffer.readInt16BE(bufferOffset)\r\n      }\r\n      break\r\n    case 'Real':\r\n    case 'Float':\r\n      item.value = responseBuffer.readFloatBE(bufferOffset, 4)\r\n      break\r\n    case 'Double':\r\n      item.value = responseBuffer.readDoubleBE(bufferOffset, 8)\r\n      break\r\n    case 'Long':\r\n      item.value = responseBuffer.readDoubleBE(bufferOffset, 10)\r\n      break\r\n    default:\r\n      switch (item.bits) {\r\n        case '8':\r\n          item.value = responseBuffer.readUInt8(bufferOffset)\r\n          break\r\n        case '32':\r\n          item.value = responseBuffer.readUInt32BE(bufferOffset)\r\n          break\r\n        case '64':\r\n          item.value = responseBuffer.readUIntBE(bufferOffset, 8)\r\n          break\r\n        default:\r\n          item.value = responseBuffer.readUInt16BE(bufferOffset)\r\n          item.convertedValue = false\r\n      }\r\n      break\r\n  }\r\n\r\n  return item\r\n}\r\n\r\nde.biancoroyal.modbus.io.core.convertValuesByType = function (valueNames, register, responseBuffer, logging) {\r\n  const ioCore = de.biancoroyal.modbus.io.core\r\n  let bufferOffset = 0\r\n  const sixteenBitBufferLength = 2\r\n\r\n  let index = 0\r\n  for (index in valueNames) {\r\n    let item = valueNames[index]\r\n\r\n    if (!item || !Object.prototype.hasOwnProperty.call(item, 'dataType') || !Object.prototype.hasOwnProperty.call(item, 'registerAddress') || item.registerAddress < 0) {\r\n      if (logging) {\r\n        ioCore.internalDebug('Item Not Valid To Convert ' + JSON.stringify(item))\r\n      }\r\n      continue\r\n    }\r\n\r\n    if (de.biancoroyal.modbus.io.core.isRegisterSizeWrong(register, item.registerAddress, Number(item.bits))) {\r\n      if (logging) {\r\n        ioCore.internalDebug('Insert Value Register Reached At Address-Start-IO:' + item.registerAddress + ' Bits:' + Number(item.bits))\r\n      }\r\n      break\r\n    }\r\n\r\n    if (responseBuffer.buffer instanceof Buffer) {\r\n      bufferOffset = Number(item.registerAddress) * sixteenBitBufferLength\r\n      try {\r\n        item = ioCore.getValueFromBufferByDataType(item, bufferOffset, responseBuffer.buffer, logging)\r\n      } catch (err) {\r\n        ioCore.internalDebug(err.message)\r\n      }\r\n    } else {\r\n      if (logging) {\r\n        ioCore.internalDebug('Response Buffer Is Not A Buffer')\r\n      }\r\n      break\r\n    }\r\n  }\r\n\r\n  return valueNames\r\n}\r\n\r\nde.biancoroyal.modbus.io.core.filterValueNames = function (node, valueNames, fc, adr, quantity) {\r\n  if (!valueNames.length || !valueNames.filter) {\r\n    return valueNames\r\n  }\r\n\r\n  const ioCore = de.biancoroyal.modbus.io.core\r\n  let functionType = 'input'\r\n\r\n  if (fc === 2 || fc === 4) {\r\n    functionType = 'output'\r\n  }\r\n\r\n  const startRegister = adr\r\n  const endRegister = Number(adr) + Number(quantity) - 1\r\n\r\n  if (node.logIOActivities) {\r\n    ioCore.internalDebug('adr:' + adr + ' quantity:' + quantity + ' startRegister:' + startRegister + ' endRegister:' + endRegister + ' functionType:' + functionType)\r\n  }\r\n\r\n  return valueNames.filter((valueName) => {\r\n    return (valueName.registerAddress >= 0 &&\r\n      valueName.addressStartIO >= startRegister &&\r\n      valueName.addressStartIO <= endRegister &&\r\n      valueName.type === functionType)\r\n  })\r\n}\r\n\r\nde.biancoroyal.modbus.io.core.isRegisterSizeWrong = function (register, start, bits) {\r\n  const sizeDivisor = Number(bits) || 16\r\n  const startRegister = Number(start)\r\n  let endRegister = startRegister\r\n\r\n  if (sizeDivisor > 16) {\r\n    endRegister = startRegister + (sizeDivisor / 16) - 1\r\n  }\r\n\r\n  return (startRegister < 0 || register.length < startRegister || endRegister > register.length)\r\n}\r\n\r\nde.biancoroyal.modbus.io.core.buildMessageWithIO = function (node, values, response, msg) {\r\n  const origMsg = this.core.getOriginalMessage(node.bufferMessageList, msg)\r\n  origMsg.modbusRequest = Object.assign({}, msg.payload)\r\n  origMsg.payload = values\r\n  origMsg.topic = msg.topic\r\n  origMsg.responseBuffer = response\r\n\r\n  const rawMsg = Object.assign({}, origMsg)\r\n  rawMsg.payload = response\r\n  rawMsg.values = values\r\n  delete rawMsg.responseBuffer\r\n\r\n  if (node.useIOFile && node.ioFile.lastUpdatedAt) {\r\n    const allValueNames = this.nameValuesFromIOFile(node, msg, values, response, parseInt(msg.payload.address) || 0)\r\n    const valueNames = this.filterValueNames(node, allValueNames, parseInt(msg.payload.fc) || 3,\r\n      parseInt(msg.payload.address) || 0,\r\n      parseInt(msg.payload.quantity) || 1,\r\n      node.logIOActivities)\r\n\r\n    if (node.useIOForPayload) {\r\n      origMsg.payload = valueNames\r\n      origMsg.values = values\r\n    } else {\r\n      origMsg.payload = values\r\n      origMsg.valueNames = valueNames\r\n    }\r\n\r\n    rawMsg.valueNames = valueNames\r\n    return [origMsg, rawMsg]\r\n  } else {\r\n    return [origMsg, rawMsg]\r\n  }\r\n}\r\n\r\nmodule.exports = de.biancoroyal.modbus.io.core\r\n"],"file":"../../core/modbus-io-core.js"}