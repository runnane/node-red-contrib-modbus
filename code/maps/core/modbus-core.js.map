{"version":3,"sources":["core/modbus-core.js"],"names":["require","install","de","biancoroyal","modbus","core","internalDebug","ObjectID","getObjectId","getOriginalMessage","messageList","msg","origMsg","get","payload","messageId","functionCodeModbusRead","dataType","functionCodeModbusWrite","buildMessage","values","response","topic","responseBuffer","input","Object","assign","rawMsg","module","exports"],"mappings":"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","sourcesContent":["/**\r\n Copyright (c) 2016,2017,2018,2019,2020,2021 Klaus Landsdorf (https://bianco-royal.space/)\r\n All rights reserved.\r\n node-red-contrib-modbus\r\n\r\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\r\n */\r\n'use strict'\r\nrequire('source-map-support').install()\r\n\r\n// eslint-disable-next-line no-var\r\nvar de = de || { biancoroyal: { modbus: { core: {} } } } // eslint-disable-line no-use-before-define\r\nde.biancoroyal.modbus.core.internalDebug = de.biancoroyal.modbus.core.internalDebug || require('debug')('contribModbus:core') // eslint-disable-line no-use-before-define\r\nde.biancoroyal.modbus.core.ObjectID = de.biancoroyal.modbus.core.ObjectID || require('bson').ObjectID // eslint-disable-line no-use-before-define\r\n\r\nde.biancoroyal.modbus.core.getObjectId = function () {\r\n  return new de.biancoroyal.modbus.core.ObjectID()\r\n}\r\n\r\nde.biancoroyal.modbus.core.getOriginalMessage = function (messageList, msg) {\r\n  let origMsg = messageList.get(msg.payload.messageId || msg.messageId)\r\n\r\n  if (origMsg && origMsg.messageId) {\r\n    if (!messageList.delete(origMsg.messageId)) {\r\n      de.biancoroyal.modbus.core.internalDebug('WARNING: getOriginalMessage could not delete message from map ' + origMsg.messageId)\r\n    }\r\n  } else {\r\n    de.biancoroyal.modbus.core.internalDebug('Message Not Found ' + msg.payload.messageId)\r\n    origMsg = msg\r\n  }\r\n\r\n  return origMsg\r\n}\r\n\r\nde.biancoroyal.modbus.core.functionCodeModbusRead = function (dataType) {\r\n  switch (dataType) {\r\n    case 'Coil':\r\n      return 1\r\n    case 'Input':\r\n      return 2\r\n    case 'HoldingRegister':\r\n      return 3\r\n    case 'InputRegister':\r\n      return 4\r\n    default:\r\n      return -1\r\n  }\r\n}\r\n\r\nde.biancoroyal.modbus.core.functionCodeModbusWrite = function (dataType) {\r\n  switch (dataType) {\r\n    case 'Coil':\r\n      return 5\r\n    case 'HoldingRegister':\r\n      return 6\r\n    case 'MCoils':\r\n      return 15\r\n    case 'MHoldingRegisters':\r\n      return 16\r\n    default:\r\n      return -1\r\n  }\r\n}\r\n\r\nde.biancoroyal.modbus.core.buildMessage = function (messageList, values, response, msg) {\r\n  const origMsg = this.getOriginalMessage(messageList, msg)\r\n  origMsg.payload = values\r\n  origMsg.topic = msg.topic\r\n  origMsg.responseBuffer = response\r\n  origMsg.input = Object.assign({}, msg)\r\n\r\n  const rawMsg = Object.assign({}, origMsg)\r\n  rawMsg.payload = response\r\n  rawMsg.values = values\r\n  delete rawMsg.responseBuffer\r\n\r\n  return [origMsg, rawMsg]\r\n}\r\n\r\nmodule.exports = de.biancoroyal.modbus.core\r\n"],"file":"../../core/modbus-core.js"}