{"version":3,"sources":["core/modbus-server-core.js"],"names":["require","install","de","biancoroyal","modbus","core","server","internalDebug","bufferFactor","memoryTypes","memoryUint16Types","memoryUint8Types","getLogFunction","node","internalDebugLog","isValidMemoryMessage","msg","payload","register","Number","isInteger","address","copyToModbusFlexBuffer","bufferData","copy","registers","bufferSplitAddress","coils","bufferAddress","writeToModbusFlexBuffer","writeUInt16BE","bufferPayload","writeUInt8","writeModbusFlexServerMemory","coreServer","parseInt","splitAddress","convertInputForBufferWrite","isMultipleWrite","value","length","Uint8Array","Buffer","alloc","buffer","byteLength","wasMultipleWrite","copyToModbusBuffer","modbusServer","holding","input","discrete","writeToModbusBuffer","writeModbusServerMemory","writeToServerMemory","toLowerCase","includes","err","error","writeToFlexServerMemory","module","exports"],"mappings":"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","sourcesContent":["/**\r\n Copyright (c) 2016,2017,2018,2019,2020,2021 Klaus Landsdorf (https://bianco-royal.space/)\r\n All rights reserved.\r\n node-red-contrib-modbus\r\n\r\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\r\n */\r\n'use strict'\r\nrequire('source-map-support').install()\r\n\r\n// eslint-disable-next-line no-var\r\nvar de = de || { biancoroyal: { modbus: { core: { server: { } } } } } // eslint-disable-line no-use-before-define\r\nde.biancoroyal.modbus.core.server.internalDebug = de.biancoroyal.modbus.core.server.internalDebug || require('debug')('contribModbus:core:server') // eslint-disable-line no-use-before-define\r\n\r\nde.biancoroyal.modbus.core.server.bufferFactor = 8\r\nde.biancoroyal.modbus.core.server.memoryTypes = ['holding', 'coils', 'input', 'discrete']\r\nde.biancoroyal.modbus.core.server.memoryUint16Types = ['holding', 'input']\r\nde.biancoroyal.modbus.core.server.memoryUint8Types = ['coils', 'discrete']\r\n\r\nde.biancoroyal.modbus.core.server.getLogFunction = function (node) {\r\n  if (node.internalDebugLog) {\r\n    return node.internalDebugLog\r\n  } else {\r\n    return de.biancoroyal.modbus.core.server.internalDebug\r\n  }\r\n}\r\n\r\nde.biancoroyal.modbus.core.server.isValidMemoryMessage = function (msg) {\r\n  return msg.payload &&\r\n    msg.payload.register &&\r\n    Number.isInteger(msg.payload.address) &&\r\n    msg.payload.address >= 0 &&\r\n    msg.payload.address <= 65535\r\n}\r\n\r\nde.biancoroyal.modbus.core.server.copyToModbusFlexBuffer = function (node, msg) {\r\n  switch (msg.payload.register) {\r\n    case 'holding':\r\n      msg.bufferData.copy(node.registers, msg.bufferSplitAddress)\r\n      break\r\n    case 'coils':\r\n      msg.bufferData.copy(node.coils, msg.bufferAddress)\r\n      break\r\n    case 'input':\r\n      msg.bufferData.copy(node.registers, msg.bufferAddress)\r\n      break\r\n    case 'discrete':\r\n      msg.bufferData.copy(node.coils, msg.bufferSplitAddress)\r\n      break\r\n    default:\r\n      return false\r\n  }\r\n  return true\r\n}\r\n\r\nde.biancoroyal.modbus.core.server.writeToModbusFlexBuffer = function (node, msg) {\r\n  switch (msg.payload.register) {\r\n    case 'holding':\r\n      node.registers.writeUInt16BE(msg.bufferPayload, msg.bufferSplitAddress)\r\n      break\r\n    case 'coils':\r\n      node.coils.writeUInt8(msg.bufferPayload, msg.bufferAddress)\r\n      break\r\n    case 'input':\r\n      node.registers.writeUInt16BE(msg.bufferPayload, msg.bufferAddress)\r\n      break\r\n    case 'discrete':\r\n      node.coils.writeUInt8(msg.bufferPayload, msg.bufferSplitAddress)\r\n      break\r\n    default:\r\n      return false\r\n  }\r\n  return true\r\n}\r\n\r\nde.biancoroyal.modbus.core.server.writeModbusFlexServerMemory = function (node, msg) {\r\n  const coreServer = de.biancoroyal.modbus.core.server\r\n  msg.bufferSplitAddress = (parseInt(msg.payload.address) + parseInt(node.splitAddress)) * coreServer.bufferFactor\r\n  msg.bufferAddress = parseInt(msg.payload.address) * coreServer.bufferFactor\r\n\r\n  if (coreServer.convertInputForBufferWrite(msg)) {\r\n    return coreServer.copyToModbusFlexBuffer(node, msg)\r\n  } else {\r\n    return coreServer.writeToModbusFlexBuffer(node, msg)\r\n  }\r\n}\r\n\r\nde.biancoroyal.modbus.core.server.convertInputForBufferWrite = function (msg) {\r\n  let isMultipleWrite = false\r\n  if (msg.payload.value.length) {\r\n    msg.bufferPayload = new Uint8Array(msg.payload.value)\r\n    msg.bufferData = Buffer.alloc(msg.bufferPayload.buffer.byteLength, msg.bufferPayload)\r\n    isMultipleWrite = true\r\n    msg.wasMultipleWrite = true\r\n  } else {\r\n    msg.bufferPayload = parseInt(msg.payload.value)\r\n    msg.wasMultipleWrite = false\r\n  }\r\n\r\n  return isMultipleWrite\r\n}\r\n\r\nde.biancoroyal.modbus.core.server.copyToModbusBuffer = function (node, msg) {\r\n  switch (msg.payload.register) {\r\n    case 'holding':\r\n      msg.bufferData.copy(node.modbusServer.holding, msg.bufferAddress)\r\n      break\r\n    case 'coils':\r\n      msg.bufferData.copy(node.modbusServer.coils, msg.bufferAddress)\r\n      break\r\n    case 'input':\r\n      msg.bufferData.copy(node.modbusServer.input, msg.bufferAddress)\r\n      break\r\n    case 'discrete':\r\n      msg.bufferData.copy(node.modbusServer.discrete, msg.bufferAddress)\r\n      break\r\n    default:\r\n      return false\r\n  }\r\n  return true\r\n}\r\n\r\nde.biancoroyal.modbus.core.server.writeToModbusBuffer = function (node, msg) {\r\n  switch (msg.payload.register) {\r\n    case 'holding':\r\n      node.modbusServer.holding.writeUInt16BE(msg.bufferPayload, msg.bufferAddress)\r\n      break\r\n    case 'coils':\r\n      node.modbusServer.coils.writeUInt8(msg.bufferPayload, msg.bufferAddress)\r\n      break\r\n    case 'input':\r\n      node.modbusServer.input.writeUInt16BE(msg.bufferPayload, msg.bufferAddress)\r\n      break\r\n    case 'discrete':\r\n      node.modbusServer.discrete.writeUInt8(msg.bufferPayload, msg.bufferAddress)\r\n      break\r\n    default:\r\n      return false\r\n  }\r\n  return true\r\n}\r\nde.biancoroyal.modbus.core.server.writeModbusServerMemory = function (node, msg) {\r\n  const coreServer = de.biancoroyal.modbus.core.server\r\n  msg.bufferAddress = parseInt(msg.payload.address) * coreServer.bufferFactor\r\n\r\n  if (coreServer.convertInputForBufferWrite(msg)) {\r\n    return coreServer.copyToModbusBuffer(node, msg)\r\n  } else {\r\n    return coreServer.writeToModbusBuffer(node, msg)\r\n  }\r\n}\r\n\r\nde.biancoroyal.modbus.core.server.writeToServerMemory = function (node, msg) {\r\n  const coreServer = de.biancoroyal.modbus.core.server\r\n  msg.payload.register = msg.payload.register.toLowerCase()\r\n  try {\r\n    if (coreServer.memoryTypes.includes(msg.payload.register)) {\r\n      coreServer.writeModbusServerMemory(node, msg)\r\n    }\r\n  } catch (err) {\r\n    msg.error = err\r\n    node.error(err)\r\n  }\r\n}\r\n\r\nde.biancoroyal.modbus.core.server.writeToFlexServerMemory = function (node, msg) {\r\n  const coreServer = de.biancoroyal.modbus.core.server\r\n  msg.payload.register = msg.payload.register.toLowerCase()\r\n  try {\r\n    if (coreServer.memoryTypes.includes(msg.payload.register)) {\r\n      coreServer.writeModbusFlexServerMemory(node, msg)\r\n    }\r\n  } catch (err) {\r\n    msg.error = err\r\n    node.error(err)\r\n  }\r\n}\r\n\r\nmodule.exports = de.biancoroyal.modbus.core.server\r\n"],"file":"../../core/modbus-server-core.js"}