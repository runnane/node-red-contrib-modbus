{"version":3,"sources":["core/modbus-queue-core.js"],"names":["require","install","de","biancoroyal","modbus","queue","core","internalDebug","initQueue","node","bufferCommandList","clear","sendingAllowed","unitSendingAllowed","step","set","checkQueuesAreEmpty","queuesAreEmpty","get","length","queueSerialUnlockCommand","name","serialSendingAllowed","queueSerialLockCommand","sequentialDequeueCommand","Promise","resolve","reject","queueCore","parallelUnitIdsAllowed","unitId","sendQueueDataToModbus","shift","Error","queueLog","JSON","stringify","type","isValidUnitId","warn","infoText","queueLength","command","callModbus","msg","cb","cberr","dequeueLogEntry","state","info","value","message","clienttype","delay","commandDelay","dequeueCommand","actualServiceState","messageAllowedStates","indexOf","then","err","getUnitIdToQueue","parseInt","payload","unitid","unit_id","getQueueLengthByUnitId","pushToQueueByUnitId","coreQueue","queueLengthByUnitId","queueUnitId","push","module","exports"],"mappings":"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","sourcesContent":["/**\r\n Copyright (c) 2016,2017,2018,2019,2020,2021 Klaus Landsdorf (https://bianco-royal.space/)\r\n All rights reserved.\r\n node-red-contrib-modbus\r\n node-red-contrib-modbusio\r\n\r\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\r\n */\r\n'use strict'\r\nrequire('source-map-support').install()\r\n\r\n// eslint-disable-next-line no-var\r\nvar de = de || { biancoroyal: { modbus: { queue: { core: {} } } } } // eslint-disable-line no-use-before-define\r\nde.biancoroyal.modbus.queue.core.internalDebug = de.biancoroyal.modbus.queue.core.internalDebug || require('debug')('contribModbus:queue:core') // eslint-disable-line no-use-before-define\r\nde.biancoroyal.modbus.queue.core.core = de.biancoroyal.modbus.queue.core.core || require('./modbus-core') // eslint-disable-line no-use-before-define\r\n\r\nde.biancoroyal.modbus.queue.core.initQueue = function (node) {\r\n  node.bufferCommandList.clear()\r\n  node.sendingAllowed.clear()\r\n  node.unitSendingAllowed = []\r\n\r\n  for (let step = 0; step <= 255; step++) {\r\n    node.bufferCommandList.set(step, [])\r\n    node.sendingAllowed.set(step, true)\r\n  }\r\n}\r\n\r\nde.biancoroyal.modbus.queue.core.checkQueuesAreEmpty = function (node) {\r\n  let queuesAreEmpty = true\r\n  for (let step = 0; step <= 255; step++) {\r\n    queuesAreEmpty &= (node.bufferCommandList.get(step).length === 0)\r\n  }\r\n  return queuesAreEmpty\r\n}\r\n\r\nde.biancoroyal.modbus.queue.core.queueSerialUnlockCommand = function (node) {\r\n  this.internalDebug('queue serial unlock command node ' + node.name)\r\n  node.serialSendingAllowed = true\r\n}\r\n\r\nde.biancoroyal.modbus.queue.core.queueSerialLockCommand = function (node) {\r\n  this.internalDebug('queue serial lock command node ' + node.name)\r\n  node.serialSendingAllowed = false\r\n}\r\n\r\nde.biancoroyal.modbus.queue.core.sequentialDequeueCommand = function (node) {\r\n  this.internalDebug('sequential de-queue command')\r\n  return new Promise(\r\n    function (resolve, reject) {\r\n      const queueCore = de.biancoroyal.modbus.queue.core\r\n\r\n      if (node.parallelUnitIdsAllowed) {\r\n        for (let unitId = 0; unitId < 256; unitId += 1) {\r\n          queueCore.sendQueueDataToModbus(node, unitId)\r\n        }\r\n      } else {\r\n        const unitId = node.unitSendingAllowed.shift()\r\n        if (!unitId) {\r\n          reject(new Error('UnitId is valid from sending allowed list'))\r\n          return\r\n        }\r\n\r\n        node.queueLog(JSON.stringify({\r\n          type: 'sequential dequeue command',\r\n          unitId,\r\n          isValidUnitId: queueCore.isValidUnitId(unitId),\r\n          sendingAllowed: node.sendingAllowed.get(unitId),\r\n          serialSendingAllowed: node.serialSendingAllowed\r\n        }))\r\n\r\n        if (queueCore.isValidUnitId(unitId) &&\r\n          node.sendingAllowed.get(unitId)) {\r\n          queueCore.sendQueueDataToModbus(node, unitId)\r\n        } else {\r\n          node.warn('sequential dequeue command not possible for Unit ' + unitId)\r\n          let infoText = 'sending is allowed for Unit '\r\n          if (node.sendingAllowed.get(unitId)) {\r\n            node.warn(infoText + unitId)\r\n          } else {\r\n            node.warn('no ' + infoText + unitId)\r\n          }\r\n          infoText = 'valid  Unit '\r\n          if (queueCore.isValidUnitId(unitId)) {\r\n            node.warn(infoText + unitId)\r\n          } else {\r\n            node.warn('no ' + infoText + unitId)\r\n          }\r\n          infoText = ' serial sending allowed for Unit '\r\n          if (node.serialSendingAllowed) {\r\n            node.warn(node.name + infoText + unitId)\r\n          } else {\r\n            node.warn(node.name + ' no' + infoText + unitId)\r\n          }\r\n        }\r\n      }\r\n      resolve()\r\n    })\r\n}\r\n\r\nde.biancoroyal.modbus.queue.core.sendQueueDataToModbus = function (node, unitId) {\r\n  const queueLength = node.bufferCommandList.get(unitId).length\r\n  node.queueLog(JSON.stringify({\r\n    type: 'send queue data to Modbus',\r\n    unitId,\r\n    queueLength,\r\n    sendingAllowed: node.sendingAllowed.get(unitId),\r\n    serialSendingAllowed: node.serialSendingAllowed\r\n  }))\r\n\r\n  if (queueLength) {\r\n    const command = node.bufferCommandList.get(unitId).shift()\r\n    if (command) {\r\n      node.sendingAllowed.set(unitId, false)\r\n      command.callModbus(node, command.msg, command.cb, command.cberr)\r\n    } else {\r\n      throw new Error('Command On Send Not Valid')\r\n    }\r\n  }\r\n}\r\n\r\nde.biancoroyal.modbus.queue.core.dequeueLogEntry = function (node, state, info) {\r\n  node.queueLog(JSON.stringify({\r\n    state: state.value,\r\n    message: `${info} ${node.clienttype}`,\r\n    delay: node.commandDelay\r\n  }))\r\n}\r\n\r\nde.biancoroyal.modbus.queue.core.dequeueCommand = function (node) {\r\n  const queueCore = de.biancoroyal.modbus.queue.core\r\n  const state = node.actualServiceState\r\n\r\n  if (node.messageAllowedStates.indexOf(state.value) === -1) {\r\n    queueCore.dequeueLogEntry(node, state, 'dequeue command disallowed state')\r\n  } else {\r\n    queueCore.sequentialDequeueCommand(node).then(function () {\r\n      queueCore.dequeueLogEntry(node, state, 'dequeue command done')\r\n    }).catch(function (err) {\r\n      queueCore.dequeueLogEntry(node, state, 'dequeue command error ' + err.message)\r\n    })\r\n  }\r\n}\r\n\r\nde.biancoroyal.modbus.queue.core.getUnitIdToQueue = function (node, msg) {\r\n  return parseInt(msg.payload.unitid) || parseInt(node.unit_id) || 0\r\n}\r\n\r\nde.biancoroyal.modbus.queue.core.isValidUnitId = function (unitId) {\r\n  return (unitId >= 0 || unitId <= 255)\r\n}\r\n\r\nde.biancoroyal.modbus.queue.core.getQueueLengthByUnitId = function (node, unitId) {\r\n  if (this.isValidUnitId(unitId)) {\r\n    return node.bufferCommandList.get(unitId).length\r\n  } else {\r\n    throw new Error('(0-255) Got A Wrong Unit-Id: ' + unitId)\r\n  }\r\n}\r\n\r\nde.biancoroyal.modbus.queue.core.pushToQueueByUnitId = function (node, callModbus, msg, cb, cberr) {\r\n  const coreQueue = de.biancoroyal.modbus.queue.core\r\n\r\n  return new Promise(\r\n    function (resolve, reject) {\r\n      try {\r\n        const unitId = coreQueue.getUnitIdToQueue(node, msg)\r\n        if (!unitId) {\r\n          reject(new Error('UnitId is valid from msg or node'))\r\n          return\r\n        }\r\n        const queueLength = coreQueue.getQueueLengthByUnitId(node, unitId)\r\n\r\n        msg.queueLengthByUnitId = { unitId, queueLength }\r\n        msg.queueUnitId = unitId\r\n\r\n        if (!node.parallelUnitIdsAllowed || node.clienttype === 'serial') {\r\n          node.unitSendingAllowed.push(unitId)\r\n        }\r\n\r\n        node.bufferCommandList.get(unitId).push({ callModbus: callModbus, msg: msg, cb: cb, cberr: cberr })\r\n        node.queueLog(JSON.stringify({\r\n          info: 'pushed to Queue by Unit-Id',\r\n          message: msg.payload,\r\n          unitId\r\n        }))\r\n        resolve()\r\n      } catch (err) {\r\n        reject(err)\r\n      }\r\n    })\r\n}\r\n\r\nmodule.exports = de.biancoroyal.modbus.queue.core\r\n"],"file":"../../core/modbus-queue-core.js"}