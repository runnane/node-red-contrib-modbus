{"version":3,"sources":["core/modbus-client-core.js"],"names":["require","install","de","biancoroyal","modbus","core","client","internalDebug","internalDebugFSM","modbusSerialDebug","XStateFSM","stateLogEnabled","networkErrors","createStateMachineService","createMachine","id","initial","states","on","INIT","BREAK","STOP","broken","FAILURE","ACTIVATE","RECONNECT","reconnecting","init","OPENSERIAL","CONNECT","SWITCH","opened","CLOSE","connected","QUEUE","activated","READ","WRITE","queueing","SEND","EMPTY","empty","sending","reading","writing","closed","failed","stopped","NEW","getActualUnitId","node","msg","payload","Number","isInteger","unitid","parseInt","queueUnitId","unit_id","startStateService","toggleMachine","interpret","start","checkUnitId","clientType","getLogFunction","internalDebugLog","activateSendingOnSuccess","cb","cberr","resp","activateSending","then","err","stateService","send","activateSendingOnFailure","readModbusByFunctionCodeOne","coreClient","readCoils","address","quantity","Error","message","modbusErrorHandling","readModbusByFunctionCodeTwo","readDiscreteInputs","readModbusByFunctionCodeThree","readHoldingRegisters","readModbusByFunctionCodeFour","readInputRegisters","readModbusByFunctionCode","nodeLog","fc","readModbus","bufferCommands","clienttype","queueLog","JSON","stringify","info","timeout","getTimeout","state","actualServiceState","value","setUnitIdFromPayload","setTimeout","clientTimeout","writeModbusByFunctionCodeFive","writeCoil","getID","writeModbusByFunctionCodeFiveDupline","writeCoilDupline","writeModbusByFunctionCodeFifteen","length","writeCoils","writeModbusByFunctionCodeSix","writeRegister","writeModbusByFunctionCodeSixteen","writeRegisters","writeModbus","setNewTCPNodeSettings","tcpHost","tcpPort","tcpType","setNewSerialNodeSettings","serialPort","serialBaudrate","serialDatabits","serialStopbits","serialParity","serialType","serialAsciiResponseStartDelimiter","serialConnectionDelay","setNewNodeOptionalSettings","unitId","commandDelay","reconnectTimeout","setNewNodeSettings","connectorType","toUpperCase","messagesAllowedStates","module","exports"],"mappings":"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","sourcesContent":["/**\r\n Copyright (c) 2016,2017,2018,2019,2020,2021 Klaus Landsdorf (https://bianco-royal.space/)\r\n All rights reserved.\r\n node-red-contrib-modbus\r\n\r\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\r\n */\r\n'use strict'\r\nrequire('source-map-support').install()\r\n\r\n// eslint-disable-next-line no-var\r\nvar de = de || { biancoroyal: { modbus: { core: { client: {} } } } } // eslint-disable-line no-use-before-define\r\nde.biancoroyal.modbus.core.client.internalDebug = de.biancoroyal.modbus.core.client.internalDebug || require('debug')('contribModbus:core:client') // eslint-disable-line no-use-before-define\r\nde.biancoroyal.modbus.core.client.internalDebugFSM = de.biancoroyal.modbus.core.client.internalDebugFSM || require('debug')('contribModbus:core:client:fsm') // eslint-disable-line no-use-before-define\r\nde.biancoroyal.modbus.core.client.modbusSerialDebug = de.biancoroyal.modbus.core.client.modbusSerialDebug || require('debug')('modbus-serial') // eslint-disable-line no-use-before-define\r\nde.biancoroyal.modbus.core.client.XStateFSM = de.biancoroyal.modbus.core.client.XStateFSM || require('@xstate/fsm') // eslint-disable-line no-use-before-define\r\nde.biancoroyal.modbus.core.client.stateLogEnabled = de.biancoroyal.modbus.core.client.stateLogEnabled || false // eslint-disable-line no-use-before-define\r\n\r\nde.biancoroyal.modbus.core.client.networkErrors = ['ESOCKETTIMEDOUT', 'ETIMEDOUT', 'ECONNRESET', 'ENETRESET',\r\n  'ECONNABORTED', 'ECONNREFUSED', 'ENETUNREACH', 'ENOTCONN',\r\n  'ESHUTDOWN', 'EHOSTDOWN', 'ENETDOWN', 'EWOULDBLOCK', 'EAGAIN', 'EHOSTUNREACH']\r\n\r\nde.biancoroyal.modbus.core.client.createStateMachineService = function () {\r\n  this.stateLogEnabled = false\r\n\r\n  // failure is a general gate point in states to jump between states\r\n  return this.XStateFSM.createMachine({\r\n    id: 'modbus',\r\n    initial: 'new',\r\n    states: {\r\n      new: {\r\n        on: { INIT: 'init', BREAK: 'broken', STOP: 'stopped' }\r\n      },\r\n      broken: {\r\n        on: { INIT: 'init', STOP: 'stopped', FAILURE: 'failed', ACTIVATE: 'activated', RECONNECT: 'reconnecting' }\r\n      },\r\n      reconnecting: {\r\n        on: { INIT: 'init', STOP: 'stopped' }\r\n      },\r\n      init: {\r\n        on: { OPENSERIAL: 'opened', CONNECT: 'connected', BREAK: 'broken', FAILURE: 'failed', STOP: 'stopped', SWITCH: 'switch' }\r\n      },\r\n      opened: {\r\n        on: { CONNECT: 'connected', BREAK: 'broken', FAILURE: 'failed', CLOSE: 'closed', STOP: 'stopped', SWITCH: 'switch' }\r\n      },\r\n      connected: {\r\n        on: { CLOSE: 'closed', ACTIVATE: 'activated', QUEUE: 'queueing', BREAK: 'broken', FAILURE: 'failed', STOP: 'stopped', SWITCH: 'switch' }\r\n      },\r\n      activated: {\r\n        on: {\r\n          READ: 'reading',\r\n          WRITE: 'writing',\r\n          QUEUE: 'queueing',\r\n          BREAK: 'broken',\r\n          CLOSE: 'closed',\r\n          FAILURE: 'failed',\r\n          STOP: 'stopped',\r\n          SWITCH: 'switch'\r\n        }\r\n      },\r\n      queueing: {\r\n        on: {\r\n          ACTIVATE: 'activated',\r\n          SEND: 'sending',\r\n          READ: 'reading',\r\n          WRITE: 'writing',\r\n          EMPTY: 'empty',\r\n          BREAK: 'broken',\r\n          CLOSE: 'closed',\r\n          FAILURE: 'failed',\r\n          STOP: 'stopped',\r\n          SWITCH: 'switch'\r\n        }\r\n      },\r\n      empty: { on: { QUEUE: 'queueing', BREAK: 'broken', FAILURE: 'failed', CLOSE: 'closed', STOP: 'stopped', SWITCH: 'switch' } },\r\n      sending: { on: { ACTIVATE: 'activated', READ: 'reading', WRITE: 'writing', BREAK: 'broken', FAILURE: 'failed', STOP: 'stopped', SWITCH: 'switch' } },\r\n      reading: { on: { ACTIVATE: 'activated', BREAK: 'broken', FAILURE: 'failed', STOP: 'stopped' } },\r\n      writing: { on: { ACTIVATE: 'activated', BREAK: 'broken', FAILURE: 'failed', STOP: 'stopped' } },\r\n      closed: { on: { FAILURE: 'failed', BREAK: 'broken', CONNECT: 'connected', RECONNECT: 'reconnecting', INIT: 'init', STOP: 'stopped', SWITCH: 'switch' } },\r\n      failed: { on: { CLOSE: 'closed', BREAK: 'broken', STOP: 'stopped', SWITCH: 'switch' } },\r\n      switch: { on: { CLOSE: 'closed', BREAK: 'broken', STOP: 'stopped' } },\r\n      stopped: { on: { NEW: 'new', STOP: 'stopped' } }\r\n    }\r\n  })\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.getActualUnitId = function (node, msg) {\r\n  if (msg.payload && Number.isInteger(msg.payload.unitid)) {\r\n    return parseInt(msg.payload.unitid)\r\n  } else if (Number.isInteger(msg.queueUnitId)) {\r\n    return parseInt(msg.queueUnitId)\r\n  } else {\r\n    return parseInt(node.unit_id)\r\n  }\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.startStateService = function (toggleMachine) {\r\n  return this.XStateFSM.interpret(toggleMachine).start()\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.checkUnitId = function (unitid, clientType) {\r\n  if (clientType === 'tcp') {\r\n    return unitid >= 0 && unitid <= 255\r\n  } else {\r\n    return unitid >= 0 && unitid <= 247\r\n  }\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.getLogFunction = function (node) {\r\n  if (node.internalDebugLog) {\r\n    return node.internalDebugLog\r\n  } else {\r\n    return de.biancoroyal.modbus.core.client.internalDebug\r\n  }\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.activateSendingOnSuccess = function (node, cb, cberr, resp, msg) {\r\n  node.activateSending(msg).then(function () {\r\n    cb(resp, msg)\r\n  }).catch(function (err) {\r\n    cberr(err, msg)\r\n  }).finally(function () {\r\n    node.stateService.send('ACTIVATE')\r\n  })\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.activateSendingOnFailure = function (node, cberr, err, msg) {\r\n  node.activateSending(msg).then(function () {\r\n    cberr(err, msg)\r\n  }).catch(function (err) {\r\n    cberr(err, msg)\r\n  }).finally(function () {\r\n    node.stateService.send('ACTIVATE')\r\n  })\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.readModbusByFunctionCodeOne = function (node, msg, cb, cberr) {\r\n  const coreClient = de.biancoroyal.modbus.core.client\r\n  node.client.readCoils(parseInt(msg.payload.address), parseInt(msg.payload.quantity)).then(function (resp) {\r\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\r\n  }).catch(function (err) {\r\n    coreClient.activateSendingOnFailure(node, cberr, new Error(err.message), msg)\r\n    node.modbusErrorHandling(err)\r\n  })\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.readModbusByFunctionCodeTwo = function (node, msg, cb, cberr) {\r\n  const coreClient = de.biancoroyal.modbus.core.client\r\n  node.client.readDiscreteInputs(parseInt(msg.payload.address), parseInt(msg.payload.quantity)).then(function (resp) {\r\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\r\n  }).catch(function (err) {\r\n    coreClient.activateSendingOnFailure(node, cberr, new Error(err.message), msg)\r\n    node.modbusErrorHandling(err)\r\n  })\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.readModbusByFunctionCodeThree = function (node, msg, cb, cberr) {\r\n  const coreClient = de.biancoroyal.modbus.core.client\r\n  node.client.readHoldingRegisters(parseInt(msg.payload.address), parseInt(msg.payload.quantity)).then(function (resp) {\r\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\r\n  }).catch(function (err) {\r\n    coreClient.activateSendingOnFailure(node, cberr, new Error(err.message), msg)\r\n    node.modbusErrorHandling(err)\r\n  })\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.readModbusByFunctionCodeFour = function (node, msg, cb, cberr) {\r\n  const coreClient = de.biancoroyal.modbus.core.client\r\n  node.client.readInputRegisters(parseInt(msg.payload.address), parseInt(msg.payload.quantity)).then(function (resp) {\r\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\r\n  }).catch(function (err) {\r\n    coreClient.activateSendingOnFailure(node, cberr, new Error(err.message), msg)\r\n    node.modbusErrorHandling(err)\r\n  })\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.readModbusByFunctionCode = function (node, msg, cb, cberr) {\r\n  const coreClient = de.biancoroyal.modbus.core.client\r\n  const nodeLog = de.biancoroyal.modbus.core.client.getLogFunction(node)\r\n\r\n  switch (parseInt(msg.payload.fc)) {\r\n    case 1:\r\n      coreClient.readModbusByFunctionCodeOne(node, msg, cb, cberr)\r\n      break\r\n    case 2:\r\n      coreClient.readModbusByFunctionCodeTwo(node, msg, cb, cberr)\r\n      break\r\n    case 3:\r\n      coreClient.readModbusByFunctionCodeThree(node, msg, cb, cberr)\r\n      break\r\n    case 4:\r\n      coreClient.readModbusByFunctionCodeFour(node, msg, cb, cberr)\r\n      break\r\n    default:\r\n      coreClient.activateSendingOnFailure(node, cberr, new Error('Function Code Unknown'), msg)\r\n      nodeLog('Function Code Unknown %s', msg.payload.fc)\r\n      break\r\n  }\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.readModbus = function (node, msg, cb, cberr) {\r\n  const coreClient = de.biancoroyal.modbus.core.client\r\n  const nodeLog = de.biancoroyal.modbus.core.client.getLogFunction(node)\r\n\r\n  if (!node.client) {\r\n    nodeLog('Client Not Ready As Object On Reading Modbus')\r\n    return\r\n  }\r\n\r\n  if (!node.bufferCommands) {\r\n    if (node.clienttype !== 'tcp') {\r\n      node.stateService.send('READ')\r\n    }\r\n  } else {\r\n    node.queueLog(JSON.stringify({\r\n      info: 'read msg via Modbus',\r\n      message: msg.payload,\r\n      queueUnitId: msg.queueUnitId,\r\n      timeout: node.client.getTimeout(),\r\n      state: node.actualServiceState.value\r\n    }))\r\n  }\r\n\r\n  node.setUnitIdFromPayload(msg)\r\n  node.client.setTimeout(node.clientTimeout)\r\n\r\n  try {\r\n    coreClient.readModbusByFunctionCode(node, msg, cb, cberr)\r\n  } catch (err) {\r\n    nodeLog(err.message)\r\n    node.modbusErrorHandling(err)\r\n    coreClient.activateSendingOnFailure(node, cberr, err, msg)\r\n  }\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.writeModbusByFunctionCodeFive = function (node, msg, cb, cberr) {\r\n  const coreClient = de.biancoroyal.modbus.core.client\r\n  if (msg.payload.value) {\r\n    msg.payload.value = true\r\n  } else {\r\n    msg.payload.value = false\r\n  }\r\n  node.client.writeCoil(parseInt(msg.payload.address), msg.payload.value).then(function (resp) {\r\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\r\n  }).catch(function (err) {\r\n    if (node.client.getID() === 0) {\r\n      const resp = {\r\n        address: parseInt(msg.payload.address),\r\n        value: parseInt(msg.payload.value)\r\n      }\r\n      coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\r\n    } else {\r\n      coreClient.activateSendingOnFailure(node, cberr, err, msg)\r\n      node.modbusErrorHandling(err)\r\n    }\r\n  })\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.writeModbusByFunctionCodeFiveDupline = function (node, msg, cb, cberr) {\r\n  const coreClient = de.biancoroyal.modbus.core.client\r\n  node.client.writeCoilDupline(parseInt(msg.payload.address), msg.payload.value).then(function (resp) {\r\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\r\n  }).catch(function (err) {\r\n    if (node.client.getID() === 0) {\r\n      const resp = {\r\n        address: parseInt(msg.payload.address),\r\n        value: msg.payload.value\r\n      }\r\n      coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\r\n    } else {\r\n      coreClient.activateSendingOnFailure(node, cberr, err, msg)\r\n      node.modbusErrorHandling(err)\r\n    }\r\n  })\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.writeModbusByFunctionCodeFifteen = function (node, msg, cb, cberr) {\r\n  const coreClient = de.biancoroyal.modbus.core.client\r\n  if (parseInt(msg.payload.value.length) !== parseInt(msg.payload.quantity)) {\r\n    coreClient.activateSendingOnFailure(node, cberr, new Error('Quantity should be less or equal to coil payload array length: ' +\r\n      msg.payload.value.length + ' Addr: ' + msg.payload.address + ' Q: ' + msg.payload.quantity), msg)\r\n  } else {\r\n    node.client.writeCoils(parseInt(msg.payload.address), msg.payload.value).then(function (resp) {\r\n      coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\r\n    }).catch(function (err) {\r\n      if (node.client.getID() === 0) {\r\n        const resp = {\r\n          address: parseInt(msg.payload.address),\r\n          value: parseInt(msg.payload.value)\r\n        }\r\n        coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\r\n      } else {\r\n        coreClient.activateSendingOnFailure(node, cberr, err, msg)\r\n        node.modbusErrorHandling(err)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.writeModbusByFunctionCodeSix = function (node, msg, cb, cberr) {\r\n  const coreClient = de.biancoroyal.modbus.core.client\r\n  node.client.writeRegister(parseInt(msg.payload.address), parseInt(msg.payload.value)).then(function (resp) {\r\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\r\n  }).catch(function (err) {\r\n    if (node.client.getID() === 0) {\r\n      const resp = {\r\n        address: parseInt(msg.payload.address),\r\n        value: parseInt(msg.payload.value)\r\n      }\r\n      coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\r\n    } else {\r\n      coreClient.activateSendingOnFailure(node, cberr, err, msg)\r\n      node.modbusErrorHandling(err)\r\n    }\r\n  })\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.writeModbusByFunctionCodeSixteen = function (node, msg, cb, cberr) {\r\n  const coreClient = de.biancoroyal.modbus.core.client\r\n  if (parseInt(msg.payload.value.length) !== parseInt(msg.payload.quantity)) {\r\n    coreClient.activateSendingOnFailure(node, cberr, new Error('Quantity should be less or equal to register payload array length: ' +\r\n      msg.payload.value.length + ' Addr: ' + msg.payload.address + ' Q: ' + msg.payload.quantity), msg)\r\n  } else {\r\n    node.client.writeRegisters(parseInt(msg.payload.address), msg.payload.value).then(function (resp) {\r\n      coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\r\n    }).catch(function (err) {\r\n      if (node.client.getID() === 0) {\r\n        const resp = {\r\n          address: parseInt(msg.payload.address),\r\n          value: parseInt(msg.payload.value)\r\n        }\r\n        coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\r\n      } else {\r\n        coreClient.activateSendingOnFailure(node, cberr, err, msg)\r\n        node.modbusErrorHandling(err)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.writeModbus = function (node, msg, cb, cberr) {\r\n  const coreClient = de.biancoroyal.modbus.core.client\r\n  const nodeLog = de.biancoroyal.modbus.core.client.getLogFunction(node)\r\n\r\n  if (!node.client) {\r\n    nodeLog('Client Not Ready As Object On Writing Modbus')\r\n    return\r\n  }\r\n\r\n  if (!node.bufferCommands) {\r\n    if (node.clienttype !== 'tcp') {\r\n      node.stateService.send('WRITE')\r\n    }\r\n  } else {\r\n    node.queueLog(JSON.stringify({\r\n      info: 'write msg',\r\n      message: msg.payload,\r\n      queueUnitId: msg.queueUnitId,\r\n      timeout: node.client.getTimeout(),\r\n      state: node.actualServiceState.value\r\n    }))\r\n  }\r\n\r\n  node.setUnitIdFromPayload(msg)\r\n  node.client.setTimeout(node.clientTimeout)\r\n\r\n  try {\r\n    switch (parseInt(msg.payload.fc)) {\r\n      case 15: // FC: 15\r\n        coreClient.writeModbusByFunctionCodeFifteen(node, msg, cb, cberr)\r\n        break\r\n      case 5: // FC: 5\r\n        coreClient.writeModbusByFunctionCodeFive(node, msg, cb, cberr)\r\n        break\r\n      case 50: // FC: 50\r\n        coreClient.writeModbusByFunctionCodeFiveDupline(node, msg, cb, cberr)\r\n        break\r\n      case 16: // FC: 16\r\n        coreClient.writeModbusByFunctionCodeSixteen(node, msg, cb, cberr)\r\n        break\r\n      case 6: // FC: 6\r\n        coreClient.writeModbusByFunctionCodeSix(node, msg, cb, cberr)\r\n        break\r\n      default:\r\n        coreClient.activateSendingOnFailure(node, cberr, new Error('Function Code Unknown'), msg)\r\n        nodeLog('Function Code Unknown %s', msg.payload.fc)\r\n        break\r\n    }\r\n  } catch (err) {\r\n    nodeLog(err.message)\r\n    coreClient.activateSendingOnFailure(node, cberr, err, msg)\r\n    node.modbusErrorHandling(err)\r\n  }\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.setNewTCPNodeSettings = function (node, msg) {\r\n  node.tcpHost = msg.payload.tcpHost || node.tcpHost\r\n  node.tcpPort = msg.payload.tcpPort || node.tcpPort\r\n  node.tcpType = msg.payload.tcpType || node.tcpType\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.setNewSerialNodeSettings = function (node, msg) {\r\n  if (msg.payload.serialPort) {\r\n    node.serialPort = msg.payload.serialPort || node.serialPort\r\n  }\r\n\r\n  if (msg.payload.serialBaudrate) {\r\n    node.serialBaudrate = parseInt(msg.payload.serialBaudrate) || node.serialBaudrate\r\n  }\r\n\r\n  node.serialDatabits = msg.payload.serialDatabits || node.serialDatabits\r\n  node.serialStopbits = msg.payload.serialStopbits || node.serialStopbits\r\n  node.serialParity = msg.payload.serialParity || node.serialParity\r\n  node.serialType = msg.payload.serialType || node.serialType\r\n\r\n  // Make sure is parsed when string, otherwise just assign.\r\n  if (msg.payload.serialAsciiResponseStartDelimiter && typeof msg.payload.serialAsciiResponseStartDelimiter === 'string') {\r\n    node.serialAsciiResponseStartDelimiter = parseInt(msg.payload.serialAsciiResponseStartDelimiter, 16)\r\n  } else {\r\n    node.serialAsciiResponseStartDelimiter = msg.payload.serialAsciiResponseStartDelimiter || node.serialAsciiResponseStartDelimiter\r\n  }\r\n\r\n  if (msg.payload.serialConnectionDelay) {\r\n    node.serialConnectionDelay = parseInt(msg.payload.serialConnectionDelay) || node.serialConnectionDelay\r\n  }\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.setNewNodeOptionalSettings = function (node, msg) {\r\n  if (msg.payload.unitId) {\r\n    node.unit_id = parseInt(msg.payload.unitId) || node.unit_id\r\n  }\r\n\r\n  if (msg.payload.commandDelay) {\r\n    node.commandDelay = parseInt(msg.payload.commandDelay) || node.commandDelay\r\n  }\r\n\r\n  if (msg.payload.clientTimeout) {\r\n    node.clientTimeout = parseInt(msg.payload.clientTimeout) || node.clientTimeout\r\n  }\r\n\r\n  if (msg.payload.reconnectTimeout) {\r\n    node.reconnectTimeout = parseInt(msg.payload.reconnectTimeout) || node.reconnectTimeout\r\n  }\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.setNewNodeSettings = function (node, msg) {\r\n  const nodeLog = de.biancoroyal.modbus.core.client.getLogFunction(node)\r\n  const coreClient = de.biancoroyal.modbus.core.client\r\n\r\n  if (!msg) {\r\n    nodeLog('New Connection message invalid.')\r\n    return false\r\n  }\r\n\r\n  switch (msg.payload.connectorType.toUpperCase()) {\r\n    case 'TCP':\r\n      coreClient.setNewTCPNodeSettings(node, msg)\r\n      nodeLog('New Connection TCP Settings ' + node.tcpHost + ' ' + node.tcpPort + ' ' + node.tcpType)\r\n      break\r\n\r\n    case 'SERIAL':\r\n      coreClient.setNewSerialNodeSettings(node, msg)\r\n      nodeLog('New Connection Serial Settings ' + node.serialPort + ' ' + node.serialBaudrate + ' ' + node.serialType)\r\n      break\r\n\r\n    default:\r\n      nodeLog('Unknown Dynamic Reconnect Type ' + msg.payload.connectorType)\r\n  }\r\n\r\n  coreClient.setNewNodeOptionalSettings(node, msg)\r\n\r\n  return true\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.messagesAllowedStates = ['activated', 'queueing', 'sending', 'empty', 'connected']\r\n\r\nmodule.exports = de.biancoroyal.modbus.core.client\r\n"],"file":"../../core/modbus-client-core.js"}