{"version":3,"sources":["modbus-queue-info.js"],"names":["module","exports","RED","require","install","mbBasics","coreModbusQueue","internalDebugLog","ModbusQueueInfo","config","nodes","createNode","name","topic","unitid","parseInt","lowLowLevel","lowLevel","highLevel","highHighLevel","errorOnHighLevel","queueReadIntervalTime","showStatusActivities","updateOnAllQueueChanges","updateOnAllUnitQueues","node","queueReadInterval","updateStatusRrunning","unitsWithQueue","Map","setNodeStatusTo","modbusClient","getNode","server","registerForModbus","initUnitQueueStates","unit","set","resetStates","unitWithQueue","get","lowLowLevelReached","lowLevelReached","highLevelReached","highHighLevelReached","errorProtocolMsg","err","msg","logMsgError","sendEmptyMsgOnFail","checkLowLevelReached","bufferCommandListLength","payload","Date","now","state","modbusClientName","send","checkHighLevelReached","id","error","Error","warn","checkHighHighLevelReached","getStatusSituationFillColor","fillColor","setNodeStatusByActivity","status","fill","shape","text","readFromQueue","bufferCommands","Promise","resolve","reject","bufferCommandList","length","checkQueueStates","readFromAllUnitQueues","registerModbusQueueActionsToNode","eventCallback","on","setInterval","removeModbusQueueActionsFromNode","removeListener","msgUnitId","queueEnabled","allQueueData","queues","resetQueue","unitId","queue","queueOptions","date","lowlowLevel","msgQueueReset","initQueue","settings","verbose","infoText","done","clearInterval","deregisterForModbus","setNodeDefaultStatus","registerType"],"mappings":"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","sourcesContent":["/**\r\n Copyright (c) 2016,2017,2018,2019,2020,2021 Klaus Landsdorf (https://bianco-royal.space/)\r\n All rights reserved.\r\n node-red-contrib-modbus - The BSD 3-Clause License\r\n\r\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\r\n **/\r\n\r\n/**\r\n * Modbus Read node.\r\n * @module NodeRedModbusRead\r\n *\r\n * @param RED\r\n */\r\nmodule.exports = function (RED) {\r\n  'use strict'\r\n  require('source-map-support').install()\r\n  const mbBasics = require('./modbus-basics')\r\n  const coreModbusQueue = require('./core/modbus-queue-core')\r\n  const internalDebugLog = require('debug')('contribModbus:queue')\r\n\r\n  function ModbusQueueInfo (config) {\r\n    RED.nodes.createNode(this, config)\r\n\r\n    this.name = config.name\r\n    this.topic = config.topic\r\n    this.unitid = parseInt(config.unitid) || 1\r\n    this.lowLowLevel = parseInt(config.lowLowLevel)\r\n    this.lowLevel = parseInt(config.lowLevel)\r\n    this.highLevel = parseInt(config.highLevel)\r\n    this.highHighLevel = parseInt(config.highHighLevel)\r\n    this.errorOnHighLevel = config.errorOnHighLevel\r\n    this.queueReadIntervalTime = config.queueReadIntervalTime || 1000\r\n    this.showStatusActivities = config.showStatusActivities\r\n    this.updateOnAllQueueChanges = config.updateOnAllQueueChanges\r\n    this.updateOnAllUnitQueues = config.updateOnAllUnitQueues\r\n\r\n    this.internalDebugLog = internalDebugLog\r\n\r\n    const node = this\r\n    node.queueReadInterval = null\r\n    node.updateStatusRrunning = false\r\n    node.unitsWithQueue = new Map()\r\n    mbBasics.setNodeStatusTo('waiting', node)\r\n\r\n    const modbusClient = RED.nodes.getNode(config.server)\r\n    if (!modbusClient) {\r\n      return\r\n    }\r\n    modbusClient.registerForModbus(node)\r\n\r\n    node.initUnitQueueStates = function () {\r\n      for (let unit = 0; unit < 256; unit += 1) {\r\n        node.unitsWithQueue.set(unit, {})\r\n        node.resetStates(unit)\r\n      }\r\n    }\r\n\r\n    node.resetStates = function (unit) {\r\n      const unitWithQueue = node.unitsWithQueue.get(unit)\r\n      unitWithQueue.lowLowLevelReached = true\r\n      unitWithQueue.lowLevelReached = false\r\n      unitWithQueue.highLevelReached = false\r\n      unitWithQueue.highHighLevelReached = false\r\n    }\r\n\r\n    node.errorProtocolMsg = function (err, msg) {\r\n      mbBasics.logMsgError(node, err, msg)\r\n      mbBasics.sendEmptyMsgOnFail(node, err, msg)\r\n    }\r\n\r\n    node.initUnitQueueStates()\r\n\r\n    node.checkLowLevelReached = function (node, bufferCommandListLength, unit) {\r\n      const unitWithQueue = node.unitsWithQueue.get(unit)\r\n      if (!unitWithQueue.lowLevelReached && bufferCommandListLength > node.lowLowLevel && bufferCommandListLength < node.lowLevel) {\r\n        unitWithQueue.lowLevelReached = true\r\n        const msg = {\r\n          payload: Date.now(),\r\n          topic: node.topic,\r\n          state: 'low level reached',\r\n          unitid: unit,\r\n          modbusClientName: modbusClient.name,\r\n          bufferCommandListLength: bufferCommandListLength\r\n        }\r\n        node.send(msg)\r\n      }\r\n    }\r\n\r\n    node.checkHighLevelReached = function (node, bufferCommandListLength, unit) {\r\n      const unitWithQueue = node.unitsWithQueue.get(unit)\r\n      if (!unitWithQueue.highLevelReached &&\r\n        bufferCommandListLength > node.lowLevel &&\r\n        bufferCommandListLength > node.highLevel) {\r\n        unitWithQueue.highLevelReached = true\r\n        const msg = {\r\n          payload: Date.now(),\r\n          topic: node.topic,\r\n          state: 'high level reached',\r\n          unitid: unit,\r\n          modbusClientName: modbusClient.name || modbusClient.id,\r\n          highLevel: node.highLevel,\r\n          bufferCommandListLength: bufferCommandListLength\r\n        }\r\n\r\n        if (node.errorOnHighLevel) {\r\n          node.error(new Error('Queue High Level Reached'), msg)\r\n        } else {\r\n          node.warn(msg)\r\n        }\r\n\r\n        node.send(msg)\r\n      }\r\n    }\r\n\r\n    node.checkHighHighLevelReached = function (node, bufferCommandListLength, unit) {\r\n      const unitWithQueue = node.unitsWithQueue.get(unit)\r\n      if (!unitWithQueue.highHighLevelReached &&\r\n        bufferCommandListLength > node.highLevel &&\r\n        bufferCommandListLength > node.highHighLevel) {\r\n        unitWithQueue.highHighLevelReached = true\r\n        const msg = {\r\n          payload: Date.now(),\r\n          topic: node.topic,\r\n          state: 'high high level reached',\r\n          unitid: unit,\r\n          modbusClientName: modbusClient.name || modbusClient.id,\r\n          highLevel: node.highLevel,\r\n          highHighLevel: node.highHighLevel,\r\n          bufferCommandListLength: bufferCommandListLength\r\n        }\r\n        node.error(new Error('Queue High High Level Reached'), msg)\r\n        node.send(msg)\r\n      }\r\n    }\r\n\r\n    node.getStatusSituationFillColor = function (unit) {\r\n      const unitWithQueue = node.unitsWithQueue.get(unit)\r\n      let fillColor = 'blue'\r\n\r\n      if (unitWithQueue.lowLevelReached) {\r\n        fillColor = 'green'\r\n      }\r\n\r\n      if (unitWithQueue.highLevelReached) {\r\n        if (node.errorOnHighLevel) {\r\n          fillColor = 'red'\r\n        } else {\r\n          fillColor = 'yellow'\r\n        }\r\n      }\r\n\r\n      if (unitWithQueue.highHighLevelReached) {\r\n        fillColor = 'red'\r\n      }\r\n\r\n      return fillColor\r\n    }\r\n\r\n    node.setNodeStatusByActivity = function (bufferCommandListLength, unit) {\r\n      if (node.showStatusActivities) {\r\n        node.status({\r\n          fill: node.getStatusSituationFillColor(node.unitid),\r\n          shape: 'ring',\r\n          text: (bufferCommandListLength) ? 'active unit ' + unit + ' queue items: ' + bufferCommandListLength : 'active (Unit-Id: ' + unit + ') empty'\r\n        })\r\n      }\r\n    }\r\n\r\n    node.readFromQueue = function () {\r\n      if (node.updateStatusRrunning) {\r\n        return\r\n      }\r\n      const unit = ((node.unitid < 1 || node.unitid > 255)) ? 1 : node.unitid\r\n      if (modbusClient.bufferCommands) {\r\n        return new Promise(\r\n          function (resolve, reject) {\r\n            try {\r\n              node.updateStatusRrunning = true\r\n              const bufferCommandListLength = modbusClient.bufferCommandList.get(unit).length\r\n              node.checkQueueStates(bufferCommandListLength, unit)\r\n              node.setNodeStatusByActivity(bufferCommandListLength, unit)\r\n              node.updateStatusRrunning = false\r\n              resolve()\r\n            } catch (err) {\r\n              node.updateStatusRrunning = false\r\n              reject(err)\r\n            }\r\n          })\r\n      } else {\r\n        if (node.showStatusActivities) {\r\n          node.setNodeStatusByActivity(null, unit)\r\n        }\r\n      }\r\n    }\r\n\r\n    node.checkQueueStates = function (bufferCommandListLength, unit) {\r\n      const unitWithQueue = node.unitsWithQueue.get(unit)\r\n      if (!unitWithQueue.lowLowLevelReached && bufferCommandListLength < node.lowLowLevel) {\r\n        node.resetStates(unit)\r\n      }\r\n      node.checkLowLevelReached(node, bufferCommandListLength, unit)\r\n      node.checkHighLevelReached(node, bufferCommandListLength, unit)\r\n      node.checkHighHighLevelReached(node, bufferCommandListLength, unit)\r\n    }\r\n\r\n    node.readFromAllUnitQueues = function () {\r\n      if (node.updateStatusRrunning) {\r\n        return\r\n      }\r\n\r\n      if (modbusClient.bufferCommands) {\r\n        return new Promise(\r\n          function (resolve, reject) {\r\n            try {\r\n              node.updateStatusRrunning = true\r\n              let bufferCommandListLength = 0\r\n              for (let unit = 0; unit < 256; unit += 1) {\r\n                bufferCommandListLength = modbusClient.bufferCommandList.get(unit).length\r\n                if (!bufferCommandListLength) {\r\n                  continue\r\n                }\r\n                node.checkQueueStates(bufferCommandListLength, unit)\r\n              }\r\n              node.updateStatusRrunning = false\r\n              resolve()\r\n            } catch (err) {\r\n              node.updateStatusRrunning = false\r\n              reject(err)\r\n            }\r\n          })\r\n      }\r\n    }\r\n\r\n    node.registerModbusQueueActionsToNode = function (eventCallback) {\r\n      if (node.updateOnAllQueueChanges) { // much more CPU-Load on many parallel requests to the client\r\n        modbusClient.on('mbqueue', eventCallback) // en-queue\r\n      }\r\n      modbusClient.on('mbactive', eventCallback) // de-queue\r\n      modbusClient.on('mbinit', eventCallback)\r\n      modbusClient.on('mbconnected', eventCallback)\r\n      modbusClient.on('mberror', eventCallback)\r\n      modbusClient.on('mbclosed', eventCallback)\r\n      node.queueReadInterval = setInterval(eventCallback, node.queueReadIntervalTime)\r\n    }\r\n\r\n    node.removeModbusQueueActionsFromNode = function (eventCallback) {\r\n      modbusClient.removeListener('mbqueue', eventCallback)\r\n      modbusClient.removeListener('mbactive', eventCallback)\r\n      modbusClient.removeListener('mbinit', eventCallback)\r\n      modbusClient.removeListener('mbconnected', eventCallback)\r\n      modbusClient.removeListener('mberror', eventCallback)\r\n      modbusClient.removeListener('mbclosed', eventCallback)\r\n    }\r\n\r\n    if (node.updateOnAllUnitQueues) {\r\n      node.registerModbusQueueActionsToNode(node.readFromAllUnitQueues)\r\n      mbBasics.setNodeStatusTo('active for all queues', node)\r\n    } else {\r\n      node.registerModbusQueueActionsToNode(node.readFromQueue)\r\n    }\r\n\r\n    node.on('input', function (msg) {\r\n      let msgUnitId = node.unitid\r\n      msg.payload = {}\r\n      msg.payload.queueEnabled = modbusClient.bufferCommands\r\n\r\n      if (node.updateOnAllUnitQueues) {\r\n        msg.payload.allQueueData = true\r\n        msg.payload.queues = modbusClient.bufferCommandList\r\n      } else {\r\n        try {\r\n          if (msg.payload.resetQueue) {\r\n            msgUnitId = parseInt(msg.payload.unitId) || node.unitid\r\n          } else {\r\n            msgUnitId = parseInt(msg.payload) || node.unitid\r\n          }\r\n        } catch (err) {\r\n          node.errorProtocolMsg(err, msg)\r\n          msgUnitId = node.unitid\r\n        }\r\n        msg.payload.allQueueData = false\r\n        msg.payload.unitid = msgUnitId\r\n        msg.payload.queue = modbusClient.bufferCommandList.get(msgUnitId)\r\n      }\r\n\r\n      msg.payload.queueOptions = {\r\n        date: Date.now(),\r\n        state: 'queue request',\r\n        modbusClientName: modbusClient.name || modbusClient.id,\r\n        lowlowLevel: node.lowlowLevel,\r\n        unitId: msgUnitId,\r\n        lowLevel: node.lowLevel,\r\n        highLevel: node.highLevel,\r\n        highHighLevel: node.highHighLevel\r\n      }\r\n\r\n      const msgQueueReset = msg.payload.resetQueue || msg.resetQueue\r\n      if (msgQueueReset && modbusClient.bufferCommands) {\r\n        coreModbusQueue.initQueue(modbusClient)\r\n        if (RED.settings.verbose) {\r\n          const infoText = 'Init Queue By External Node'\r\n          modbusClient.warn(infoText)\r\n          internalDebugLog(infoText)\r\n        }\r\n        node.initUnitQueueStates()\r\n\r\n        if (node.showStatusActivities) {\r\n          node.status({\r\n            fill: 'blue',\r\n            shape: 'ring',\r\n            text: 'active empty unit queue'\r\n          })\r\n        }\r\n        msg.payload.queueOptions.state = 'queue reset done'\r\n      }\r\n\r\n      node.send(msg)\r\n    })\r\n\r\n    node.on('close', function (done) {\r\n      if (node.updateOnAllUnitQueues) {\r\n        node.removeModbusQueueActionsFromNode(node.readFromAllUnitQueues)\r\n      } else {\r\n        node.removeModbusQueueActionsFromNode(node.readFromQueue)\r\n      }\r\n      mbBasics.setNodeStatusTo('closed', node)\r\n      if (node.queueReadInterval) {\r\n        clearInterval(node.queueReadInterval)\r\n      }\r\n      node.queueReadInterval = null\r\n      modbusClient.deregisterForModbus(node.id, done)\r\n    })\r\n\r\n    if (!node.showStatusActivities) {\r\n      mbBasics.setNodeDefaultStatus(node)\r\n    }\r\n  }\r\n\r\n  RED.nodes.registerType('modbus-queue-info', ModbusQueueInfo)\r\n}\r\n"],"file":"../modbus-queue-info.js"}