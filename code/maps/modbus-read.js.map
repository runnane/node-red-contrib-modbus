{"version":3,"sources":["modbus-read.js"],"names":["module","exports","RED","require","install","mbBasics","mbCore","mbIOCore","internalDebugLog","ModbusRead","config","nodes","createNode","name","topic","unitid","dataType","adr","quantity","rate","rateUnit","delayOnStart","startDelayTime","parseInt","showStatusActivities","showErrors","connection","useIOFile","ioFile","getNode","useIOForPayload","logIOActivities","emptyMsgOnFail","verboseLogging","settings","verbose","node","timeoutOccurred","INPUT_TIMEOUT_MILLISECONDS","statusText","delayTimerReading","intervalTimerIdReading","setNodeStatusWithTimeTo","verboseWarn","logMessage","warn","serverInfo","id","modbusClient","server","onModbusInit","onModbusConnect","resetAllReadingTimer","initializeReadingTimer","onModbusRegister","serialSendingAllowed","onModbusActive","onModbusQueue","onModbusError","failureMsg","reconnectOnTimeout","onModbusClose","onModbusBroken","reconnectTimeout","onModbusReadDone","resp","msg","sendMessage","data","errorProtocolMsg","err","logMsgError","sendEmptyMsgOnFail","onModbusReadError","message","setModbusError","modbusPollingRead","client","from","payload","fc","functionCodeModbusRead","address","messageId","getObjectId","emit","resetDelayTimerToRead","clearTimeout","resetIntervalToRead","clearInterval","startIntervalReading","setInterval","calc_rateByUnit","setTimeout","removeNodeListenerFromModbusClient","removeListener","on","done","deregisterForModbus","values","response","lastUpdatedAt","internalDebug","allValueNames","nameValuesFromIOFile","valueNames","filterValueNames","origMsg","responseBuffer","input","sendingNodeId","send","statusValue","statusOptions","setNodeStatusProperties","search","newStatusText","status","getTimeInfo","fill","shape","text","get_timeUnit_name","registerForModbus","registerType","httpAdmin","post","auth","needsPermission","req","res","params","sendStatus","error","_","toString"],"mappings":"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","sourcesContent":["/**\r\n Copyright (c) 2016,2017,2018,2019,2020,2021 Klaus Landsdorf (https://bianco-royal.space/)\r\n Copyright 2016 - Jason D. Harper, Argonne National Laboratory\r\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc.\r\n Copyright 2013, 2016 IBM Corp. (node-red)\r\n All rights reserved.\r\n node-red-contrib-modbus\r\n\r\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\r\n **/\r\n/**\r\n * Modbus Read node.\r\n * @module NodeRedModbusRead\r\n *\r\n * @param RED\r\n */\r\nmodule.exports = function (RED) {\r\n  'use strict'\r\n  require('source-map-support').install()\r\n  const mbBasics = require('./modbus-basics')\r\n  const mbCore = require('./core/modbus-core')\r\n  const mbIOCore = require('./core/modbus-io-core')\r\n  const internalDebugLog = require('debug')('contribModbus:read')\r\n\r\n  function ModbusRead (config) {\r\n    RED.nodes.createNode(this, config)\r\n\r\n    this.name = config.name\r\n    this.topic = config.topic\r\n    this.unitid = config.unitid\r\n\r\n    this.dataType = config.dataType\r\n    this.adr = config.adr\r\n    this.quantity = config.quantity || 1\r\n\r\n    this.rate = config.rate\r\n    this.rateUnit = config.rateUnit\r\n\r\n    this.delayOnStart = config.delayOnStart\r\n    this.startDelayTime = parseInt(config.startDelayTime) || 10\r\n\r\n    this.showStatusActivities = config.showStatusActivities\r\n    this.showErrors = config.showErrors\r\n    this.connection = null\r\n\r\n    this.useIOFile = config.useIOFile\r\n    this.ioFile = RED.nodes.getNode(config.ioFile)\r\n    this.useIOForPayload = config.useIOForPayload\r\n    this.logIOActivities = config.logIOActivities\r\n\r\n    this.emptyMsgOnFail = config.emptyMsgOnFail\r\n    this.internalDebugLog = internalDebugLog\r\n    this.verboseLogging = RED.settings.verbose\r\n\r\n    const node = this\r\n    let timeoutOccurred = false\r\n    node.INPUT_TIMEOUT_MILLISECONDS = 1000\r\n    node.statusText = 'waiting'\r\n    node.delayTimerReading = false\r\n    node.intervalTimerIdReading = false\r\n    setNodeStatusWithTimeTo(node.statusText)\r\n\r\n    function verboseWarn (logMessage) {\r\n      if (RED.settings.verbose) {\r\n        node.warn('Client -> ' + logMessage + node.serverInfo)\r\n      }\r\n    }\r\n\r\n    verboseWarn('open node ' + node.id)\r\n    const modbusClient = RED.nodes.getNode(config.server)\r\n    if (!modbusClient) {\r\n      return\r\n    }\r\n\r\n    node.onModbusInit = function () {\r\n      setNodeStatusWithTimeTo('initialized')\r\n    }\r\n\r\n    node.onModbusConnect = function () {\r\n      setNodeStatusWithTimeTo('connected')\r\n      node.resetAllReadingTimer()\r\n      node.initializeReadingTimer()\r\n    }\r\n\r\n    node.onModbusRegister = function () {\r\n      if (node.showStatusActivities) {\r\n        setNodeStatusWithTimeTo('registered')\r\n      }\r\n\r\n      if (modbusClient.serialSendingAllowed) {\r\n        node.resetAllReadingTimer()\r\n        node.initializeReadingTimer()\r\n        setNodeStatusWithTimeTo('connected')\r\n      }\r\n    }\r\n\r\n    node.onModbusActive = function () {\r\n      setNodeStatusWithTimeTo('active')\r\n    }\r\n\r\n    node.onModbusQueue = function () {\r\n      setNodeStatusWithTimeTo('queue')\r\n    }\r\n\r\n    node.onModbusError = function (failureMsg) {\r\n      setNodeStatusWithTimeTo('failure')\r\n      if (modbusClient.reconnectOnTimeout) {\r\n        node.resetAllReadingTimer()\r\n      }\r\n\r\n      if (node.showErrors) {\r\n        node.warn(failureMsg)\r\n      }\r\n    }\r\n\r\n    node.onModbusClose = function () {\r\n      setNodeStatusWithTimeTo('closed')\r\n      node.resetAllReadingTimer()\r\n    }\r\n\r\n    node.onModbusBroken = function () {\r\n      setNodeStatusWithTimeTo('broken')\r\n      if (modbusClient.reconnectOnTimeout) {\r\n        setNodeStatusWithTimeTo('reconnecting after ' + modbusClient.reconnectTimeout + ' msec.')\r\n        node.resetAllReadingTimer()\r\n      }\r\n    }\r\n\r\n    node.onModbusReadDone = function (resp, msg) {\r\n      if (node.showStatusActivities) {\r\n        setNodeStatusWithTimeTo('reading done')\r\n      }\r\n      sendMessage(resp.data, resp, msg)\r\n    }\r\n\r\n    node.errorProtocolMsg = function (err, msg) {\r\n      mbBasics.logMsgError(node, err, msg)\r\n      mbBasics.sendEmptyMsgOnFail(node, err, msg)\r\n    }\r\n\r\n    node.onModbusReadError = function (err, msg) {\r\n      node.internalDebugLog(err.message)\r\n      node.errorProtocolMsg(err, msg)\r\n      mbBasics.setModbusError(node, modbusClient, err, msg)\r\n    }\r\n\r\n    node.modbusPollingRead = function () {\r\n      if (!modbusClient.client) {\r\n        setNodeStatusWithTimeTo('waiting')\r\n        return\r\n      }\r\n\r\n      const msg = {\r\n        topic: node.topic || 'polling',\r\n        from: node.name,\r\n        payload: {\r\n          unitid: node.unitid,\r\n          fc: mbCore.functionCodeModbusRead(node.dataType),\r\n          address: node.adr,\r\n          quantity: node.quantity,\r\n          messageId: mbCore.getObjectId()\r\n        }\r\n      }\r\n\r\n      if (node.showStatusActivities) {\r\n        setNodeStatusWithTimeTo('polling')\r\n      }\r\n\r\n      modbusClient.emit('readModbus', msg, node.onModbusReadDone, node.onModbusReadError)\r\n    }\r\n\r\n    node.resetDelayTimerToRead = function (node) {\r\n      if (node.delayTimerReading) {\r\n        verboseWarn('resetDelayTimerToRead node ' + node.id)\r\n        clearTimeout(node.delayTimerReading)\r\n      }\r\n      node.delayTimerReading = null\r\n    }\r\n\r\n    node.resetIntervalToRead = function (node) {\r\n      if (node.intervalTimerIdReading) {\r\n        verboseWarn('resetIntervalToRead node ' + node.id)\r\n        clearInterval(node.intervalTimerIdReading)\r\n      }\r\n      node.intervalTimerIdReading = null\r\n    }\r\n\r\n    node.resetAllReadingTimer = function () {\r\n      node.resetDelayTimerToRead(node)\r\n      node.resetIntervalToRead(node)\r\n    }\r\n\r\n    node.resetAllReadingTimer()\r\n\r\n    node.startIntervalReading = function () {\r\n      if (!node.intervalTimerIdReading) {\r\n        verboseWarn('startIntervalReading node ' + node.id)\r\n        node.intervalTimerIdReading = setInterval(node.modbusPollingRead, mbBasics.calc_rateByUnit(node.rate, node.rateUnit))\r\n      }\r\n    }\r\n\r\n    node.initializeReadingTimer = function () {\r\n      node.resetAllReadingTimer()\r\n      if (node.delayOnStart) {\r\n        verboseWarn('initializeReadingTimer delay timer node ' + node.id)\r\n        node.delayTimerReading = setTimeout(node.startIntervalReading, node.INPUT_TIMEOUT_MILLISECONDS * node.startDelayTime)\r\n      } else {\r\n        node.startIntervalReading()\r\n      }\r\n    }\r\n\r\n    node.removeNodeListenerFromModbusClient = function () {\r\n      modbusClient.removeListener('mbinit', node.onModbusInit)\r\n      modbusClient.removeListener('mbqueue', node.onModbusQueue)\r\n      modbusClient.removeListener('mbconnected', node.onModbusConnect)\r\n      modbusClient.removeListener('mbactive', node.onModbusActive)\r\n      modbusClient.removeListener('mberror', node.onModbusError)\r\n      modbusClient.removeListener('mbclosed', node.onModbusClose)\r\n      modbusClient.removeListener('mbbroken', node.onModbusBroken)\r\n      modbusClient.removeListener('mbregister', node.onModbusRegister)\r\n      modbusClient.removeListener('mbderegister', node.onModbusClose)\r\n    }\r\n\r\n    this.on('close', function (done) {\r\n      node.resetAllReadingTimer()\r\n      node.removeNodeListenerFromModbusClient()\r\n      setNodeStatusWithTimeTo('closed')\r\n      verboseWarn('close node ' + node.id)\r\n      modbusClient.deregisterForModbus(node.id, done)\r\n    })\r\n\r\n    function sendMessage (values, response, msg) {\r\n      const topic = msg.topic || node.topic\r\n      if (node.useIOFile && node.ioFile.lastUpdatedAt) {\r\n        if (node.logIOActivities) {\r\n          mbIOCore.internalDebug('node.adr:' + node.adr + ' node.quantity:' + node.quantity)\r\n        }\r\n\r\n        const allValueNames = mbIOCore.nameValuesFromIOFile(node, msg, values, response, node.adr)\r\n        const valueNames = mbIOCore.filterValueNames(node, allValueNames, mbCore.functionCodeModbusRead(node.dataType), node.adr, node.quantity)\r\n\r\n        const origMsg = {\r\n          topic,\r\n          responseBuffer: response,\r\n          input: msg,\r\n          sendingNodeId: node.id\r\n        }\r\n\r\n        if (node.useIOForPayload) {\r\n          origMsg.payload = valueNames\r\n          origMsg.values = values\r\n        } else {\r\n          origMsg.payload = values\r\n          origMsg.valueNames = valueNames\r\n        }\r\n\r\n        node.send([\r\n          origMsg,\r\n          {\r\n            topic,\r\n            payload: response,\r\n            values: values,\r\n            input: msg,\r\n            valueNames: valueNames,\r\n            sendingNodeId: node.id\r\n          }])\r\n      } else {\r\n        node.send([\r\n          {\r\n            topic,\r\n            payload: values,\r\n            responseBuffer: response,\r\n            input: msg,\r\n            sendingNodeId: node.id\r\n          },\r\n          {\r\n            topic,\r\n            payload: response,\r\n            values: values,\r\n            input: msg,\r\n            sendingNodeId: node.id\r\n          }\r\n        ])\r\n      }\r\n    }\r\n\r\n    function setNodeStatusWithTimeTo (statusValue) {\r\n      if (statusValue === 'polling' && timeoutOccurred) {\r\n        return\r\n      }\r\n\r\n      const statusOptions = mbBasics.setNodeStatusProperties(statusValue, node.showStatusActivities)\r\n      const statusText = node.statusText\r\n\r\n      if (statusValue.search('active') !== -1 || statusValue === 'polling') {\r\n        const newStatusText = statusOptions.status + getTimeInfo()\r\n        timeoutOccurred = false\r\n        if (newStatusText !== statusText) {\r\n          node.status({\r\n            fill: statusOptions.fill,\r\n            shape: statusOptions.shape,\r\n            text: newStatusText\r\n          })\r\n        }\r\n      } else {\r\n        const newStatusText = statusOptions.status\r\n        if (newStatusText !== statusText) {\r\n          node.status({\r\n            fill: statusOptions.fill,\r\n            shape: statusOptions.shape,\r\n            text: newStatusText\r\n          })\r\n        }\r\n      }\r\n    }\r\n\r\n    function getTimeInfo () {\r\n      return ' ( ' + node.rate + ' ' + mbBasics.get_timeUnit_name(node.rateUnit) + ' ) '\r\n    }\r\n\r\n    if (node.showStatusActivities) {\r\n      modbusClient.on('mbinit', node.onModbusInit)\r\n      modbusClient.on('mbqueue', node.onModbusQueue)\r\n    }\r\n\r\n    modbusClient.on('mbconnected', node.onModbusConnect)\r\n    modbusClient.on('mbactive', node.onModbusActive)\r\n    modbusClient.on('mberror', node.onModbusError)\r\n    modbusClient.on('mbclosed', node.onModbusClose)\r\n    modbusClient.on('mbbroken', node.onModbusBroken)\r\n    modbusClient.on('mbregister', node.onModbusRegister)\r\n    modbusClient.on('mbderegister', node.onModbusClose)\r\n\r\n    modbusClient.registerForModbus(node)\r\n  }\r\n\r\n  RED.nodes.registerType('modbus-read', ModbusRead)\r\n\r\n  RED.httpAdmin.post('/modbus/read/inject/:id', RED.auth.needsPermission('modbus.inject.write'), function (req, res) {\r\n    const node = RED.nodes.getNode(req.params.id)\r\n\r\n    if (node) {\r\n      try {\r\n        node.modbusPollingRead()\r\n        res.sendStatus(200)\r\n      } catch (err) {\r\n        res.sendStatus(500)\r\n        node.error(RED._('modbusinject.failed', { error: err.toString() }))\r\n      }\r\n    } else {\r\n      res.sendStatus(404)\r\n    }\r\n  })\r\n}\r\n"],"file":"../modbus-read.js"}