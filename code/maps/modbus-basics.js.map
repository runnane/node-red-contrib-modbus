{"version":3,"sources":["modbus-basics.js"],"names":["require","install","de","biancoroyal","modbus","basics","internalDebug","util","statusLog","get_timeUnit_name","unit","unitAbbreviation","calc_rateByUnit","rate","rateUnit","parseInt","setNodeStatusProperties","statusValue","showActivities","fillValue","shapeValue","statusText","value","fill","shape","status","setNodeStatusByResponseTo","response","node","text","inspect","setNodeStatusResponse","length","setModbusError","modbusClient","err","msg","message","setNodeStatusTo","emit","showErrors","showStatusActivities","statusOptions","setNodeDefaultStatus","onModbusInit","onModbusConnect","onModbusActive","onModbusError","failureMsg","warn","onModbusClose","onModbusQueue","onModbusBroken","reconnectTimeout","initModbusClientEvents","on","invalidPayloadIn","Object","prototype","hasOwnProperty","call","invalidSequencesIn","sendEmptyMsgOnFail","emptyMsgOnFail","payload","name","error","Error","nodeStatus","send","logMsgError","buildNewMessage","keepMsgProperties","minMsg","assign","module","exports"],"mappings":"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","sourcesContent":["/**\r\n Copyright (c) 2016,2017,2018,2019,2020,2021 Klaus Landsdorf (https://bianco-royal.space/)\r\n All rights reserved.\r\n node-red-contrib-modbus - The BSD 3-Clause License\r\n\r\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\r\n **/\r\n'use strict'\r\nrequire('source-map-support').install()\r\n\r\n// eslint-disable-next-line no-var\r\nvar de = de || { biancoroyal: { modbus: { basics: {} } } } // eslint-disable-line no-use-before-define\r\nde.biancoroyal.modbus.basics.internalDebug = de.biancoroyal.modbus.basics.internalDebug || require('debug')('contribModbus:basics') // eslint-disable-line no-use-before-define\r\nde.biancoroyal.modbus.basics.util = de.biancoroyal.modbus.basics.util || require('util') // eslint-disable-line no-use-before-define\r\n\r\n/**\r\n * Modbus core node basics.\r\n * @module NodeRedModbusBasics\r\n */\r\nde.biancoroyal.modbus.basics.statusLog = false\r\n/**\r\n *\r\n * @param unit\r\n * @returns {string}\r\n */\r\nde.biancoroyal.modbus.basics.get_timeUnit_name = function (unit) {\r\n  let unitAbbreviation = ''\r\n\r\n  switch (unit) {\r\n    case 'ms':\r\n      unitAbbreviation = 'msec.'\r\n      break\r\n    case 's':\r\n      unitAbbreviation = 'sec.'\r\n      break\r\n    case 'm':\r\n      unitAbbreviation = 'min.'\r\n      break\r\n    case 'h':\r\n      unitAbbreviation = 'h.'\r\n      break\r\n    default:\r\n      break\r\n  }\r\n\r\n  return unitAbbreviation\r\n}\r\n\r\nde.biancoroyal.modbus.basics.calc_rateByUnit = function (rate, rateUnit) {\r\n  switch (rateUnit) {\r\n    case 'ms':\r\n      break\r\n    case 's':\r\n      rate = parseInt(rate) * 1000 // seconds\r\n      break\r\n    case 'm':\r\n      rate = parseInt(rate) * 60000 // minutes\r\n      break\r\n    case 'h':\r\n      rate = parseInt(rate) * 3600000 // hours\r\n      break\r\n    default:\r\n      rate = 10000 // 10 sec.\r\n      break\r\n  }\r\n\r\n  return rate\r\n}\r\n/**\r\n *\r\n * @param statusValue\r\n * @param showActivities\r\n * @returns {{fill: string, shape: string, status: *}}\r\n */\r\nde.biancoroyal.modbus.basics.setNodeStatusProperties = function (statusValue, showActivities) {\r\n  let fillValue = 'yellow'\r\n  let shapeValue = 'ring'\r\n\r\n  if (!statusValue) {\r\n    statusValue = 'waiting'\r\n  }\r\n\r\n  let statusText = statusValue.value || statusValue\r\n\r\n  switch (statusText) {\r\n    case 'connecting':\r\n      fillValue = 'yellow'\r\n      shapeValue = 'ring'\r\n      break\r\n\r\n    case 'error':\r\n      fillValue = 'red'\r\n      shapeValue = 'ring'\r\n      break\r\n\r\n    case 'initialized':\r\n    case 'init':\r\n      fillValue = 'yellow'\r\n      shapeValue = 'dot'\r\n      break\r\n\r\n    case 'not ready to read':\r\n    case 'not ready to write':\r\n      fillValue = 'yellow'\r\n      shapeValue = 'ring'\r\n      break\r\n\r\n    case 'connected':\r\n    case 'queueing':\r\n    case 'queue':\r\n      fillValue = 'green'\r\n      shapeValue = 'ring'\r\n      break\r\n\r\n    case 'timeout':\r\n      fillValue = 'red'\r\n      shapeValue = 'ring'\r\n      break\r\n\r\n    case 'active':\r\n    case 'reading':\r\n    case 'writing':\r\n    case 'active reading':\r\n    case 'active writing':\r\n      if (!showActivities) {\r\n        statusText = 'active'\r\n      }\r\n      fillValue = 'green'\r\n      shapeValue = 'dot'\r\n      break\r\n\r\n    case 'disconnected':\r\n    case 'terminated':\r\n      fillValue = 'red'\r\n      shapeValue = 'ring'\r\n      break\r\n\r\n    case 'stopped':\r\n      fillValue = 'red'\r\n      shapeValue = 'dot'\r\n      break\r\n\r\n    case 'polling':\r\n      fillValue = 'green'\r\n      if (showActivities) {\r\n        shapeValue = 'ring'\r\n      } else {\r\n        statusText = 'active'\r\n        shapeValue = 'dot'\r\n      }\r\n      break\r\n\r\n    default:\r\n      if (statusText === 'waiting') {\r\n        fillValue = 'blue'\r\n        statusText = 'waiting ...'\r\n      }\r\n      break\r\n  }\r\n\r\n  return { fill: fillValue, shape: shapeValue, status: statusText }\r\n}\r\n\r\nde.biancoroyal.modbus.basics.setNodeStatusByResponseTo = function (statusValue, response, node) {\r\n  let fillValue = 'red'\r\n  let shapeValue = 'dot'\r\n\r\n  switch (statusValue) {\r\n    case 'initialized':\r\n    case 'queue':\r\n      fillValue = 'green'\r\n      shapeValue = 'ring'\r\n      break\r\n\r\n    case 'active':\r\n      fillValue = 'green'\r\n      shapeValue = 'dot'\r\n      break\r\n\r\n    default:\r\n      if (!statusValue || statusValue === 'waiting') {\r\n        fillValue = 'blue'\r\n        statusValue = 'waiting ...'\r\n      }\r\n      break\r\n  }\r\n\r\n  node.status({ fill: fillValue, shape: shapeValue, text: this.util.inspect(response, false, null) })\r\n}\r\n\r\nde.biancoroyal.modbus.basics.setNodeStatusResponse = function (length, node) {\r\n  node.status({\r\n    fill: 'green',\r\n    shape: 'dot',\r\n    text: 'active got length: ' + length\r\n  })\r\n}\r\n\r\nde.biancoroyal.modbus.basics.setModbusError = function (node, modbusClient, err, msg) {\r\n  if (err) {\r\n    switch (err.message) {\r\n      case 'Timed out':\r\n        this.setNodeStatusTo('timeout', node)\r\n        break\r\n      case 'FSM Not Ready To Reconnect':\r\n        this.setNodeStatusTo('not ready to reconnect', node)\r\n        break\r\n      case 'Port Not Open':\r\n        this.setNodeStatusTo('reconnect', node)\r\n        modbusClient.emit('reconnect')\r\n        break\r\n      default:\r\n        this.internalDebug(err.message)\r\n        if (node.showErrors) {\r\n          this.setNodeStatusTo('error ' + err.message, node)\r\n        }\r\n    }\r\n  }\r\n}\r\n\r\nde.biancoroyal.modbus.basics.setNodeStatusTo = function (statusValue, node) {\r\n  if (node.showStatusActivities) {\r\n    if (statusValue !== node.statusText) {\r\n      const statusOptions = this.setNodeStatusProperties(statusValue, node.showStatusActivities)\r\n      node.statusText = statusValue\r\n      node.status({\r\n        fill: statusOptions.fill,\r\n        shape: statusOptions.shape,\r\n        text: statusOptions.status\r\n      })\r\n    } else {\r\n      this.setNodeDefaultStatus(node)\r\n    }\r\n  }\r\n}\r\n\r\nde.biancoroyal.modbus.basics.onModbusInit = function (node) {\r\n  this.setNodeStatusTo('initialize', node)\r\n}\r\n\r\nde.biancoroyal.modbus.basics.onModbusConnect = function (node) {\r\n  this.setNodeStatusTo('connected', node)\r\n}\r\n\r\nde.biancoroyal.modbus.basics.onModbusActive = function (node) {\r\n  this.setNodeStatusTo('active', node)\r\n}\r\n\r\nde.biancoroyal.modbus.basics.onModbusError = function (node, failureMsg) {\r\n  this.setNodeStatusTo('failure', node)\r\n  if (node.showErrors) {\r\n    node.warn(failureMsg)\r\n  }\r\n}\r\n\r\nde.biancoroyal.modbus.basics.onModbusClose = function (node) {\r\n  this.setNodeStatusTo('closed', node)\r\n}\r\n\r\nde.biancoroyal.modbus.basics.onModbusQueue = function (node) {\r\n  this.setNodeStatusTo('queueing', node)\r\n}\r\n\r\nde.biancoroyal.modbus.basics.onModbusBroken = function (node, modbusClient) {\r\n  this.setNodeStatusTo('reconnecting after ' + modbusClient.reconnectTimeout + ' msec.', node)\r\n}\r\n\r\nde.biancoroyal.modbus.basics.setNodeDefaultStatus = function (node) {\r\n  node.status({ fill: 'green', shape: 'ring', text: 'active' })\r\n}\r\n\r\nde.biancoroyal.modbus.basics.initModbusClientEvents = function (node, modbusClient) {\r\n  if (node.showStatusActivities) {\r\n    modbusClient.on('mbinit', () => { this.onModbusInit(node) })\r\n    modbusClient.on('mbqueue', () => { this.onModbusQueue(node) })\r\n    modbusClient.on('mbconnected', () => { this.onModbusConnect(node) })\r\n    modbusClient.on('mbbroken', () => { this.onModbusBroken(node, modbusClient) })\r\n    modbusClient.on('mbactive', () => { this.onModbusActive(node) })\r\n    modbusClient.on('mberror', (failureMsg) => { this.onModbusError(node, failureMsg) })\r\n    modbusClient.on('mbclosed', () => { this.onModbusClose(node) })\r\n  } else {\r\n    this.setNodeDefaultStatus(node)\r\n  }\r\n}\r\n\r\nde.biancoroyal.modbus.basics.invalidPayloadIn = function (msg) {\r\n  return !(msg && Object.prototype.hasOwnProperty.call(msg, 'payload'))\r\n}\r\n\r\nde.biancoroyal.modbus.basics.invalidSequencesIn = function (msg) {\r\n  return !(msg && Object.prototype.hasOwnProperty.call(msg, 'sequences'))\r\n}\r\n\r\nde.biancoroyal.modbus.basics.sendEmptyMsgOnFail = function (node, err, msg) {\r\n  if (node.emptyMsgOnFail) {\r\n    msg.payload = ''\r\n\r\n    if (err && err.message && err.name) {\r\n      msg.error = err\r\n    } else {\r\n      msg.error = Error(err)\r\n    }\r\n    msg.error.nodeStatus = node.statusText\r\n\r\n    node.send([msg, msg])\r\n  }\r\n}\r\n\r\nde.biancoroyal.modbus.basics.logMsgError = function (node, err, msg) {\r\n  if (node.showErrors) {\r\n    node.error(err, msg)\r\n  }\r\n}\r\n\r\nde.biancoroyal.modbus.basics.buildNewMessage = function (keepMsgProperties, msg, minMsg) {\r\n  if (keepMsgProperties) {\r\n    return Object.assign(msg, minMsg)\r\n  } else {\r\n    return minMsg\r\n  }\r\n}\r\n\r\nmodule.exports = de.biancoroyal.modbus.basics\r\n"],"file":"../modbus-basics.js"}