{"version":3,"sources":["modbus-getter.js"],"names":["module","exports","RED","require","install","mbBasics","mbCore","mbIOCore","internalDebugLog","ModbusGetter","config","nodes","createNode","name","unitid","dataType","adr","quantity","showStatusActivities","showErrors","msgThruput","connection","useIOFile","ioFile","getNode","useIOForPayload","logIOActivities","emptyMsgOnFail","keepMsgProperties","verboseLogging","settings","verbose","node","bufferMessageList","Map","setNodeStatusTo","modbusClient","server","registerForModbus","initModbusClientEvents","onModbusCommandDone","resp","msg","send","buildMessageWithIO","data","emit","errorProtocolMsg","err","logMsgError","sendEmptyMsgOnFail","onModbusCommandError","message","origMsg","getOriginalMessage","setModbusError","buildNewMessageObject","messageId","getObjectId","topic","id","payload","value","fc","functionCodeModbusRead","address","on","invalidPayloadIn","client","origMsgInput","Object","assign","newMsg","set","buildNewMessage","actualServiceState","done","clear","deregisterForModbus","setNodeDefaultStatus","registerType"],"mappings":"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","sourcesContent":["/**\r\n Copyright (c) 2016,2017,2018,2019,2020,2021 Klaus Landsdorf (https://bianco-royal.space/)\r\n All rights reserved.\r\n node-red-contrib-modbus - The BSD 3-Clause License\r\n\r\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\r\n */\r\n/**\r\n * Modbus Getter node.\r\n * @module NodeRedModbusGetter\r\n *\r\n * @param RED\r\n */\r\nmodule.exports = function (RED) {\r\n  'use strict'\r\n  require('source-map-support').install()\r\n  const mbBasics = require('./modbus-basics')\r\n  const mbCore = require('./core/modbus-core')\r\n  const mbIOCore = require('./core/modbus-io-core')\r\n  const internalDebugLog = require('debug')('contribModbus:getter')\r\n\r\n  function ModbusGetter (config) {\r\n    RED.nodes.createNode(this, config)\r\n\r\n    this.name = config.name\r\n    this.unitid = config.unitid\r\n\r\n    this.dataType = config.dataType\r\n    this.adr = config.adr\r\n    this.quantity = config.quantity\r\n\r\n    this.showStatusActivities = config.showStatusActivities\r\n    this.showErrors = config.showErrors\r\n    this.msgThruput = config.msgThruput\r\n    this.connection = null\r\n\r\n    this.useIOFile = config.useIOFile\r\n    this.ioFile = RED.nodes.getNode(config.ioFile)\r\n    this.useIOForPayload = config.useIOForPayload\r\n    this.logIOActivities = config.logIOActivities\r\n\r\n    this.emptyMsgOnFail = config.emptyMsgOnFail\r\n    this.keepMsgProperties = config.keepMsgProperties\r\n    this.internalDebugLog = internalDebugLog\r\n    this.verboseLogging = RED.settings.verbose\r\n\r\n    const node = this\r\n    node.bufferMessageList = new Map()\r\n    mbBasics.setNodeStatusTo('waiting', node)\r\n\r\n    const modbusClient = RED.nodes.getNode(config.server)\r\n    if (!modbusClient) {\r\n      return\r\n    }\r\n    modbusClient.registerForModbus(node)\r\n    mbBasics.initModbusClientEvents(node, modbusClient)\r\n\r\n    node.onModbusCommandDone = function (resp, msg) {\r\n      if (node.showStatusActivities) {\r\n        mbBasics.setNodeStatusTo('reading done', node)\r\n      }\r\n      node.send(mbIOCore.buildMessageWithIO(node, resp.data, resp, msg))\r\n      node.emit('modbusGetterNodeDone')\r\n    }\r\n\r\n    node.errorProtocolMsg = function (err, msg) {\r\n      mbBasics.logMsgError(node, err, msg)\r\n      mbBasics.sendEmptyMsgOnFail(node, err, msg)\r\n    }\r\n\r\n    node.onModbusCommandError = function (err, msg) {\r\n      node.internalDebugLog(err.message)\r\n      const origMsg = mbCore.getOriginalMessage(node.bufferMessageList, msg)\r\n      node.errorProtocolMsg(err, origMsg)\r\n      mbBasics.setModbusError(node, modbusClient, err, origMsg)\r\n      node.emit('modbusGetterNodeError')\r\n    }\r\n\r\n    node.buildNewMessageObject = function (node, msg) {\r\n      const messageId = mbCore.getObjectId()\r\n      return {\r\n        topic: msg.topic || node.id,\r\n        messageId,\r\n        payload: {\r\n          value: msg.payload.value || msg.payload,\r\n          unitid: node.unitid,\r\n          fc: mbCore.functionCodeModbusRead(node.dataType),\r\n          address: node.adr,\r\n          quantity: node.quantity,\r\n          messageId\r\n        }\r\n      }\r\n    }\r\n\r\n    node.on('input', function (msg) {\r\n      if (mbBasics.invalidPayloadIn(msg)) {\r\n        return\r\n      }\r\n\r\n      if (!modbusClient.client) {\r\n        return\r\n      }\r\n\r\n      const origMsgInput = Object.assign({}, msg) // keep it origin\r\n      try {\r\n        const newMsg = node.buildNewMessageObject(node, origMsgInput)\r\n        node.bufferMessageList.set(newMsg.messageId, mbBasics.buildNewMessage(node.keepMsgProperties, origMsgInput, newMsg))\r\n        modbusClient.emit('readModbus', newMsg, node.onModbusCommandDone, node.onModbusCommandError)\r\n\r\n        if (node.showStatusActivities) {\r\n          mbBasics.setNodeStatusTo(modbusClient.actualServiceState, node)\r\n        }\r\n      } catch (err) {\r\n        node.errorProtocolMsg(err, origMsgInput)\r\n      }\r\n    })\r\n\r\n    node.on('close', function (done) {\r\n      mbBasics.setNodeStatusTo('closed', node)\r\n      node.bufferMessageList.clear()\r\n      modbusClient.deregisterForModbus(node.id, done)\r\n    })\r\n\r\n    if (!node.showStatusActivities) {\r\n      mbBasics.setNodeDefaultStatus(node)\r\n    }\r\n  }\r\n\r\n  RED.nodes.registerType('modbus-getter', ModbusGetter)\r\n}\r\n"],"file":"../modbus-getter.js"}