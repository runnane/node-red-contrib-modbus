{"version":3,"sources":["modbus-flex-sequencer.js"],"names":["module","exports","RED","require","install","mbBasics","mbCore","mbIOCore","internalDebugLog","ModbusFlexSequencer","config","nodes","createNode","name","sequences","showStatusActivities","showErrors","connection","useIOFile","ioFile","getNode","useIOForPayload","logIOActivities","emptyMsgOnFail","keepMsgProperties","verboseLogging","settings","verbose","node","bufferMessageList","Map","setNodeStatusTo","modbusClient","server","registerForModbus","initModbusClientEvents","onModbusReadDone","resp","msg","send","buildMessageWithIO","data","emit","errorProtocolMsg","err","logMsgError","sendEmptyMsgOnFail","onModbusReadError","message","origMsg","getOriginalMessage","setModbusError","prepareMsg","JSON","parse","fc","unitid","parseInt","address","quantity","isValidModbusMsg","isValid","Number","isInteger","error","buildNewMessageObject","messageId","getObjectId","topic","id","payload","on","client","origMsgInput","Object","assign","invalidSequencesIn","forEach","inputMsg","newMsg","set","buildNewMessage","actualServiceState","done","clear","deregisterForModbus","setNodeDefaultStatus","registerType"],"mappings":"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","sourcesContent":["/**\r\n Copyright (c) 2016,2017,2018,2019,2020,2021 Klaus Landsdorf (https://bianco-royal.space/)\r\n All rights reserved.\r\n node-red-contrib-modbus - The BSD 3-Clause License\r\n\r\n @author <a>Andrea Verardi</a> (Anversoft)\r\n */\r\n\r\n/**\r\n * Modbus Sequencer node.\r\n * @module NodeRedModbusFlexSequencer\r\n *\r\n * @param RED\r\n */\r\nmodule.exports = function (RED) {\r\n  'use strict'\r\n  require('source-map-support').install()\r\n  const mbBasics = require('./modbus-basics')\r\n  const mbCore = require('./core/modbus-core')\r\n  const mbIOCore = require('./core/modbus-io-core')\r\n  const internalDebugLog = require('debug')('contribModbus:poller')\r\n\r\n  function ModbusFlexSequencer (config) {\r\n    RED.nodes.createNode(this, config)\r\n\r\n    this.name = config.name\r\n    this.sequences = config.sequences\r\n\r\n    this.showStatusActivities = config.showStatusActivities\r\n    this.showErrors = config.showErrors\r\n    this.connection = null\r\n\r\n    this.useIOFile = config.useIOFile\r\n    this.ioFile = RED.nodes.getNode(config.ioFile)\r\n    this.useIOForPayload = config.useIOForPayload\r\n    this.logIOActivities = config.logIOActivities\r\n\r\n    this.emptyMsgOnFail = config.emptyMsgOnFail\r\n    this.keepMsgProperties = config.keepMsgProperties\r\n    this.internalDebugLog = internalDebugLog\r\n    this.verboseLogging = RED.settings.verbose\r\n\r\n    const node = this\r\n    node.bufferMessageList = new Map()\r\n    mbBasics.setNodeStatusTo('waiting', node)\r\n\r\n    const modbusClient = RED.nodes.getNode(config.server)\r\n    if (!modbusClient) {\r\n      return\r\n    }\r\n    modbusClient.registerForModbus(node)\r\n    mbBasics.initModbusClientEvents(node, modbusClient)\r\n\r\n    node.onModbusReadDone = function (resp, msg) {\r\n      if (node.showStatusActivities) {\r\n        mbBasics.setNodeStatusTo('reading done', node)\r\n      }\r\n\r\n      node.send(mbIOCore.buildMessageWithIO(node, resp.data, resp, msg))\r\n      node.emit('modbusFlexSequencerNodeDone')\r\n    }\r\n\r\n    node.errorProtocolMsg = function (err, msg) {\r\n      mbBasics.logMsgError(node, err, msg)\r\n      mbBasics.sendEmptyMsgOnFail(node, err, msg)\r\n    }\r\n\r\n    node.onModbusReadError = function (err, msg) {\r\n      node.internalDebugLog(err.message)\r\n      const origMsg = mbCore.getOriginalMessage(node.bufferMessageList, msg)\r\n      node.errorProtocolMsg(err, origMsg)\r\n      mbBasics.setModbusError(node, modbusClient, err, origMsg)\r\n      node.emit('modbusFlexSequencerNodeError')\r\n    }\r\n\r\n    node.prepareMsg = function (msg) {\r\n      if (typeof msg === 'string') {\r\n        msg = JSON.parse(msg)\r\n      }\r\n\r\n      switch (msg.fc) {\r\n        case 'FC1':\r\n          msg.fc = 1\r\n          break\r\n        case 'FC2':\r\n          msg.fc = 2\r\n          break\r\n        case 'FC3':\r\n          msg.fc = 3\r\n          break\r\n        case 'FC4':\r\n          msg.fc = 4\r\n          break\r\n      }\r\n\r\n      msg.unitid = parseInt(msg.unitid)\r\n      msg.address = parseInt(msg.address) || 0\r\n      msg.quantity = parseInt(msg.quantity) || 1\r\n\r\n      return msg\r\n    }\r\n\r\n    node.isValidModbusMsg = function (msg) {\r\n      let isValid = true\r\n\r\n      if (!(Number.isInteger(msg.unitid) &&\r\n          msg.unitid >= 0 &&\r\n          msg.unitid <= 255)) {\r\n        node.error('Unit ID Not Valid', msg)\r\n        isValid &= false\r\n      }\r\n\r\n      if (isValid &&\r\n        !(Number.isInteger(msg.address) &&\r\n          msg.address >= 0 &&\r\n          msg.address <= 65535)) {\r\n        node.error('Address Not Valid', msg)\r\n        isValid &= false\r\n      }\r\n\r\n      if (isValid &&\r\n        !(Number.isInteger(msg.quantity) &&\r\n          msg.quantity >= 1 &&\r\n          msg.quantity <= 65535)) {\r\n        node.error('Quantity Not Valid', msg)\r\n        isValid &= false\r\n      }\r\n\r\n      return isValid\r\n    }\r\n\r\n    node.buildNewMessageObject = function (node, msg) {\r\n      const messageId = mbCore.getObjectId()\r\n      return {\r\n        topic: msg.topic || node.id,\r\n        messageId,\r\n        payload: {\r\n          name: msg.name,\r\n          unitid: msg.unitid,\r\n          fc: msg.fc,\r\n          address: msg.address,\r\n          quantity: msg.quantity,\r\n          emptyMsgOnFail: node.emptyMsgOnFail,\r\n          keepMsgProperties: node.keepMsgProperties,\r\n          messageId\r\n        }\r\n      }\r\n    }\r\n\r\n    node.on('input', function (msg) {\r\n      if (!modbusClient.client) {\r\n        return\r\n      }\r\n\r\n      const origMsgInput = Object.assign({}, msg)\r\n      const sequences = mbBasics.invalidSequencesIn(msg) ? node.sequences : msg.sequences\r\n\r\n      try {\r\n        sequences.forEach(msg => {\r\n          const inputMsg = node.prepareMsg(msg)\r\n          if (node.isValidModbusMsg(inputMsg)) {\r\n            const newMsg = node.buildNewMessageObject(node, inputMsg)\r\n            node.bufferMessageList.set(newMsg.messageId, mbBasics.buildNewMessage(node.keepMsgProperties, inputMsg, newMsg))\r\n            modbusClient.emit('readModbus', newMsg, node.onModbusReadDone, node.onModbusReadError)\r\n          }\r\n        })\r\n      } catch (err) {\r\n        node.errorProtocolMsg(err, origMsgInput)\r\n      }\r\n\r\n      if (node.showStatusActivities) {\r\n        mbBasics.setNodeStatusTo(modbusClient.actualServiceState, node)\r\n      }\r\n    })\r\n\r\n    node.on('close', function (done) {\r\n      mbBasics.setNodeStatusTo('closed', node)\r\n      node.bufferMessageList.clear()\r\n      modbusClient.deregisterForModbus(node.id, done)\r\n    })\r\n\r\n    if (!node.showStatusActivities) {\r\n      mbBasics.setNodeDefaultStatus(node)\r\n    }\r\n  }\r\n\r\n  RED.nodes.registerType('modbus-flex-sequencer', ModbusFlexSequencer)\r\n}\r\n"],"file":"../modbus-flex-sequencer.js"}