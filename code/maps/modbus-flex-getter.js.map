{"version":3,"sources":["modbus-flex-getter.js"],"names":["module","exports","RED","require","install","mbBasics","mbCore","mbIOCore","internalDebugLog","ModbusFlexGetter","config","nodes","createNode","name","showStatusActivities","showErrors","connection","useIOFile","ioFile","getNode","useIOForPayload","logIOActivities","emptyMsgOnFail","keepMsgProperties","verboseLogging","settings","verbose","node","bufferMessageList","Map","setNodeStatusTo","modbusClient","server","registerForModbus","initModbusClientEvents","onModbusReadDone","resp","msg","send","buildMessageWithIO","data","emit","errorProtocolMsg","err","logMsgError","sendEmptyMsgOnFail","onModbusReadError","message","origMsg","getOriginalMessage","setModbusError","prepareMsg","payload","JSON","parse","fc","parseInt","unitid","address","quantity","isValidModbusMsg","isValid","Number","isInteger","error","buildNewMessageObject","messageId","getObjectId","topic","id","value","on","invalidPayloadIn","client","origMsgInput","Object","assign","inputMsg","newMsg","set","buildNewMessage","actualServiceState","done","clear","deregisterForModbus","setNodeDefaultStatus","registerType"],"mappings":"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","sourcesContent":["/**\r\n Copyright (c) 2016,2017,2018,2019,2020,2021 Klaus Landsdorf (https://bianco-royal.space/)\r\n All rights reserved.\r\n node-red-contrib-modbus - The BSD 3-Clause License\r\n\r\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\r\n */\r\n/**\r\n * Modbus flexible Getter node.\r\n * @module NodeRedModbusFlexGetter\r\n *\r\n * @param RED\r\n */\r\nmodule.exports = function (RED) {\r\n  'use strict'\r\n  require('source-map-support').install()\r\n  const mbBasics = require('./modbus-basics')\r\n  const mbCore = require('./core/modbus-core')\r\n  const mbIOCore = require('./core/modbus-io-core')\r\n  const internalDebugLog = require('debug')('contribModbus:flex:getter')\r\n\r\n  function ModbusFlexGetter (config) {\r\n    RED.nodes.createNode(this, config)\r\n\r\n    this.name = config.name\r\n    this.showStatusActivities = config.showStatusActivities\r\n    this.showErrors = config.showErrors\r\n    this.connection = null\r\n\r\n    this.useIOFile = config.useIOFile\r\n    this.ioFile = RED.nodes.getNode(config.ioFile)\r\n    this.useIOForPayload = config.useIOForPayload\r\n    this.logIOActivities = config.logIOActivities\r\n\r\n    this.emptyMsgOnFail = config.emptyMsgOnFail\r\n    this.keepMsgProperties = config.keepMsgProperties\r\n    this.internalDebugLog = internalDebugLog\r\n    this.verboseLogging = RED.settings.verbose\r\n\r\n    const node = this\r\n    node.bufferMessageList = new Map()\r\n    mbBasics.setNodeStatusTo('waiting', node)\r\n\r\n    const modbusClient = RED.nodes.getNode(config.server)\r\n    if (!modbusClient) {\r\n      return\r\n    }\r\n    modbusClient.registerForModbus(node)\r\n    mbBasics.initModbusClientEvents(node, modbusClient)\r\n\r\n    node.onModbusReadDone = function (resp, msg) {\r\n      if (node.showStatusActivities) {\r\n        mbBasics.setNodeStatusTo('reading done', node)\r\n      }\r\n\r\n      node.send(mbIOCore.buildMessageWithIO(node, resp.data, resp, msg))\r\n      node.emit('modbusFlexGetterNodeDone')\r\n    }\r\n\r\n    node.errorProtocolMsg = function (err, msg) {\r\n      mbBasics.logMsgError(node, err, msg)\r\n      mbBasics.sendEmptyMsgOnFail(node, err, msg)\r\n    }\r\n\r\n    node.onModbusReadError = function (err, msg) {\r\n      node.internalDebugLog(err.message)\r\n      const origMsg = mbCore.getOriginalMessage(node.bufferMessageList, msg)\r\n      node.errorProtocolMsg(err, origMsg)\r\n      mbBasics.setModbusError(node, modbusClient, err, origMsg)\r\n      node.emit('modbusFlexGetterNodeError')\r\n    }\r\n\r\n    node.prepareMsg = function (msg) {\r\n      if (typeof msg.payload === 'string') {\r\n        msg.payload = JSON.parse(msg.payload)\r\n      }\r\n\r\n      msg.payload.fc = parseInt(msg.payload.fc) || 3\r\n      msg.payload.unitid = parseInt(msg.payload.unitid)\r\n      msg.payload.address = parseInt(msg.payload.address) || 0\r\n      msg.payload.quantity = parseInt(msg.payload.quantity) || 1\r\n\r\n      return msg\r\n    }\r\n\r\n    node.isValidModbusMsg = function (msg) {\r\n      let isValid = true\r\n\r\n      if (!(Number.isInteger(msg.payload.fc) &&\r\n              msg.payload.fc >= 1 &&\r\n              msg.payload.fc <= 4)) {\r\n        node.error('FC Not Valid', msg)\r\n        isValid &= false\r\n      }\r\n\r\n      if (isValid &&\r\n            !(Number.isInteger(msg.payload.address) &&\r\n            msg.payload.address >= 0 &&\r\n            msg.payload.address <= 65535)) {\r\n        node.error('Address Not Valid', msg)\r\n        isValid &= false\r\n      }\r\n\r\n      if (isValid &&\r\n            !(Number.isInteger(msg.payload.quantity) &&\r\n            msg.payload.quantity >= 1 &&\r\n            msg.payload.quantity <= 65535)) {\r\n        node.error('Quantity Not Valid', msg)\r\n        isValid &= false\r\n      }\r\n\r\n      return isValid\r\n    }\r\n\r\n    node.buildNewMessageObject = function (node, msg) {\r\n      const messageId = mbCore.getObjectId()\r\n      return {\r\n        topic: msg.topic || node.id,\r\n        messageId,\r\n        payload: {\r\n          value: msg.payload.value || msg.value,\r\n          unitid: msg.payload.unitid,\r\n          fc: msg.payload.fc,\r\n          address: msg.payload.address,\r\n          quantity: msg.payload.quantity,\r\n          emptyMsgOnFail: node.emptyMsgOnFail,\r\n          keepMsgProperties: node.keepMsgProperties,\r\n          messageId\r\n        }\r\n      }\r\n    }\r\n\r\n    node.on('input', function (msg) {\r\n      if (mbBasics.invalidPayloadIn(msg) || !modbusClient.client) {\r\n        return\r\n      }\r\n\r\n      const origMsgInput = Object.assign({}, msg) // keep it origin\r\n      try {\r\n        const inputMsg = node.prepareMsg(origMsgInput)\r\n        if (node.isValidModbusMsg(inputMsg)) {\r\n          const newMsg = node.buildNewMessageObject(node, inputMsg)\r\n          node.bufferMessageList.set(newMsg.messageId, mbBasics.buildNewMessage(node.keepMsgProperties, inputMsg, newMsg))\r\n          modbusClient.emit('readModbus', newMsg, node.onModbusReadDone, node.onModbusReadError)\r\n        }\r\n      } catch (err) {\r\n        node.errorProtocolMsg(err, origMsgInput)\r\n      }\r\n\r\n      if (node.showStatusActivities) {\r\n        mbBasics.setNodeStatusTo(modbusClient.actualServiceState, node)\r\n      }\r\n    })\r\n\r\n    node.on('close', function (done) {\r\n      mbBasics.setNodeStatusTo('closed', node)\r\n      node.bufferMessageList.clear()\r\n      modbusClient.deregisterForModbus(node.id, done)\r\n    })\r\n\r\n    if (!node.showStatusActivities) {\r\n      mbBasics.setNodeDefaultStatus(node)\r\n    }\r\n  }\r\n\r\n  RED.nodes.registerType('modbus-flex-getter', ModbusFlexGetter)\r\n}\r\n"],"file":"../modbus-flex-getter.js"}