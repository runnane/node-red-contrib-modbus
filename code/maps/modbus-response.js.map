{"version":3,"sources":["modbus-response.js"],"names":["module","exports","RED","require","install","mbBasics","ModbusResponse","config","nodes","createNode","registerShowMax","node","setNodeStatusTo","on","msg","inputType","Object","prototype","hasOwnProperty","call","payload","data","length","setNodeStatusResponse","setNodeStatusByResponseTo","JSON","stringify","registerType"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,OAAP,GAAiB,UAAUC,GAAV,EAAe;AAC9B;;AACAC,EAAAA,OAAO,CAAC,oBAAD,CAAP,CAA8BC,OAA9B;;AACA,MAAMC,QAAQ,GAAGF,OAAO,CAAC,iBAAD,CAAxB;;AAEA,WAASG,cAAT,CAAyBC,MAAzB,EAAiC;AAC/BL,IAAAA,GAAG,CAACM,KAAJ,CAAUC,UAAV,CAAqB,IAArB,EAA2BF,MAA3B;AAEA,SAAKG,eAAL,GAAuBH,MAAM,CAACG,eAA9B;AAEA,QAAMC,IAAI,GAAG,IAAb;AAEAN,IAAAA,QAAQ,CAACO,eAAT,CAAyB,aAAzB,EAAwCD,IAAxC;AAEAA,IAAAA,IAAI,CAACE,EAAL,CAAQ,OAAR,EAAiB,UAAUC,GAAV,EAAe;AAC9B,UAAIC,SAAS,GAAG,SAAhB;;AAEA,UAAIC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCL,GAAG,CAACM,OAAzC,EAAkD,MAAlD,CAAJ,EAA+D;AAC7DL,QAAAA,SAAS,GAAG,MAAZ;AACD;;AAED,UAAIC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCL,GAAG,CAACM,OAAzC,EAAkD,SAAlD,CAAJ,EAAkE;AAChEL,QAAAA,SAAS,GAAG,SAAZ;AACD;;AAED,cAAQA,SAAR;AACE,aAAK,MAAL;AACE,cAAID,GAAG,CAACM,OAAJ,CAAYC,IAAZ,CAAiBC,MAAjB,GAA0BX,IAAI,CAACD,eAAnC,EAAoD;AAClDL,YAAAA,QAAQ,CAACkB,qBAAT,CAA+BT,GAAG,CAACM,OAAJ,CAAYC,IAAZ,CAAiBC,MAAhD,EAAwDX,IAAxD;AACD,WAFD,MAEO;AACLN,YAAAA,QAAQ,CAACmB,yBAAT,CAAmC,QAAnC,EAA6CV,GAAG,CAACM,OAAjD,EAA0DT,IAA1D;AACD;;AACD;;AACF,aAAK,SAAL;AACE,cAAIG,GAAG,CAACM,OAAJ,CAAYE,MAAZ,IAAsBR,GAAG,CAACM,OAAJ,CAAYE,MAAZ,GAAqBX,IAAI,CAACD,eAApD,EAAqE;AACnEL,YAAAA,QAAQ,CAACkB,qBAAT,CAA+BT,GAAG,CAACM,OAAJ,CAAYE,MAA3C,EAAmDX,IAAnD;AACD,WAFD,MAEO;AACLN,YAAAA,QAAQ,CAACmB,yBAAT,CAAmC,QAAnC,EAA6CV,GAAG,CAACM,OAAjD,EAA0DT,IAA1D;AACD;;AACD;;AACF;AACEN,UAAAA,QAAQ,CAACmB,yBAAT,CAAmC,QAAnC,EAA6CC,IAAI,CAACC,SAAL,CAAeZ,GAAG,CAACM,OAAnB,CAA7C,EAA0ET,IAA1E;AAhBJ;AAkBD,KA7BD;AA+BAA,IAAAA,IAAI,CAACE,EAAL,CAAQ,OAAR,EAAiB,YAAY;AAC3BR,MAAAA,QAAQ,CAACO,eAAT,CAAyB,QAAzB,EAAmCD,IAAnC;AACD,KAFD;AAGD;;AAEDT,EAAAA,GAAG,CAACM,KAAJ,CAAUmB,YAAV,CAAuB,iBAAvB,EAA0CrB,cAA1C;AACD,CAnDD","sourcesContent":["/**\r\n Copyright (c) 2016,2017,2018,2019,2020,2021 Klaus Landsdorf (https://bianco-royal.space/)\r\n Copyright 2016 - Jason D. Harper, Argonne National Laboratory\r\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc.\r\n All rights reserved.\r\n node-red-contrib-modbus\r\n\r\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\r\n **/\r\n/**\r\n * Modbus Response node.\r\n * @module NodeRedModbusResponse\r\n *\r\n * @param RED\r\n */\r\nmodule.exports = function (RED) {\r\n  'use strict'\r\n  require('source-map-support').install()\r\n  const mbBasics = require('./modbus-basics')\r\n\r\n  function ModbusResponse (config) {\r\n    RED.nodes.createNode(this, config)\r\n\r\n    this.registerShowMax = config.registerShowMax\r\n\r\n    const node = this\r\n\r\n    mbBasics.setNodeStatusTo('initialized', node)\r\n\r\n    node.on('input', function (msg) {\r\n      let inputType = 'default'\r\n\r\n      if (Object.prototype.hasOwnProperty.call(msg.payload, 'data')) {\r\n        inputType = 'data'\r\n      }\r\n\r\n      if (Object.prototype.hasOwnProperty.call(msg.payload, 'address')) {\r\n        inputType = 'address'\r\n      }\r\n\r\n      switch (inputType) {\r\n        case 'data':\r\n          if (msg.payload.data.length > node.registerShowMax) {\r\n            mbBasics.setNodeStatusResponse(msg.payload.data.length, node)\r\n          } else {\r\n            mbBasics.setNodeStatusByResponseTo('active', msg.payload, node)\r\n          }\r\n          break\r\n        case 'address':\r\n          if (msg.payload.length && msg.payload.length > node.registerShowMax) {\r\n            mbBasics.setNodeStatusResponse(msg.payload.length, node)\r\n          } else {\r\n            mbBasics.setNodeStatusByResponseTo('active', msg.payload, node)\r\n          }\r\n          break\r\n        default:\r\n          mbBasics.setNodeStatusByResponseTo('active', JSON.stringify(msg.payload), node)\r\n      }\r\n    })\r\n\r\n    node.on('close', function () {\r\n      mbBasics.setNodeStatusTo('closed', node)\r\n    })\r\n  }\r\n\r\n  RED.nodes.registerType('modbus-response', ModbusResponse)\r\n}\r\n"],"file":"../modbus-response.js"}