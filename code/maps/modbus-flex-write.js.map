{"version":3,"sources":["modbus-flex-write.js"],"names":["module","exports","RED","require","install","mbBasics","mbCore","internalDebugLog","ModbusFlexWrite","config","nodes","createNode","name","showStatusActivities","showErrors","emptyMsgOnFail","keepMsgProperties","verboseLogging","settings","verbose","node","bufferMessageList","Map","setNodeStatusTo","modbusClient","getNode","server","registerForModbus","initModbusClientEvents","onModbusWriteDone","resp","msg","send","buildMessage","payload","emit","errorProtocolMsg","err","logMsgError","sendEmptyMsgOnFail","onModbusWriteError","message","origMsg","getOriginalMessage","setModbusError","prepareMsg","JSON","parse","fc","parseInt","unitid","address","quantity","isValidModbusMsg","isValid","Number","isInteger","error","setMsgPayloadFromHTTPRequests","Object","prototype","hasOwnProperty","call","value","indexOf","buildNewMessageObject","messageId","getObjectId","topic","id","on","invalidPayloadIn","client","origMsgInput","assign","inputMsg","httpMsg","newMsg","set","buildNewMessage","actualServiceState","done","clear","deregisterForModbus","setNodeDefaultStatus","registerType"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,OAAP,GAAiB,UAAUC,GAAV,EAAe;AAC9B;;AACAC,EAAAA,OAAO,CAAC,oBAAD,CAAP,CAA8BC,OAA9B;;AACA,MAAMC,QAAQ,GAAGF,OAAO,CAAC,iBAAD,CAAxB;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,oBAAD,CAAtB;;AACA,MAAMI,gBAAgB,GAAGJ,OAAO,CAAC,OAAD,CAAP,CAAiB,0BAAjB,CAAzB;;AAEA,WAASK,eAAT,CAA0BC,MAA1B,EAAkC;AAChCP,IAAAA,GAAG,CAACQ,KAAJ,CAAUC,UAAV,CAAqB,IAArB,EAA2BF,MAA3B;AAEA,SAAKG,IAAL,GAAYH,MAAM,CAACG,IAAnB;AACA,SAAKC,oBAAL,GAA4BJ,MAAM,CAACI,oBAAnC;AACA,SAAKC,UAAL,GAAkBL,MAAM,CAACK,UAAzB;AAEA,SAAKC,cAAL,GAAsBN,MAAM,CAACM,cAA7B;AACA,SAAKC,iBAAL,GAAyBP,MAAM,CAACO,iBAAhC;AACA,SAAKT,gBAAL,GAAwBA,gBAAxB;AACA,SAAKU,cAAL,GAAsBf,GAAG,CAACgB,QAAJ,CAAaC,OAAnC;AAEA,QAAMC,IAAI,GAAG,IAAb;AACAA,IAAAA,IAAI,CAACC,iBAAL,GAAyB,IAAIC,GAAJ,EAAzB;AACAjB,IAAAA,QAAQ,CAACkB,eAAT,CAAyB,SAAzB,EAAoCH,IAApC;AAEA,QAAMI,YAAY,GAAGtB,GAAG,CAACQ,KAAJ,CAAUe,OAAV,CAAkBhB,MAAM,CAACiB,MAAzB,CAArB;;AACA,QAAI,CAACF,YAAL,EAAmB;AACjB;AACD;;AACDA,IAAAA,YAAY,CAACG,iBAAb,CAA+BP,IAA/B;AACAf,IAAAA,QAAQ,CAACuB,sBAAT,CAAgCR,IAAhC,EAAsCI,YAAtC;;AAEAJ,IAAAA,IAAI,CAACS,iBAAL,GAAyB,UAAUC,IAAV,EAAgBC,GAAhB,EAAqB;AAC5C,UAAIX,IAAI,CAACP,oBAAT,EAA+B;AAC7BR,QAAAA,QAAQ,CAACkB,eAAT,CAAyB,cAAzB,EAAyCH,IAAzC;AACD;;AAEDA,MAAAA,IAAI,CAACY,IAAL,CAAU1B,MAAM,CAAC2B,YAAP,CAAoBb,IAAI,CAACC,iBAAzB,EAA4CU,GAAG,CAACG,OAAhD,EAAyDJ,IAAzD,EAA+DC,GAA/D,CAAV;AACAX,MAAAA,IAAI,CAACe,IAAL,CAAU,yBAAV;AACD,KAPD;;AASAf,IAAAA,IAAI,CAACgB,gBAAL,GAAwB,UAAUC,GAAV,EAAeN,GAAf,EAAoB;AAC1C1B,MAAAA,QAAQ,CAACiC,WAAT,CAAqBlB,IAArB,EAA2BiB,GAA3B,EAAgCN,GAAhC;AACA1B,MAAAA,QAAQ,CAACkC,kBAAT,CAA4BnB,IAA5B,EAAkCiB,GAAlC,EAAuCN,GAAvC;AACD,KAHD;;AAKAX,IAAAA,IAAI,CAACoB,kBAAL,GAA0B,UAAUH,GAAV,EAAeN,GAAf,EAAoB;AAC5CX,MAAAA,IAAI,CAACb,gBAAL,CAAsB8B,GAAG,CAACI,OAA1B;AACA,UAAMC,OAAO,GAAGpC,MAAM,CAACqC,kBAAP,CAA0BvB,IAAI,CAACC,iBAA/B,EAAkDU,GAAlD,CAAhB;AACAX,MAAAA,IAAI,CAACgB,gBAAL,CAAsBC,GAAtB,EAA2BK,OAA3B;AACArC,MAAAA,QAAQ,CAACuC,cAAT,CAAwBxB,IAAxB,EAA8BI,YAA9B,EAA4Ca,GAA5C,EAAiDK,OAAjD;AACAtB,MAAAA,IAAI,CAACe,IAAL,CAAU,0BAAV;AACD,KAND;;AAQAf,IAAAA,IAAI,CAACyB,UAAL,GAAkB,UAAUd,GAAV,EAAe;AAC/B,UAAI,OAAOA,GAAG,CAACG,OAAX,KAAuB,QAA3B,EAAqC;AACnCH,QAAAA,GAAG,CAACG,OAAJ,GAAcY,IAAI,CAACC,KAAL,CAAWhB,GAAG,CAACG,OAAf,CAAd;AACD;;AAEDH,MAAAA,GAAG,CAACG,OAAJ,CAAYc,EAAZ,GAAiBC,QAAQ,CAAClB,GAAG,CAACG,OAAJ,CAAYc,EAAb,CAAzB;AACAjB,MAAAA,GAAG,CAACG,OAAJ,CAAYgB,MAAZ,GAAqBD,QAAQ,CAAClB,GAAG,CAACG,OAAJ,CAAYgB,MAAb,CAA7B;AACAnB,MAAAA,GAAG,CAACG,OAAJ,CAAYiB,OAAZ,GAAsBF,QAAQ,CAAClB,GAAG,CAACG,OAAJ,CAAYiB,OAAb,CAA9B;AACApB,MAAAA,GAAG,CAACG,OAAJ,CAAYkB,QAAZ,GAAuBH,QAAQ,CAAClB,GAAG,CAACG,OAAJ,CAAYkB,QAAb,CAA/B;AACA,aAAOrB,GAAP;AACD,KAVD;;AAYAX,IAAAA,IAAI,CAACiC,gBAAL,GAAwB,UAAUtB,GAAV,EAAe;AACrC,UAAIuB,OAAO,GAAG,IAAd;;AAEA,UAAI,EAAEC,MAAM,CAACC,SAAP,CAAiBzB,GAAG,CAACG,OAAJ,CAAYc,EAA7B,MACGjB,GAAG,CAACG,OAAJ,CAAYc,EAAZ,KAAmB,CAAnB,IACCjB,GAAG,CAACG,OAAJ,CAAYc,EAAZ,KAAmB,CADpB,IAECjB,GAAG,CAACG,OAAJ,CAAYc,EAAZ,KAAmB,EAFpB,IAGCjB,GAAG,CAACG,OAAJ,CAAYc,EAAZ,KAAmB,EAJvB,CAAF,CAAJ,EAImC;AACjC5B,QAAAA,IAAI,CAACqC,KAAL,CAAW,cAAX,EAA2B1B,GAA3B;AACAuB,QAAAA,OAAO,IAAI,KAAX;AACD;;AAED,UAAIA,OAAO,IACL,EAAEC,MAAM,CAACC,SAAP,CAAiBzB,GAAG,CAACG,OAAJ,CAAYiB,OAA7B,KACApB,GAAG,CAACG,OAAJ,CAAYiB,OAAZ,IAAuB,CADvB,IAEApB,GAAG,CAACG,OAAJ,CAAYiB,OAAZ,IAAuB,KAFzB,CADN,EAGuC;AACrC/B,QAAAA,IAAI,CAACqC,KAAL,CAAW,mBAAX,EAAgC1B,GAAhC;AACAuB,QAAAA,OAAO,IAAI,KAAX;AACD;;AAED,UAAIA,OAAO,IACL,EAAEC,MAAM,CAACC,SAAP,CAAiBzB,GAAG,CAACG,OAAJ,CAAYkB,QAA7B,KACArB,GAAG,CAACG,OAAJ,CAAYkB,QAAZ,IAAwB,CADxB,IAEArB,GAAG,CAACG,OAAJ,CAAYkB,QAAZ,IAAwB,KAF1B,CADN,EAGwC;AACtChC,QAAAA,IAAI,CAACqC,KAAL,CAAW,oBAAX,EAAiC1B,GAAjC;AACAuB,QAAAA,OAAO,IAAI,KAAX;AACD;;AAED,aAAOA,OAAP;AACD,KA7BD;;AA+BAlC,IAAAA,IAAI,CAACsC,6BAAL,GAAqC,UAAU3B,GAAV,EAAe;AAClD;AACA,UAAI4B,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqC/B,GAAG,CAACG,OAAzC,EAAkD,OAAlD,KAA8D,OAAOH,GAAG,CAACG,OAAJ,CAAY6B,KAAnB,KAA6B,QAA/F,EAAyG;AACvG,YAAIhC,GAAG,CAACG,OAAJ,CAAY6B,KAAZ,KAAsB,MAAtB,IAAgChC,GAAG,CAACG,OAAJ,CAAY6B,KAAZ,KAAsB,OAA1D,EAAmE;AACjEhC,UAAAA,GAAG,CAACG,OAAJ,CAAY6B,KAAZ,GAAqBhC,GAAG,CAACG,OAAJ,CAAY6B,KAAZ,KAAsB,MAA3C;AACD,SAFD,MAEO;AACL,cAAIhC,GAAG,CAACG,OAAJ,CAAY6B,KAAZ,CAAkBC,OAAlB,CAA0B,GAA1B,IAAiC,CAAC,CAAtC,EAAyC;AACvCjC,YAAAA,GAAG,CAACG,OAAJ,CAAY6B,KAAZ,GAAoBjB,IAAI,CAACC,KAAL,CAAWhB,GAAG,CAACG,OAAJ,CAAY6B,KAAvB,CAApB;AACD;AACF;AACF;;AACD,aAAOhC,GAAP;AACD,KAZD;;AAcAX,IAAAA,IAAI,CAAC6C,qBAAL,GAA6B,UAAU7C,IAAV,EAAgBW,GAAhB,EAAqB;AAChD,UAAMmC,SAAS,GAAG5D,MAAM,CAAC6D,WAAP,EAAlB;AACA,aAAO;AACLC,QAAAA,KAAK,EAAErC,GAAG,CAACqC,KAAJ,IAAahD,IAAI,CAACiD,EADpB;AAELH,QAAAA,SAAS,EAATA,SAFK;AAGLhC,QAAAA,OAAO,EAAE;AACP6B,UAAAA,KAAK,EAAGJ,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqC/B,GAAG,CAACG,OAAzC,EAAkD,OAAlD,CAAD,GAA+DH,GAAG,CAACG,OAAJ,CAAY6B,KAA3E,GAAmFhC,GAAG,CAACG,OADvF;AAEPgB,UAAAA,MAAM,EAAEnB,GAAG,CAACG,OAAJ,CAAYgB,MAFb;AAGPF,UAAAA,EAAE,EAAEjB,GAAG,CAACG,OAAJ,CAAYc,EAHT;AAIPG,UAAAA,OAAO,EAAEpB,GAAG,CAACG,OAAJ,CAAYiB,OAJd;AAKPC,UAAAA,QAAQ,EAAErB,GAAG,CAACG,OAAJ,CAAYkB,QALf;AAMPc,UAAAA,SAAS,EAATA;AANO;AAHJ,OAAP;AAYD,KAdD;;AAgBA9C,IAAAA,IAAI,CAACkD,EAAL,CAAQ,OAAR,EAAiB,UAAUvC,GAAV,EAAe;AAC9B,UAAI1B,QAAQ,CAACkE,gBAAT,CAA0BxC,GAA1B,KAAkC,CAACP,YAAY,CAACgD,MAApD,EAA4D;AAC1D;AACD;;AAED,UAAMC,YAAY,GAAGd,MAAM,CAACe,MAAP,CAAc,EAAd,EAAkB3C,GAAlB,CAArB;;AACA,UAAI;AACF,YAAM4C,QAAQ,GAAGvD,IAAI,CAACyB,UAAL,CAAgB4B,YAAhB,CAAjB;;AACA,YAAIrD,IAAI,CAACiC,gBAAL,CAAsBsB,QAAtB,CAAJ,EAAqC;AACnC,cAAMC,OAAO,GAAGxD,IAAI,CAACsC,6BAAL,CAAmCiB,QAAnC,CAAhB;AACA,cAAME,MAAM,GAAGzD,IAAI,CAAC6C,qBAAL,CAA2B7C,IAA3B,EAAiCwD,OAAjC,CAAf;AACAxD,UAAAA,IAAI,CAACC,iBAAL,CAAuByD,GAAvB,CAA2BD,MAAM,CAACX,SAAlC,EAA6C7D,QAAQ,CAAC0E,eAAT,CAAyB3D,IAAI,CAACJ,iBAA9B,EAAiD4D,OAAjD,EAA0DC,MAA1D,CAA7C;AACArD,UAAAA,YAAY,CAACW,IAAb,CAAkB,aAAlB,EAAiC0C,MAAjC,EAAyCzD,IAAI,CAACS,iBAA9C,EAAiET,IAAI,CAACoB,kBAAtE;AACD;AACF,OARD,CAQE,OAAOH,GAAP,EAAY;AACZjB,QAAAA,IAAI,CAACgB,gBAAL,CAAsBC,GAAtB,EAA2BoC,YAA3B;AACD;;AAED,UAAIrD,IAAI,CAACP,oBAAT,EAA+B;AAC7BR,QAAAA,QAAQ,CAACkB,eAAT,CAAyBC,YAAY,CAACwD,kBAAtC,EAA0D5D,IAA1D;AACD;AACF,KArBD;AAuBAA,IAAAA,IAAI,CAACkD,EAAL,CAAQ,OAAR,EAAiB,UAAUW,IAAV,EAAgB;AAC/B5E,MAAAA,QAAQ,CAACkB,eAAT,CAAyB,QAAzB,EAAmCH,IAAnC;AACAA,MAAAA,IAAI,CAACC,iBAAL,CAAuB6D,KAAvB;AACA1D,MAAAA,YAAY,CAAC2D,mBAAb,CAAiC/D,IAAI,CAACiD,EAAtC,EAA0CY,IAA1C;AACD,KAJD;;AAMA,QAAI,CAAC7D,IAAI,CAACP,oBAAV,EAAgC;AAC9BR,MAAAA,QAAQ,CAAC+E,oBAAT,CAA8BhE,IAA9B;AACD;AACF;;AAEDlB,EAAAA,GAAG,CAACQ,KAAJ,CAAU2E,YAAV,CAAuB,mBAAvB,EAA4C7E,eAA5C;AACD,CAhKD","sourcesContent":["/**\r\n Copyright (c) 2016,2017,2018,2019,2020,2021 Klaus Landsdorf (https://bianco-royal.space/)\r\n All rights reserved.\r\n node-red-contrib-modbus - The BSD 3-Clause License\r\n\r\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\r\n **/\r\n/**\r\n * Modbus flexible Write node.\r\n * @module NodeRedModbusFlexWrite\r\n *\r\n * @param RED\r\n */\r\nmodule.exports = function (RED) {\r\n  'use strict'\r\n  require('source-map-support').install()\r\n  const mbBasics = require('./modbus-basics')\r\n  const mbCore = require('./core/modbus-core')\r\n  const internalDebugLog = require('debug')('contribModbus:flex:write')\r\n\r\n  function ModbusFlexWrite (config) {\r\n    RED.nodes.createNode(this, config)\r\n\r\n    this.name = config.name\r\n    this.showStatusActivities = config.showStatusActivities\r\n    this.showErrors = config.showErrors\r\n\r\n    this.emptyMsgOnFail = config.emptyMsgOnFail\r\n    this.keepMsgProperties = config.keepMsgProperties\r\n    this.internalDebugLog = internalDebugLog\r\n    this.verboseLogging = RED.settings.verbose\r\n\r\n    const node = this\r\n    node.bufferMessageList = new Map()\r\n    mbBasics.setNodeStatusTo('waiting', node)\r\n\r\n    const modbusClient = RED.nodes.getNode(config.server)\r\n    if (!modbusClient) {\r\n      return\r\n    }\r\n    modbusClient.registerForModbus(node)\r\n    mbBasics.initModbusClientEvents(node, modbusClient)\r\n\r\n    node.onModbusWriteDone = function (resp, msg) {\r\n      if (node.showStatusActivities) {\r\n        mbBasics.setNodeStatusTo('writing done', node)\r\n      }\r\n\r\n      node.send(mbCore.buildMessage(node.bufferMessageList, msg.payload, resp, msg))\r\n      node.emit('modbusFlexWriteNodeDone')\r\n    }\r\n\r\n    node.errorProtocolMsg = function (err, msg) {\r\n      mbBasics.logMsgError(node, err, msg)\r\n      mbBasics.sendEmptyMsgOnFail(node, err, msg)\r\n    }\r\n\r\n    node.onModbusWriteError = function (err, msg) {\r\n      node.internalDebugLog(err.message)\r\n      const origMsg = mbCore.getOriginalMessage(node.bufferMessageList, msg)\r\n      node.errorProtocolMsg(err, origMsg)\r\n      mbBasics.setModbusError(node, modbusClient, err, origMsg)\r\n      node.emit('modbusFlexWriteNodeError')\r\n    }\r\n\r\n    node.prepareMsg = function (msg) {\r\n      if (typeof msg.payload === 'string') {\r\n        msg.payload = JSON.parse(msg.payload)\r\n      }\r\n\r\n      msg.payload.fc = parseInt(msg.payload.fc)\r\n      msg.payload.unitid = parseInt(msg.payload.unitid)\r\n      msg.payload.address = parseInt(msg.payload.address)\r\n      msg.payload.quantity = parseInt(msg.payload.quantity)\r\n      return msg\r\n    }\r\n\r\n    node.isValidModbusMsg = function (msg) {\r\n      let isValid = true\r\n\r\n      if (!(Number.isInteger(msg.payload.fc) &&\r\n              (msg.payload.fc === 5 ||\r\n                msg.payload.fc === 6 ||\r\n                msg.payload.fc === 15 ||\r\n                msg.payload.fc === 16))) {\r\n        node.error('FC Not Valid', msg)\r\n        isValid &= false\r\n      }\r\n\r\n      if (isValid &&\r\n            !(Number.isInteger(msg.payload.address) &&\r\n              msg.payload.address >= 0 &&\r\n              msg.payload.address <= 65535)) {\r\n        node.error('Address Not Valid', msg)\r\n        isValid &= false\r\n      }\r\n\r\n      if (isValid &&\r\n            !(Number.isInteger(msg.payload.quantity) &&\r\n              msg.payload.quantity >= 1 &&\r\n              msg.payload.quantity <= 65535)) {\r\n        node.error('Quantity Not Valid', msg)\r\n        isValid &= false\r\n      }\r\n\r\n      return isValid\r\n    }\r\n\r\n    node.setMsgPayloadFromHTTPRequests = function (msg) {\r\n      /* HTTP requests for boolean and multiple data string [1,2,3,4,5] */\r\n      if (Object.prototype.hasOwnProperty.call(msg.payload, 'value') && typeof msg.payload.value === 'string') {\r\n        if (msg.payload.value === 'true' || msg.payload.value === 'false') {\r\n          msg.payload.value = (msg.payload.value === 'true')\r\n        } else {\r\n          if (msg.payload.value.indexOf(',') > -1) {\r\n            msg.payload.value = JSON.parse(msg.payload.value)\r\n          }\r\n        }\r\n      }\r\n      return msg\r\n    }\r\n\r\n    node.buildNewMessageObject = function (node, msg) {\r\n      const messageId = mbCore.getObjectId()\r\n      return {\r\n        topic: msg.topic || node.id,\r\n        messageId,\r\n        payload: {\r\n          value: (Object.prototype.hasOwnProperty.call(msg.payload, 'value')) ? msg.payload.value : msg.payload,\r\n          unitid: msg.payload.unitid,\r\n          fc: msg.payload.fc,\r\n          address: msg.payload.address,\r\n          quantity: msg.payload.quantity,\r\n          messageId\r\n        }\r\n      }\r\n    }\r\n\r\n    node.on('input', function (msg) {\r\n      if (mbBasics.invalidPayloadIn(msg) || !modbusClient.client) {\r\n        return\r\n      }\r\n\r\n      const origMsgInput = Object.assign({}, msg)\r\n      try {\r\n        const inputMsg = node.prepareMsg(origMsgInput)\r\n        if (node.isValidModbusMsg(inputMsg)) {\r\n          const httpMsg = node.setMsgPayloadFromHTTPRequests(inputMsg)\r\n          const newMsg = node.buildNewMessageObject(node, httpMsg)\r\n          node.bufferMessageList.set(newMsg.messageId, mbBasics.buildNewMessage(node.keepMsgProperties, httpMsg, newMsg))\r\n          modbusClient.emit('writeModbus', newMsg, node.onModbusWriteDone, node.onModbusWriteError)\r\n        }\r\n      } catch (err) {\r\n        node.errorProtocolMsg(err, origMsgInput)\r\n      }\r\n\r\n      if (node.showStatusActivities) {\r\n        mbBasics.setNodeStatusTo(modbusClient.actualServiceState, node)\r\n      }\r\n    })\r\n\r\n    node.on('close', function (done) {\r\n      mbBasics.setNodeStatusTo('closed', node)\r\n      node.bufferMessageList.clear()\r\n      modbusClient.deregisterForModbus(node.id, done)\r\n    })\r\n\r\n    if (!node.showStatusActivities) {\r\n      mbBasics.setNodeDefaultStatus(node)\r\n    }\r\n  }\r\n\r\n  RED.nodes.registerType('modbus-flex-write', ModbusFlexWrite)\r\n}\r\n"],"file":"../modbus-flex-write.js"}