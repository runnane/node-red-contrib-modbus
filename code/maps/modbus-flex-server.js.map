{"version":3,"sources":["modbus-flex-server.js"],"names":["module","exports","RED","require","install","ModbusRTU","coreServer","mbBasics","internalDebugLog","ModbusFlexServer","config","nodes","createNode","VM","VMScript","name","logEnabled","serverAddress","serverPort","parseInt","responseDelay","delayUnit","unitId","minAddress","splitAddress","showErrors","funcGetCoil","compile","funcGetDiscreteInput","funcGetInputRegister","funcGetHoldingRegister","funcSetCoil","funcSetRegister","verboseLogging","settings","verbose","node","bufferFactor","coilsBufferSize","registersBufferSize","coils","Buffer","alloc","registers","modbusServer","setNodeStatusTo","vector","vm","sandbox","run","startServer","ServerTCP","host","port","debug","unitID","err","error","payload","on","message","warn","close","_server","sock","JSON","stringify","address","remoteAddress","remotePort","showStatusActivities","setNodeDefaultStatus","msg","isValidMemoryMessage","writeToFlexServerMemory","disableMsgOutput","send","buildMessage","type","slice","registerType"],"mappings":"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","sourcesContent":["/**\r\n Copyright (c) 2017,2018,2019,2020,2021 Klaus Landsdorf (https://bianco-royal.space/)\r\n All rights reserved.\r\n node-red-contrib-modbus - The BSD 3-Clause License\r\n\r\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\r\n **/\r\n/**\r\n * Modbus Server node.\r\n * @module NodeRedModbusServer\r\n *\r\n * @param RED\r\n */\r\nmodule.exports = function (RED) {\r\n  'use strict'\r\n  require('source-map-support').install()\r\n  const ModbusRTU = require('modbus-serial')\r\n  const coreServer = require('./core/modbus-server-core')\r\n  const mbBasics = require('./modbus-basics')\r\n  const internalDebugLog = require('debug')('contribModbus:flex:server')\r\n\r\n  function ModbusFlexServer (config) {\r\n    RED.nodes.createNode(this, config)\r\n    const { VM, VMScript } = require('vm2')\r\n\r\n    this.name = config.name\r\n    this.logEnabled = config.logEnabled\r\n    this.serverAddress = config.serverAddress || '0.0.0.0'\r\n    this.serverPort = parseInt(config.serverPort)\r\n    this.responseDelay = parseInt(config.responseDelay)\r\n    this.delayUnit = config.delayUnit\r\n    this.unitId = parseInt(config.unitId) || 1\r\n    this.minAddress = parseInt(config.minAddress) || 0\r\n    this.splitAddress = parseInt(config.splitAddress) || 10000\r\n    this.showErrors = config.showErrors\r\n\r\n    this.funcGetCoil = new VMScript(config.funcGetCoil).compile()\r\n    this.funcGetDiscreteInput = new VMScript(config.funcGetDiscreteInput).compile()\r\n    this.funcGetInputRegister = new VMScript(config.funcGetInputRegister).compile()\r\n    this.funcGetHoldingRegister = new VMScript(config.funcGetHoldingRegister).compile()\r\n\r\n    this.funcSetCoil = new VMScript(config.funcSetCoil).compile()\r\n    this.funcSetRegister = new VMScript(config.funcSetRegister).compile()\r\n\r\n    this.internalDebugLog = internalDebugLog\r\n    this.verboseLogging = RED.settings.verbose\r\n\r\n    const node = this\r\n    node.bufferFactor = coreServer.bufferFactor\r\n\r\n    node.coilsBufferSize = parseInt(config.coilsBufferSize * coreServer.bufferFactor)\r\n    node.registersBufferSize = parseInt(config.registersBufferSize * coreServer.bufferFactor)\r\n\r\n    node.coils = Buffer.alloc(node.coilsBufferSize, 0)\r\n    node.registers = Buffer.alloc(node.registersBufferSize, 0)\r\n\r\n    node.modbusServer = null\r\n\r\n    mbBasics.setNodeStatusTo('initialized', node)\r\n\r\n    //     1...10000*  address - 1      Coils (outputs)    0   Read/Write\r\n    // 10001...20000*  address - 10001  Discrete Inputs    01  Read\r\n    // 30001...40000*  address - 30001  Input Registers    04  Read\r\n    // 40001...50000*  address - 40001  Holding Registers  03  Read/Write\r\n\r\n    node.vector = {}\r\n\r\n    const vm = new VM({\r\n      sandbox: { node }\r\n    })\r\n\r\n    vm.run('node.vector.getCoil = ' + config.funcGetCoil)\r\n    vm.run('node.vector.getDiscreteInput = ' + config.funcGetDiscreteInput)\r\n    vm.run('node.vector.getInputRegister = ' + config.funcGetInputRegister)\r\n    vm.run('node.vector.getHoldingRegister = ' + config.funcGetHoldingRegister)\r\n\r\n    vm.run('node.vector.setCoil = ' + config.funcSetCoil)\r\n    vm.run('node.vector.setRegister = ' + config.funcSetRegister)\r\n\r\n    node.startServer = function () {\r\n      try {\r\n        if (node.modbusServer === null) {\r\n          try {\r\n            node.modbusServer = new ModbusRTU.ServerTCP(node.vector, {\r\n              host: node.serverAddress,\r\n              port: node.serverPort,\r\n              debug: node.logEnabled,\r\n              unitID: node.unitId\r\n            })\r\n          } catch (err) {\r\n            node.error(err, { payload: 'server net error -> for port 502 on unix, you have to be a super user' })\r\n          }\r\n\r\n          node.modbusServer.on('socketError', function (err) {\r\n            internalDebugLog(err.message)\r\n            if (node.showErrors) {\r\n              node.warn(err)\r\n            }\r\n            mbBasics.setNodeStatusTo('error', node)\r\n\r\n            node.modbusServer.close(function () {\r\n              node.startServer()\r\n            })\r\n          })\r\n\r\n          node.modbusServer._server.on('connection', function (sock) {\r\n            internalDebugLog('Modbus Flex Server client connection')\r\n            if (sock) {\r\n              internalDebugLog('Modbus Flex Server client to ' + JSON.stringify(sock.address()) + ' from ' + sock.remoteAddress + ' ' + sock.remotePort)\r\n            }\r\n            mbBasics.setNodeStatusTo('active', node)\r\n          })\r\n        }\r\n\r\n        if (!node.showStatusActivities) {\r\n          mbBasics.setNodeDefaultStatus(node)\r\n        }\r\n      } catch (err) {\r\n        internalDebugLog(err.message)\r\n        if (node.showErrors) {\r\n          node.warn(err)\r\n        }\r\n        mbBasics.setNodeStatusTo('error', node)\r\n      }\r\n\r\n      if (node.modbusServer != null) {\r\n        internalDebugLog('Modbus Flex Server listening on modbus://' + node.serverAddress + ':' + node.serverPort)\r\n        mbBasics.setNodeStatusTo('initialized', node)\r\n      } else {\r\n        internalDebugLog('Modbus Flex Server isn\\'t ready')\r\n        mbBasics.setNodeStatusTo('error', node)\r\n      }\r\n    }\r\n\r\n    node.startServer()\r\n\r\n    node.on('input', function (msg) {\r\n      if (coreServer.isValidMemoryMessage(msg)) {\r\n        coreServer.writeToFlexServerMemory(node, msg)\r\n        if (msg.payload.disableMsgOutput !== 1) {\r\n          node.send(buildMessage(msg))\r\n        }\r\n      } else {\r\n        if (node.showErrors) {\r\n          node.error('Is Not A Valid Memory Write Message To Server', msg)\r\n        }\r\n        if (!msg.payload.disableMsgOutput) {\r\n          node.send(buildMessage(msg))\r\n        }\r\n      }\r\n    })\r\n\r\n    function buildMessage (msg) {\r\n      return [\r\n        { type: 'holding', message: msg, payload: node.registers.slice(node.splitAddress * coreServer.bufferFactor) },\r\n        { type: 'coils', message: msg, payload: node.coils.slice(0, node.splitAddress * coreServer.bufferFactor) },\r\n        { type: 'input', message: msg, payload: node.registers.slice(0, node.splitAddress * coreServer.bufferFactor) },\r\n        { type: 'discrete', message: msg, payload: node.coils.slice(node.splitAddress * coreServer.bufferFactor) },\r\n        { payload: 'request', type: 'message', message: msg }\r\n      ]\r\n    }\r\n\r\n    node.on('close', function () {\r\n      mbBasics.setNodeStatusTo('closed', node)\r\n      if (node.modbusServer._server) {\r\n        node.modbusServer._server.close()\r\n      }\r\n      if (node.modbusServer) {\r\n        node.modbusServer.close()\r\n      }\r\n      node.modbusServer = null\r\n    })\r\n  }\r\n\r\n  try {\r\n    RED.nodes.registerType('modbus-flex-server', ModbusFlexServer)\r\n  } catch (err) {\r\n    internalDebugLog(err.message)\r\n  }\r\n}\r\n"],"file":"../modbus-flex-server.js"}