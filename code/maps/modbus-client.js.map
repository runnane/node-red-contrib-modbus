{"version":3,"sources":["modbus-client.js"],"names":["module","exports","RED","require","install","mbBasics","coreModbusClient","coreModbusQueue","internalDebugLog","ModbusClientNode","config","nodes","createNode","ModbusRTU","unlimitedListeners","minCommandDelayMilliseconds","defaultUnitId","defaultTcpUnitId","serialConnectionDelayTimeMS","timeoutTimeMS","reconnectTimeMS","logHintText","serialAsciiResponseStartDelimiter","clienttype","parallelUnitIdsAllowed","undefined","bufferCommands","queueLogEnabled","stateLogEnabled","tcpHost","tcpPort","parseInt","tcpType","serialPort","serialBaudrate","serialDatabits","serialStopbits","serialParity","serialType","serialConnectionDelay","unit_id","commandDelay","clientTimeout","reconnectTimeout","reconnectOnTimeout","node","isFirstInitOfConnection","closingModbus","client","bufferCommandList","Map","sendingAllowed","unitSendingAllowed","messageAllowedStates","messagesAllowedStates","serverInfo","stateMachine","stateService","createStateMachineService","actualServiceState","initialState","actualServiceStateBefore","startStateService","reconnectTimeoutId","serialSendingAllowed","queueSerialLockCommand","setDefaultUnitId","setUnitIdFromPayload","msg","unitId","getActualUnitId","checkUnitId","setID","Number","isNaN","updateServerinfo","verboseWarn","logMessage","settings","verbose","warn","verboseLog","internalDebug","stateLog","queueLog","subscribe","state","value","matches","initQueue","setTimeout","connectClient","err","error","payload","emit","queueSerialUnlockCommand","checkQueuesAreEmpty","send","dequeueCommand","close","message","Error","connectC701","port","autoOpen","then","setTCPConnectionOptions","setTCPConnected","modbusTcpErrorHandling","connectTelnet","connectTcpRTUBuffered","connectTCP","serialPortOptions","baudRate","dataBits","stopBits","parity","startOfSlaveFrameChar","toString","connectAsciiSerial","setSerialConnectionOptions","modbusSerialErrorHandling","connectRTU","connectRTUBuffered","modbusSerialDebug","openSerialClient","modbusErrorHandling","JSON","stringify","errno","networkErrors","includes","showErrors","code","_port","on","onModbusClose","cb","cberr","indexOf","pushToQueueByUnitId","readModbus","info","queueLength","get","queueUnitId","length","writeModbus","activateSending","set","Promise","resolve","reject","setMaxListeners","invalidPayloadIn","setNewNodeSettings","done","nodeIdentifierName","name","id","removeAllListeners","isOpen","registeredNodeList","registerForModbus","clientUserNodeId","Object","keys","setStoppedState","closeConnectionWithoutRegisteredNodes","deregisterForModbus","registerType","httpAdmin","auth","needsPermission","req","res","SerialPort","list","ports","json"],"mappings":"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","sourcesContent":["/**\r\n Copyright (c) 2016,2017,2018,2019,2020,2021 Klaus Landsdorf (https://bianco-royal.space/)\r\n Copyright 2016 - Jason D. Harper, Argonne National Laboratory\r\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc.\r\n All rights reserved.\r\n node-red-contrib-modbus\r\n\r\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\r\n */\r\n/**\r\n * Modbus connection node.\r\n * @module NodeRedModbusClient\r\n *\r\n * @param RED\r\n */\r\nmodule.exports = function (RED) {\r\n  'use strict'\r\n  require('source-map-support').install()\r\n  const mbBasics = require('./modbus-basics')\r\n  const coreModbusClient = require('./core/modbus-client-core')\r\n  const coreModbusQueue = require('./core/modbus-queue-core')\r\n  const internalDebugLog = require('debug')('contribModbus:config:client')\r\n\r\n  function ModbusClientNode (config) {\r\n    RED.nodes.createNode(this, config)\r\n\r\n    // create an empty modbus client\r\n    const ModbusRTU = require('modbus-serial')\r\n\r\n    const unlimitedListeners = 0\r\n    const minCommandDelayMilliseconds = 1\r\n    const defaultUnitId = 1\r\n    const defaultTcpUnitId = 0\r\n    const serialConnectionDelayTimeMS = 500\r\n    const timeoutTimeMS = 1000\r\n    const reconnectTimeMS = 2000\r\n    const logHintText = ' Get More About It By Logging'\r\n    const serialAsciiResponseStartDelimiter = '0x3A'\r\n\r\n    this.clienttype = config.clienttype\r\n\r\n    if (config.parallelUnitIdsAllowed === undefined) {\r\n      this.bufferCommands = true\r\n    } else {\r\n      this.bufferCommands = config.bufferCommands\r\n    }\r\n\r\n    this.queueLogEnabled = config.queueLogEnabled\r\n    this.stateLogEnabled = config.stateLogEnabled\r\n\r\n    this.tcpHost = config.tcpHost\r\n    this.tcpPort = parseInt(config.tcpPort) || 502\r\n    this.tcpType = config.tcpType\r\n\r\n    this.serialPort = config.serialPort\r\n    this.serialBaudrate = config.serialBaudrate\r\n    this.serialDatabits = config.serialDatabits\r\n    this.serialStopbits = config.serialStopbits\r\n    this.serialParity = config.serialParity\r\n    this.serialType = config.serialType\r\n    this.serialConnectionDelay = parseInt(config.serialConnectionDelay) || serialConnectionDelayTimeMS\r\n    this.serialAsciiResponseStartDelimiter = config.serialAsciiResponseStartDelimiter || serialAsciiResponseStartDelimiter\r\n\r\n    this.unit_id = parseInt(config.unit_id)\r\n    this.commandDelay = parseInt(config.commandDelay) || minCommandDelayMilliseconds\r\n    this.clientTimeout = parseInt(config.clientTimeout) || timeoutTimeMS\r\n    this.reconnectTimeout = parseInt(config.reconnectTimeout) || reconnectTimeMS\r\n    this.reconnectOnTimeout = config.reconnectOnTimeout\r\n\r\n    if (config.parallelUnitIdsAllowed === undefined) {\r\n      this.parallelUnitIdsAllowed = true\r\n    } else {\r\n      this.parallelUnitIdsAllowed = config.parallelUnitIdsAllowed\r\n    }\r\n\r\n    const node = this\r\n    node.isFirstInitOfConnection = true\r\n    node.closingModbus = false\r\n    node.client = null\r\n    node.bufferCommandList = new Map()\r\n    node.sendingAllowed = new Map()\r\n    node.unitSendingAllowed = []\r\n    node.messageAllowedStates = coreModbusClient.messagesAllowedStates\r\n    node.serverInfo = ''\r\n\r\n    node.stateMachine = null\r\n    node.stateService = null\r\n    node.stateMachine = coreModbusClient.createStateMachineService()\r\n    node.actualServiceState = node.stateMachine.initialState\r\n    node.actualServiceStateBefore = node.actualServiceState\r\n    node.stateService = coreModbusClient.startStateService(node.stateMachine)\r\n    node.reconnectTimeoutId = 0\r\n    node.serialSendingAllowed = false\r\n    node.internalDebugLog = internalDebugLog\r\n\r\n    coreModbusQueue.queueSerialLockCommand(node)\r\n\r\n    node.setDefaultUnitId = function () {\r\n      if (this.clienttype === 'tcp') {\r\n        node.unit_id = defaultTcpUnitId\r\n      } else {\r\n        node.unit_id = defaultUnitId\r\n      }\r\n    }\r\n\r\n    node.setUnitIdFromPayload = function (msg) {\r\n      const unitId = coreModbusClient.getActualUnitId(node, msg)\r\n      if (!coreModbusClient.checkUnitId(unitId, node.clienttype)) {\r\n        node.setDefaultUnitId()\r\n      }\r\n      node.client.setID(unitId)\r\n      msg.unitId = unitId\r\n    }\r\n\r\n    if (Number.isNaN(node.unit_id) || !coreModbusClient.checkUnitId(node.unit_id, node.clienttype)) {\r\n      node.setDefaultUnitId()\r\n    }\r\n\r\n    node.updateServerinfo = function () {\r\n      if (node.clienttype === 'tcp') {\r\n        node.serverInfo = ' TCP@' + node.tcpHost + ':' + node.tcpPort\r\n      } else {\r\n        node.serverInfo = ' Serial@' + node.serialPort + ':' + node.serialBaudrate + 'bit/s'\r\n      }\r\n      node.serverInfo += ' default Unit-Id: ' + node.unit_id\r\n    }\r\n\r\n    function verboseWarn (logMessage) {\r\n      if (RED.settings.verbose) {\r\n        node.warn('Client -> ' + logMessage + node.serverInfo)\r\n      }\r\n    }\r\n\r\n    function verboseLog (logMessage) {\r\n      if (RED.settings.verbose) {\r\n        coreModbusClient.internalDebug('Client -> ' + logMessage + node.serverInfo)\r\n      }\r\n    }\r\n\r\n    function stateLog (logMessage) {\r\n      if (node.stateLogEnabled) {\r\n        verboseLog(logMessage)\r\n      }\r\n    }\r\n\r\n    node.queueLog = function (logMessage) {\r\n      if (node.bufferCommands && node.queueLogEnabled) {\r\n        verboseLog(logMessage)\r\n      }\r\n    }\r\n\r\n    node.stateService.subscribe(state => {\r\n      node.actualServiceStateBefore = node.actualServiceState\r\n      node.actualServiceState = state\r\n      stateLog(state.value)\r\n\r\n      if (!state.value || node.actualServiceState.value === undefined) {\r\n        // verboseWarn('fsm ignore invalid state')\r\n        return\r\n      }\r\n\r\n      if (node.actualServiceStateBefore.value === node.actualServiceState.value) {\r\n        // verboseWarn('fsm ignore equal state ' + node.actualServiceState.value + ' after ' + node.actualServiceStateBefore.value)\r\n        return\r\n      }\r\n\r\n      if (state.matches('init')) {\r\n        verboseWarn('fsm init state after ' + node.actualServiceStateBefore.value)\r\n        node.updateServerinfo()\r\n        coreModbusQueue.initQueue(node)\r\n        node.reconnectTimeoutId = 0\r\n\r\n        try {\r\n          if (node.isFirstInitOfConnection) {\r\n            node.isFirstInitOfConnection = false\r\n            verboseWarn('first fsm init in ' + serialConnectionDelayTimeMS + ' ms')\r\n            setTimeout(node.connectClient, serialConnectionDelayTimeMS)\r\n          } else {\r\n            verboseWarn('fsm init in ' + node.reconnectTimeout + ' ms')\r\n            setTimeout(node.connectClient, node.reconnectTimeout)\r\n          }\r\n        } catch (err) {\r\n          node.error(err, { payload: 'client connection error ' + logHintText })\r\n        }\r\n\r\n        node.emit('mbinit')\r\n      }\r\n\r\n      if (state.matches('connected')) {\r\n        verboseWarn('fsm connected after state ' + node.actualServiceStateBefore.value + logHintText)\r\n        coreModbusQueue.queueSerialUnlockCommand(node)\r\n        node.emit('mbconnected')\r\n      }\r\n\r\n      if (state.matches('activated')) {\r\n        node.emit('mbactive')\r\n        if (node.bufferCommands && !coreModbusQueue.checkQueuesAreEmpty(node)) {\r\n          node.stateService.send('QUEUE')\r\n        }\r\n      }\r\n\r\n      if (state.matches('queueing')) {\r\n        if (node.clienttype === 'tcp') {\r\n          node.stateService.send('SEND')\r\n        } else {\r\n          if (node.serialSendingAllowed) {\r\n            coreModbusQueue.queueSerialLockCommand(node)\r\n            node.stateService.send('SEND')\r\n          }\r\n        }\r\n      }\r\n\r\n      if (state.matches('sending')) {\r\n        setTimeout(() => {\r\n          coreModbusQueue.dequeueCommand(node)\r\n        }, node.commandDelay)\r\n        node.emit('mbqueue')\r\n      }\r\n\r\n      if (state.matches('opened')) {\r\n        coreModbusQueue.queueSerialUnlockCommand(node)\r\n        node.emit('mbopen')\r\n      }\r\n\r\n      if (state.matches('switch')) {\r\n        node.emit('mbswitch')\r\n        node.stateService.send('CLOSE')\r\n      }\r\n\r\n      if (state.matches('closed')) {\r\n        node.emit('mbclosed')\r\n        node.stateService.send('RECONNECT')\r\n      }\r\n\r\n      if (state.matches('stopped')) {\r\n        verboseWarn('stopped state without reconnecting')\r\n        node.emit('mbclosed')\r\n      }\r\n\r\n      if (state.matches('failed')) {\r\n        verboseWarn('fsm failed state after ' + node.actualServiceStateBefore.value + logHintText)\r\n        node.emit('mberror', 'Modbus Failure On State ' + node.actualServiceStateBefore.value + logHintText)\r\n        node.stateService.send('BREAK')\r\n      }\r\n\r\n      if (state.matches('broken')) {\r\n        verboseWarn('fsm broken state after ' + node.actualServiceStateBefore.value + logHintText)\r\n        node.emit('mbbroken', 'Modbus Broken On State ' + node.actualServiceStateBefore.value + logHintText)\r\n        if (node.reconnectOnTimeout) {\r\n          node.stateService.send('RECONNECT')\r\n        } else {\r\n          node.stateService.send('ACTIVATE')\r\n        }\r\n      }\r\n\r\n      if (state.matches('reconnecting')) {\r\n        verboseWarn('fsm reconnect state after ' + node.actualServiceStateBefore.value + logHintText)\r\n        coreModbusQueue.queueSerialLockCommand(node)\r\n        node.emit('mbreconnecting')\r\n        if (node.reconnectTimeout <= 0) {\r\n          node.reconnectTimeout = reconnectTimeMS\r\n        }\r\n        setTimeout(() => {\r\n          node.reconnectTimeoutId = 0\r\n          node.stateService.send('INIT')\r\n        }, node.reconnectTimeout)\r\n      }\r\n    })\r\n\r\n    node.connectClient = function () {\r\n      if (node.client) {\r\n        try {\r\n          node.client.close(function () {\r\n            verboseLog('connection closed')\r\n          })\r\n          verboseLog('connection close sent')\r\n        } catch (err) {\r\n          verboseLog(err.message)\r\n        }\r\n      }\r\n      node.client = null\r\n      node.client = new ModbusRTU()\r\n\r\n      if (!node.clientTimeout) {\r\n        node.clientTimeout = timeoutTimeMS\r\n      }\r\n\r\n      if (!node.reconnectTimeout) {\r\n        node.reconnectTimeout = reconnectTimeMS\r\n      }\r\n\r\n      if (node.clienttype === 'tcp') {\r\n        if (!coreModbusClient.checkUnitId(node.unit_id, node.clienttype)) {\r\n          node.error(new Error('wrong unit-id (0..255)'), { payload: node.unit_id })\r\n          node.stateService.send('FAILURE')\r\n          return\r\n        }\r\n\r\n        switch (node.tcpType) {\r\n          case 'C701':\r\n            verboseLog('C701 port UDP bridge')\r\n            node.client.connectC701(node.tcpHost, {\r\n              port: node.tcpPort,\r\n              autoOpen: true\r\n            }).then(node.setTCPConnectionOptions)\r\n              .then(node.setTCPConnected)\r\n              .catch(node.modbusTcpErrorHandling)\r\n            break\r\n          case 'TELNET':\r\n            verboseLog('Telnet port')\r\n            node.client.connectTelnet(node.tcpHost, {\r\n              port: node.tcpPort,\r\n              autoOpen: true\r\n            }).then(node.setTCPConnectionOptions)\r\n              .catch(node.modbusTcpErrorHandling)\r\n            break\r\n          case 'TCP-RTU-BUFFERED':\r\n            verboseLog('TCP RTU buffered port')\r\n            node.client.connectTcpRTUBuffered(node.tcpHost, {\r\n              port: node.tcpPort,\r\n              autoOpen: true\r\n            }).then(node.setTCPConnectionOptions)\r\n              .catch(node.modbusTcpErrorHandling)\r\n            break\r\n          default:\r\n            verboseLog('TCP port')\r\n            node.client.connectTCP(node.tcpHost, {\r\n              port: node.tcpPort,\r\n              autoOpen: true\r\n            }).then(node.setTCPConnectionOptions)\r\n              .catch(node.modbusTcpErrorHandling)\r\n        }\r\n      } else {\r\n        if (!coreModbusClient.checkUnitId(node.unit_id, node.clienttype)) {\r\n          node.error(new Error('wrong unit-id serial (0..247)'), { payload: node.unit_id })\r\n          node.stateService.send('FAILURE')\r\n          return\r\n        }\r\n\r\n        if (!node.serialConnectionDelay) {\r\n          node.serialConnectionDelay = serialConnectionDelayTimeMS\r\n        }\r\n\r\n        if (!node.serialPort) {\r\n          node.error(new Error('wrong serial port'), { payload: node.serialPort })\r\n          node.stateService.send('FAILURE')\r\n          return\r\n        }\r\n\r\n        const serialPortOptions = {\r\n          baudRate: parseInt(node.serialBaudrate),\r\n          dataBits: parseInt(node.serialDatabits),\r\n          stopBits: parseInt(node.serialStopbits),\r\n          parity: node.serialParity,\r\n          autoOpen: false\r\n        }\r\n\r\n        switch (node.serialType) {\r\n          case 'ASCII':\r\n            verboseLog('ASCII port serial')\r\n            // Make sure is parsed when string, otherwise just assign.\r\n            if (node.serialAsciiResponseStartDelimiter && typeof node.serialAsciiResponseStartDelimiter === 'string') {\r\n              serialPortOptions.startOfSlaveFrameChar = parseInt(node.serialAsciiResponseStartDelimiter, 16)\r\n            } else {\r\n              serialPortOptions.startOfSlaveFrameChar = node.serialAsciiResponseStartDelimiter\r\n            }\r\n            verboseLog('Using response delimiter: 0x' + serialPortOptions.startOfSlaveFrameChar.toString(16))\r\n\r\n            node.client.connectAsciiSerial(node.serialPort, serialPortOptions).then(node.setSerialConnectionOptions)\r\n              .catch(node.modbusSerialErrorHandling)\r\n            break\r\n          case 'RTU':\r\n            verboseLog('RTU port serial')\r\n            node.client.connectRTU(node.serialPort, serialPortOptions).then(node.setSerialConnectionOptions)\r\n              .catch(node.modbusSerialErrorHandling)\r\n            break\r\n          default:\r\n            verboseLog('RTU buffered port serial')\r\n            node.client.connectRTUBuffered(node.serialPort, serialPortOptions).then(node.setSerialConnectionOptions)\r\n              .catch(node.modbusSerialErrorHandling)\r\n            break\r\n        }\r\n      }\r\n    }\r\n\r\n    node.setTCPConnectionOptions = function () {\r\n      node.client.setID(node.unit_id)\r\n      node.client.setTimeout(node.clientTimeout)\r\n      node.stateService.send('CONNECT')\r\n    }\r\n\r\n    node.setTCPConnected = function () {\r\n      coreModbusClient.modbusSerialDebug('modbus tcp connected on ' + node.tcpHost)\r\n    }\r\n\r\n    node.setSerialConnectionOptions = function () {\r\n      node.stateService.send('OPENSERIAL')\r\n      setTimeout(node.openSerialClient, parseInt(node.serialConnectionDelay))\r\n    }\r\n\r\n    node.modbusErrorHandling = function (err) {\r\n      coreModbusQueue.queueSerialUnlockCommand(node)\r\n      if (err.message) {\r\n        coreModbusClient.modbusSerialDebug('modbusErrorHandling:' + err.message)\r\n      } else {\r\n        coreModbusClient.modbusSerialDebug('modbusErrorHandling:' + JSON.stringify(err))\r\n      }\r\n      if (err.errno && coreModbusClient.networkErrors.includes(err.errno)) {\r\n        node.stateService.send('FAILURE')\r\n      }\r\n    }\r\n\r\n    node.modbusTcpErrorHandling = function (err) {\r\n      coreModbusQueue.queueSerialUnlockCommand(node)\r\n      if (node.showErrors) {\r\n        node.error(err)\r\n      }\r\n\r\n      if (err.message) {\r\n        coreModbusClient.modbusSerialDebug('modbusTcpErrorHandling:' + err.message)\r\n      } else {\r\n        coreModbusClient.modbusSerialDebug('modbusTcpErrorHandling:' + JSON.stringify(err))\r\n      }\r\n\r\n      if ((err.errno && coreModbusClient.networkErrors.includes(err.errno)) ||\r\n      (err.code && coreModbusClient.networkErrors.includes(err.code))) {\r\n        node.stateService.send('BREAK')\r\n      }\r\n    }\r\n\r\n    node.modbusSerialErrorHandling = function (err) {\r\n      coreModbusQueue.queueSerialUnlockCommand(node)\r\n      if (node.showErrors) {\r\n        node.error(err)\r\n      }\r\n\r\n      if (err.message) {\r\n        coreModbusClient.modbusSerialDebug('modbusSerialErrorHandling:' + err.message)\r\n      } else {\r\n        coreModbusClient.modbusSerialDebug('modbusSerialErrorHandling:' + JSON.stringify(err))\r\n      }\r\n      node.stateService.send('BREAK')\r\n    }\r\n\r\n    node.openSerialClient = function () {\r\n      // some delay for windows\r\n      if (node.actualServiceState.value === 'opened') {\r\n        verboseLog('time to open Unit ' + node.unit_id)\r\n        coreModbusClient.modbusSerialDebug('modbus connection opened')\r\n        node.client.setID(node.unit_id)\r\n        node.client.setTimeout(parseInt(node.clientTimeout))\r\n        node.client._port.on('close', node.onModbusClose)\r\n        node.stateService.send('CONNECT')\r\n      } else {\r\n        verboseLog('wrong state on connect serial ' + node.actualServiceState.value)\r\n        coreModbusClient.modbusSerialDebug('modbus connection not opened state is %s', node.actualServiceState.value)\r\n        node.stateService.send('BREAK')\r\n      }\r\n    }\r\n\r\n    node.onModbusClose = function () {\r\n      coreModbusQueue.queueSerialUnlockCommand(node)\r\n      verboseWarn('Modbus closed port')\r\n      coreModbusClient.modbusSerialDebug('modbus closed port')\r\n      node.stateService.send('CLOSE')\r\n    }\r\n\r\n    node.on('readModbus', function (msg, cb, cberr) {\r\n      const state = node.actualServiceState\r\n\r\n      if (node.messageAllowedStates.indexOf(state.value) === -1) {\r\n        cberr(new Error('Client Not Ready To Read At State ' + state.value), msg)\r\n      } else {\r\n        if (node.bufferCommands) {\r\n          coreModbusQueue.pushToQueueByUnitId(node, coreModbusClient.readModbus, msg, cb, cberr).then(function () {\r\n            node.queueLog(JSON.stringify({\r\n              info: 'queued read msg',\r\n              message: msg.payload,\r\n              state: state.value,\r\n              queueLength: node.bufferCommandList.get(msg.queueUnitId).length\r\n            }))\r\n          }).catch(function (err) {\r\n            cberr(err, msg)\r\n          }).finally(function () {\r\n            node.stateService.send('QUEUE')\r\n          })\r\n        } else {\r\n          coreModbusClient.readModbus(node, msg, cb, cberr)\r\n        }\r\n      }\r\n    })\r\n\r\n    node.on('writeModbus', function (msg, cb, cberr) {\r\n      const state = node.actualServiceState\r\n\r\n      if (node.messageAllowedStates.indexOf(state.value) === -1) {\r\n        cberr(new Error('Client Not Ready To Write At State ' + state.value), msg)\r\n      } else {\r\n        if (node.bufferCommands) {\r\n          coreModbusQueue.pushToQueueByUnitId(node, coreModbusClient.writeModbus, msg, cb, cberr).then(function () {\r\n            node.queueLog(JSON.stringify({\r\n              info: 'queued write msg',\r\n              message: msg.payload,\r\n              state: state.value,\r\n              queueLength: node.bufferCommandList.get(msg.queueUnitId).length\r\n            }))\r\n          }).catch(function (err) {\r\n            cberr(err, msg)\r\n          }).finally(function () {\r\n            node.stateService.send('QUEUE')\r\n          })\r\n        } else {\r\n          coreModbusClient.writeModbus(node, msg, cb, cberr)\r\n        }\r\n      }\r\n    })\r\n\r\n    node.activateSending = function (msg) {\r\n      node.sendingAllowed.set(msg.queueUnitId, true)\r\n      coreModbusQueue.queueSerialUnlockCommand(node)\r\n\r\n      return new Promise(\r\n        function (resolve, reject) {\r\n          try {\r\n            if (node.bufferCommands) {\r\n              node.queueLog(JSON.stringify({\r\n                info: 'queue response activate sending',\r\n                queueLength: node.bufferCommandList.length,\r\n                sendingAllowed: node.sendingAllowed.get(msg.queueUnitId),\r\n                serialSendingAllowed: node.serialSendingAllowed,\r\n                queueUnitId: msg.queueUnitId\r\n              }))\r\n\r\n              if (coreModbusQueue.checkQueuesAreEmpty(node)) {\r\n                node.stateService.send('EMPTY')\r\n              }\r\n            }\r\n            resolve()\r\n          } catch (err) {\r\n            reject(err)\r\n          }\r\n        })\r\n    }\r\n\r\n    verboseLog('initialized')\r\n    node.setMaxListeners(unlimitedListeners)\r\n\r\n    node.on('reconnect', function () {\r\n      node.stateService.send('CLOSE')\r\n    })\r\n\r\n    node.on('dynamicReconnect', function (msg, cb, cberr) {\r\n      if (mbBasics.invalidPayloadIn(msg)) {\r\n        throw new Error('Message Or Payload Not Valid')\r\n      }\r\n\r\n      coreModbusClient.internalDebug('Dynamic Reconnect Parameters ' + JSON.stringify(msg.payload))\r\n      if (coreModbusClient.setNewNodeSettings(node, msg)) {\r\n        cb(msg)\r\n      } else {\r\n        cberr(new Error('Message Or Payload Not Valid'), msg)\r\n      }\r\n      coreModbusClient.internalDebug('Dynamic Reconnect Starts on actual state ' + node.actualServiceState.value)\r\n      node.stateService.send('SWITCH')\r\n    })\r\n\r\n    node.on('close', function (done) {\r\n      const nodeIdentifierName = node.name || node.id\r\n      node.closingModbus = true\r\n      verboseLog('stop fsm on close ' + nodeIdentifierName)\r\n      node.stateService.send('STOP')\r\n      verboseLog('close node ' + nodeIdentifierName)\r\n      node.internalDebugLog('close node ' + nodeIdentifierName)\r\n      node.removeAllListeners()\r\n      if (node.client) {\r\n        if (node.client.isOpen) {\r\n          node.client.close(function (err) {\r\n            if (err) {\r\n              verboseLog('Connection closed with error ' + nodeIdentifierName)\r\n            } else {\r\n              verboseLog('Connection closed well ' + nodeIdentifierName)\r\n            }\r\n            done()\r\n          })\r\n        } else {\r\n          verboseLog('connection was closed ' + nodeIdentifierName)\r\n          done()\r\n        }\r\n      } else {\r\n        verboseLog('Connection closed simple ' + nodeIdentifierName)\r\n        done()\r\n      }\r\n    })\r\n\r\n    // handle using as config node\r\n    node.registeredNodeList = {}\r\n\r\n    node.registerForModbus = function (clientUserNodeId) {\r\n      node.registeredNodeList[clientUserNodeId] = clientUserNodeId\r\n      if (Object.keys(node.registeredNodeList).length === 1) {\r\n        node.closingModbus = false\r\n        node.stateService.send('NEW')\r\n        node.stateService.send('INIT')\r\n      }\r\n      node.emit('mbregister', clientUserNodeId)\r\n    }\r\n\r\n    node.setStoppedState = function (clientUserNodeId, done) {\r\n      node.stateService.send('STOP')\r\n      node.emit('mbderegister', clientUserNodeId)\r\n      done()\r\n    }\r\n\r\n    node.closeConnectionWithoutRegisteredNodes = function (clientUserNodeId, done) {\r\n      if (Object.keys(node.registeredNodeList).length === 0) {\r\n        node.closingModbus = true\r\n        if (node.client && node.actualServiceState.value !== 'stopped') {\r\n          if (node.client.isOpen) {\r\n            node.client.close(function () {\r\n              node.setStoppedState(clientUserNodeId, done)\r\n            })\r\n          } else {\r\n            node.setStoppedState(clientUserNodeId, done)\r\n          }\r\n        } else {\r\n          node.setStoppedState(clientUserNodeId, done)\r\n        }\r\n      } else {\r\n        node.setStoppedState(clientUserNodeId, done)\r\n      }\r\n    }\r\n\r\n    node.deregisterForModbus = function (clientUserNodeId, done) {\r\n      try {\r\n        delete node.registeredNodeList[clientUserNodeId]\r\n        if (node.closingModbus) {\r\n          done()\r\n          node.emit('mbderegister', clientUserNodeId)\r\n        } else {\r\n          node.closeConnectionWithoutRegisteredNodes(clientUserNodeId, done)\r\n        }\r\n      } catch (err) {\r\n        verboseWarn(err.message + ' on de-register node ' + clientUserNodeId)\r\n        node.error(err)\r\n        done()\r\n      }\r\n    }\r\n  }\r\n\r\n  RED.nodes.registerType('modbus-client', ModbusClientNode)\r\n\r\n  RED.httpAdmin.get('/modbus/serial/ports', RED.auth.needsPermission('serial.read'), function (req, res) {\r\n    const SerialPort = require('serialport')\r\n    SerialPort.list().then(ports => {\r\n      res.json(ports)\r\n    }).catch(err => {\r\n      res.json([err.message])\r\n      coreModbusClient.internalDebug(err.message)\r\n    })\r\n  })\r\n}\r\n"],"file":"../modbus-client.js"}