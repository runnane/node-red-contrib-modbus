{"version":3,"sources":["modbus-response-filter.js"],"names":["module","exports","RED","require","install","mbCore","mbBasics","modbusIOFileValuNames","ModbusResponseFilter","config","nodes","createNode","name","filter","registers","parseInt","filterResponseBuffer","filterValues","filterInput","showStatusActivities","showErrors","ioFile","getNode","node","configData","setNodeStatusTo","on","filterFromPayload","msg","payload","item","responseBuffer","values","input","invalidPayloadIn","length","error","Error","internalDebug","send","registerType","httpAdmin","get","auth","needsPermission","req","res","json"],"mappings":"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","sourcesContent":["/**\r\n Copyright (c) 2017,2018,2019,2020,2021 Klaus Landsdorf (https://bianco-royal.space/)\r\n All rights reserved.\r\n node-red-contrib-modbus - The BSD 3-Clause License\r\n\r\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\r\n */\r\n/**\r\n * Modbus flexible Getter node.\r\n * @module NodeRedModbusFlexGetter\r\n *\r\n * @param RED\r\n */\r\nmodule.exports = function (RED) {\r\n  'use strict'\r\n  require('source-map-support').install()\r\n  const mbCore = require('./core/modbus-core')\r\n  const mbBasics = require('./modbus-basics')\r\n  let modbusIOFileValuNames = []\r\n\r\n  function ModbusResponseFilter (config) {\r\n    RED.nodes.createNode(this, config)\r\n\r\n    this.name = config.name\r\n    this.filter = config.filter\r\n    this.registers = parseInt(config.registers) || null\r\n\r\n    this.filterResponseBuffer = config.filterResponseBuffer\r\n    this.filterValues = config.filterValues\r\n    this.filterInput = config.filterInput\r\n\r\n    this.showStatusActivities = config.showStatusActivities\r\n    this.showErrors = config.showErrors\r\n\r\n    this.ioFile = RED.nodes.getNode(config.ioFile)\r\n\r\n    const node = this\r\n\r\n    modbusIOFileValuNames = node.ioFile.configData\r\n\r\n    mbBasics.setNodeStatusTo('active', node)\r\n\r\n    node.ioFile.on('updatedConfig', function (configData) {\r\n      modbusIOFileValuNames = configData\r\n    })\r\n\r\n    node.filterFromPayload = function (msg) {\r\n      msg.payload = msg.payload.filter((item) => {\r\n        return item.name === node.filter\r\n      })\r\n\r\n      if (node.filterResponseBuffer) {\r\n        delete msg.responseBuffer\r\n      }\r\n\r\n      if (node.filterValues) {\r\n        delete msg.values\r\n      }\r\n\r\n      if (node.filterInput) {\r\n        delete msg.input\r\n      }\r\n\r\n      return msg\r\n    }\r\n\r\n    node.on('input', function (msg) {\r\n      if (mbBasics.invalidPayloadIn(msg)) {\r\n        return\r\n      }\r\n\r\n      if (node.registers && node.registers > 0) {\r\n        if (!msg.payload.length || msg.payload.length !== node.registers) {\r\n          if (node.showErrors) {\r\n            node.error(new Error(msg.payload.length + ' does not match ' + node.registers))\r\n          }\r\n          mbCore.internalDebug(msg.payload.length + ' Registers And Filter Length Of ' + node.registers + ' Does Not Match')\r\n        } else {\r\n          node.send(node.filterFromPayload(msg))\r\n        }\r\n      } else {\r\n        // without register safety\r\n        node.send(node.filterFromPayload(msg))\r\n      }\r\n    })\r\n\r\n    node.on('close', function () {\r\n      mbBasics.setNodeStatusTo('closed', node)\r\n    })\r\n  }\r\n\r\n  RED.nodes.registerType('modbus-response-filter', ModbusResponseFilter)\r\n\r\n  RED.httpAdmin.get('/modbus/iofile/valuenames', RED.auth.needsPermission('iofile.read'), function (req, res) {\r\n    res.json(modbusIOFileValuNames)\r\n  })\r\n}\r\n"],"file":"../modbus-response-filter.js"}