{"version":3,"sources":["modbus-write.js"],"names":["module","exports","RED","require","install","mbBasics","mbCore","internalDebugLog","ModbusWrite","config","nodes","createNode","name","showStatusActivities","showErrors","unitid","dataType","adr","Number","quantity","emptyMsgOnFail","keepMsgProperties","verboseLogging","settings","verbose","node","bufferMessageList","Map","setNodeStatusTo","modbusClient","getNode","server","registerForModbus","initModbusClientEvents","onModbusWriteDone","resp","msg","send","buildMessage","payload","emit","errorProtocolMsg","err","logMsgError","sendEmptyMsgOnFail","onModbusWriteError","message","origMsg","getOriginalMessage","setModbusError","setMsgPayloadFromHTTPRequests","Object","prototype","hasOwnProperty","call","value","indexOf","JSON","parse","buildNewMessageObject","messageId","getObjectId","topic","id","fc","functionCodeModbusWrite","address","on","origMsgInput","assign","invalidPayloadIn","client","httpMsg","newMsg","set","buildNewMessage","actualServiceState","done","clear","deregisterForModbus","setNodeDefaultStatus","registerType"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,OAAP,GAAiB,UAAUC,GAAV,EAAe;AAC9B;;AACAC,EAAAA,OAAO,CAAC,oBAAD,CAAP,CAA8BC,OAA9B;;AACA,MAAMC,QAAQ,GAAGF,OAAO,CAAC,iBAAD,CAAxB;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,oBAAD,CAAtB;;AACA,MAAMI,gBAAgB,GAAGJ,OAAO,CAAC,OAAD,CAAP,CAAiB,qBAAjB,CAAzB;;AAEA,WAASK,WAAT,CAAsBC,MAAtB,EAA8B;AAC5BP,IAAAA,GAAG,CAACQ,KAAJ,CAAUC,UAAV,CAAqB,IAArB,EAA2BF,MAA3B;AAEA,SAAKG,IAAL,GAAYH,MAAM,CAACG,IAAnB;AACA,SAAKC,oBAAL,GAA4BJ,MAAM,CAACI,oBAAnC;AACA,SAAKC,UAAL,GAAkBL,MAAM,CAACK,UAAzB;AAEA,SAAKC,MAAL,GAAcN,MAAM,CAACM,MAArB;AACA,SAAKC,QAAL,GAAgBP,MAAM,CAACO,QAAvB;AACA,SAAKC,GAAL,GAAWC,MAAM,CAACT,MAAM,CAACQ,GAAR,CAAjB;AACA,SAAKE,QAAL,GAAgBV,MAAM,CAACU,QAAvB;AAEA,SAAKC,cAAL,GAAsBX,MAAM,CAACW,cAA7B;AACA,SAAKC,iBAAL,GAAyBZ,MAAM,CAACY,iBAAhC;AACA,SAAKd,gBAAL,GAAwBA,gBAAxB;AACA,SAAKe,cAAL,GAAsBpB,GAAG,CAACqB,QAAJ,CAAaC,OAAnC;AAEA,QAAMC,IAAI,GAAG,IAAb;AACAA,IAAAA,IAAI,CAACC,iBAAL,GAAyB,IAAIC,GAAJ,EAAzB;AAEAtB,IAAAA,QAAQ,CAACuB,eAAT,CAAyB,SAAzB,EAAoCH,IAApC;AAEA,QAAMI,YAAY,GAAG3B,GAAG,CAACQ,KAAJ,CAAUoB,OAAV,CAAkBrB,MAAM,CAACsB,MAAzB,CAArB;;AACA,QAAI,CAACF,YAAL,EAAmB;AACjB;AACD;;AACDA,IAAAA,YAAY,CAACG,iBAAb,CAA+BP,IAA/B;AACApB,IAAAA,QAAQ,CAAC4B,sBAAT,CAAgCR,IAAhC,EAAsCI,YAAtC;;AAEAJ,IAAAA,IAAI,CAACS,iBAAL,GAAyB,UAAUC,IAAV,EAAgBC,GAAhB,EAAqB;AAC5C,UAAIX,IAAI,CAACZ,oBAAT,EAA+B;AAC7BR,QAAAA,QAAQ,CAACuB,eAAT,CAAyB,YAAzB,EAAuCH,IAAvC;AACD;;AAEDA,MAAAA,IAAI,CAACY,IAAL,CAAU/B,MAAM,CAACgC,YAAP,CAAoBb,IAAI,CAACC,iBAAzB,EAA4CU,GAAG,CAACG,OAAhD,EAAyDJ,IAAzD,EAA+DC,GAA/D,CAAV;AACAX,MAAAA,IAAI,CAACe,IAAL,CAAU,qBAAV;AACD,KAPD;;AASAf,IAAAA,IAAI,CAACgB,gBAAL,GAAwB,UAAUC,GAAV,EAAeN,GAAf,EAAoB;AAC1C/B,MAAAA,QAAQ,CAACsC,WAAT,CAAqBlB,IAArB,EAA2BiB,GAA3B,EAAgCN,GAAhC;AACA/B,MAAAA,QAAQ,CAACuC,kBAAT,CAA4BnB,IAA5B,EAAkCiB,GAAlC,EAAuCN,GAAvC;AACD,KAHD;;AAKAX,IAAAA,IAAI,CAACoB,kBAAL,GAA0B,UAAUH,GAAV,EAAeN,GAAf,EAAoB;AAC5CX,MAAAA,IAAI,CAAClB,gBAAL,CAAsBmC,GAAG,CAACI,OAA1B;AACA,UAAMC,OAAO,GAAGzC,MAAM,CAAC0C,kBAAP,CAA0BvB,IAAI,CAACC,iBAA/B,EAAkDU,GAAlD,CAAhB;AACAX,MAAAA,IAAI,CAACgB,gBAAL,CAAsBC,GAAtB,EAA2BK,OAA3B;AACA1C,MAAAA,QAAQ,CAAC4C,cAAT,CAAwBxB,IAAxB,EAA8BI,YAA9B,EAA4Ca,GAA5C,EAAiDK,OAAjD;AACAtB,MAAAA,IAAI,CAACe,IAAL,CAAU,sBAAV;AACD,KAND;;AAQAf,IAAAA,IAAI,CAACyB,6BAAL,GAAqC,UAAUd,GAAV,EAAe;AAClD;AACA,UAAIe,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqClB,GAAG,CAACG,OAAzC,EAAkD,OAAlD,KACF,OAAOH,GAAG,CAACG,OAAJ,CAAYgB,KAAnB,KAA6B,QAD/B,EACyC;AACvC,YAAInB,GAAG,CAACG,OAAJ,CAAYgB,KAAZ,KAAsB,MAAtB,IAAgCnB,GAAG,CAACG,OAAJ,CAAYgB,KAAZ,KAAsB,OAA1D,EAAmE;AACjEnB,UAAAA,GAAG,CAACG,OAAJ,CAAYgB,KAAZ,GAAqBnB,GAAG,CAACG,OAAJ,CAAYgB,KAAZ,KAAsB,MAA3C;AACD,SAFD,MAEO;AACL,cAAInB,GAAG,CAACG,OAAJ,CAAYgB,KAAZ,CAAkBC,OAAlB,CAA0B,GAA1B,IAAiC,CAAC,CAAtC,EAAyC;AACvCpB,YAAAA,GAAG,CAACG,OAAJ,CAAYgB,KAAZ,GAAoBE,IAAI,CAACC,KAAL,CAAWtB,GAAG,CAACG,OAAJ,CAAYgB,KAAvB,CAApB;AACD;AACF;AACF;;AACD,aAAOnB,GAAP;AACD,KAbD;;AAeAX,IAAAA,IAAI,CAACkC,qBAAL,GAA6B,UAAUlC,IAAV,EAAgBW,GAAhB,EAAqB;AAChD,UAAMwB,SAAS,GAAGtD,MAAM,CAACuD,WAAP,EAAlB;AACA,aAAO;AACLC,QAAAA,KAAK,EAAE1B,GAAG,CAAC0B,KAAJ,IAAarC,IAAI,CAACsC,EADpB;AAELH,QAAAA,SAAS,EAATA,SAFK;AAGLrB,QAAAA,OAAO,EAAE;AACPgB,UAAAA,KAAK,EAAGJ,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqClB,GAAG,CAACG,OAAzC,EAAkD,OAAlD,CAAD,GAA+DH,GAAG,CAACG,OAAJ,CAAYgB,KAA3E,GAAmFnB,GAAG,CAACG,OADvF;AAEPxB,UAAAA,MAAM,EAAEU,IAAI,CAACV,MAFN;AAGPiD,UAAAA,EAAE,EAAE1D,MAAM,CAAC2D,uBAAP,CAA+BxC,IAAI,CAACT,QAApC,CAHG;AAIPkD,UAAAA,OAAO,EAAEzC,IAAI,CAACR,GAJP;AAKPE,UAAAA,QAAQ,EAAEM,IAAI,CAACN,QALR;AAMPyC,UAAAA,SAAS,EAATA;AANO;AAHJ,OAAP;AAYD,KAdD;;AAgBAnC,IAAAA,IAAI,CAAC0C,EAAL,CAAQ,OAAR,EAAiB,UAAU/B,GAAV,EAAe;AAC9B,UAAMgC,YAAY,GAAGjB,MAAM,CAACkB,MAAP,CAAc,EAAd,EAAkBjC,GAAlB,CAArB;;AAEA,UAAI/B,QAAQ,CAACiE,gBAAT,CAA0BlC,GAA1B,CAAJ,EAAoC;AAClC;AACD;;AAED,UAAI,CAACP,YAAY,CAAC0C,MAAlB,EAA0B;AACxB;AACD;;AAED,UAAI;AACF,YAAMC,OAAO,GAAG/C,IAAI,CAACyB,6BAAL,CAAmCkB,YAAnC,CAAhB;AACA,YAAMK,MAAM,GAAGhD,IAAI,CAACkC,qBAAL,CAA2BlC,IAA3B,EAAiC+C,OAAjC,CAAf;AACA/C,QAAAA,IAAI,CAACC,iBAAL,CAAuBgD,GAAvB,CAA2BD,MAAM,CAACb,SAAlC,EAA6CvD,QAAQ,CAACsE,eAAT,CAAyBlD,IAAI,CAACJ,iBAA9B,EAAiDmD,OAAjD,EAA0DC,MAA1D,CAA7C;AACA5C,QAAAA,YAAY,CAACW,IAAb,CAAkB,aAAlB,EAAiCiC,MAAjC,EAAyChD,IAAI,CAACS,iBAA9C,EAAiET,IAAI,CAACoB,kBAAtE;;AAEA,YAAIpB,IAAI,CAACZ,oBAAT,EAA+B;AAC7BR,UAAAA,QAAQ,CAACuB,eAAT,CAAyBC,YAAY,CAAC+C,kBAAtC,EAA0DnD,IAA1D;AACD;AACF,OATD,CASE,OAAOiB,GAAP,EAAY;AACZjB,QAAAA,IAAI,CAACgB,gBAAL,CAAsBC,GAAtB,EAA2B0B,YAA3B;AACD;AACF,KAvBD;AAyBA3C,IAAAA,IAAI,CAAC0C,EAAL,CAAQ,OAAR,EAAiB,UAAUU,IAAV,EAAgB;AAC/BxE,MAAAA,QAAQ,CAACuB,eAAT,CAAyB,QAAzB,EAAmCH,IAAnC;AACAA,MAAAA,IAAI,CAACC,iBAAL,CAAuBoD,KAAvB;AACAjD,MAAAA,YAAY,CAACkD,mBAAb,CAAiCtD,IAAI,CAACsC,EAAtC,EAA0Cc,IAA1C;AACD,KAJD;;AAMA,QAAI,CAACpD,IAAI,CAACZ,oBAAV,EAAgC;AAC9BR,MAAAA,QAAQ,CAAC2E,oBAAT,CAA8BvD,IAA9B;AACD;AACF;;AAEDvB,EAAAA,GAAG,CAACQ,KAAJ,CAAUuE,YAAV,CAAuB,cAAvB,EAAuCzE,WAAvC;AACD,CA9HD","sourcesContent":["/**\r\n Copyright (c) 2016,2017,2018,2019,2020,2021 Klaus Landsdorf (https://bianco-royal.space/)\r\n Copyright 2016 - Jason D. Harper, Argonne National Laboratory\r\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc.\r\n All rights reserved.\r\n node-red-contrib-modbus\r\n\r\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\r\n **/\r\n/**\r\n * Modbus Write node.\r\n * @module NodeRedModbusWrite\r\n *\r\n * @param RED\r\n */\r\nmodule.exports = function (RED) {\r\n  'use strict'\r\n  require('source-map-support').install()\r\n  const mbBasics = require('./modbus-basics')\r\n  const mbCore = require('./core/modbus-core')\r\n  const internalDebugLog = require('debug')('contribModbus:write')\r\n\r\n  function ModbusWrite (config) {\r\n    RED.nodes.createNode(this, config)\r\n\r\n    this.name = config.name\r\n    this.showStatusActivities = config.showStatusActivities\r\n    this.showErrors = config.showErrors\r\n\r\n    this.unitid = config.unitid\r\n    this.dataType = config.dataType\r\n    this.adr = Number(config.adr)\r\n    this.quantity = config.quantity\r\n\r\n    this.emptyMsgOnFail = config.emptyMsgOnFail\r\n    this.keepMsgProperties = config.keepMsgProperties\r\n    this.internalDebugLog = internalDebugLog\r\n    this.verboseLogging = RED.settings.verbose\r\n\r\n    const node = this\r\n    node.bufferMessageList = new Map()\r\n\r\n    mbBasics.setNodeStatusTo('waiting', node)\r\n\r\n    const modbusClient = RED.nodes.getNode(config.server)\r\n    if (!modbusClient) {\r\n      return\r\n    }\r\n    modbusClient.registerForModbus(node)\r\n    mbBasics.initModbusClientEvents(node, modbusClient)\r\n\r\n    node.onModbusWriteDone = function (resp, msg) {\r\n      if (node.showStatusActivities) {\r\n        mbBasics.setNodeStatusTo('write done', node)\r\n      }\r\n\r\n      node.send(mbCore.buildMessage(node.bufferMessageList, msg.payload, resp, msg))\r\n      node.emit('modbusWriteNodeDone')\r\n    }\r\n\r\n    node.errorProtocolMsg = function (err, msg) {\r\n      mbBasics.logMsgError(node, err, msg)\r\n      mbBasics.sendEmptyMsgOnFail(node, err, msg)\r\n    }\r\n\r\n    node.onModbusWriteError = function (err, msg) {\r\n      node.internalDebugLog(err.message)\r\n      const origMsg = mbCore.getOriginalMessage(node.bufferMessageList, msg)\r\n      node.errorProtocolMsg(err, origMsg)\r\n      mbBasics.setModbusError(node, modbusClient, err, origMsg)\r\n      node.emit('modbusWriteNodeError')\r\n    }\r\n\r\n    node.setMsgPayloadFromHTTPRequests = function (msg) {\r\n      /* HTTP requests for boolean and multiple data string [1,2,3,4,5] */\r\n      if (Object.prototype.hasOwnProperty.call(msg.payload, 'value') &&\r\n        typeof msg.payload.value === 'string') {\r\n        if (msg.payload.value === 'true' || msg.payload.value === 'false') {\r\n          msg.payload.value = (msg.payload.value === 'true')\r\n        } else {\r\n          if (msg.payload.value.indexOf(',') > -1) {\r\n            msg.payload.value = JSON.parse(msg.payload.value)\r\n          }\r\n        }\r\n      }\r\n      return msg\r\n    }\r\n\r\n    node.buildNewMessageObject = function (node, msg) {\r\n      const messageId = mbCore.getObjectId()\r\n      return {\r\n        topic: msg.topic || node.id,\r\n        messageId,\r\n        payload: {\r\n          value: (Object.prototype.hasOwnProperty.call(msg.payload, 'value')) ? msg.payload.value : msg.payload,\r\n          unitid: node.unitid,\r\n          fc: mbCore.functionCodeModbusWrite(node.dataType),\r\n          address: node.adr,\r\n          quantity: node.quantity,\r\n          messageId\r\n        }\r\n      }\r\n    }\r\n\r\n    node.on('input', function (msg) {\r\n      const origMsgInput = Object.assign({}, msg)\r\n\r\n      if (mbBasics.invalidPayloadIn(msg)) {\r\n        return\r\n      }\r\n\r\n      if (!modbusClient.client) {\r\n        return\r\n      }\r\n\r\n      try {\r\n        const httpMsg = node.setMsgPayloadFromHTTPRequests(origMsgInput)\r\n        const newMsg = node.buildNewMessageObject(node, httpMsg)\r\n        node.bufferMessageList.set(newMsg.messageId, mbBasics.buildNewMessage(node.keepMsgProperties, httpMsg, newMsg))\r\n        modbusClient.emit('writeModbus', newMsg, node.onModbusWriteDone, node.onModbusWriteError)\r\n\r\n        if (node.showStatusActivities) {\r\n          mbBasics.setNodeStatusTo(modbusClient.actualServiceState, node)\r\n        }\r\n      } catch (err) {\r\n        node.errorProtocolMsg(err, origMsgInput)\r\n      }\r\n    })\r\n\r\n    node.on('close', function (done) {\r\n      mbBasics.setNodeStatusTo('closed', node)\r\n      node.bufferMessageList.clear()\r\n      modbusClient.deregisterForModbus(node.id, done)\r\n    })\r\n\r\n    if (!node.showStatusActivities) {\r\n      mbBasics.setNodeDefaultStatus(node)\r\n    }\r\n  }\r\n\r\n  RED.nodes.registerType('modbus-write', ModbusWrite)\r\n}\r\n"],"file":"../modbus-write.js"}