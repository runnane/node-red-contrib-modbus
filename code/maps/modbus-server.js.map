{"version":3,"sources":["modbus-server.js"],"names":["module","exports","RED","require","install","modbus","net","coreServer","mbBasics","internalDebugLog","ModbusServer","config","nodes","createNode","bufferFactor","name","logEnabled","hostname","serverPort","parseInt","responseDelay","delayUnit","coilsBufferSize","holdingBufferSize","inputBufferSize","discreteBufferSize","showErrors","verboseLogging","settings","verbose","node","netServer","modbusServer","setNodeStatusTo","modbusLogLevel","Server","server","TCP","logLabel","logLevel","calc_rateByUnit","coils","Buffer","alloc","holding","input","discrete","on","client","socket","JSON","stringify","address","remoteAddress","remotePort","listen","showStatusActivities","setNodeDefaultStatus","err","message","warn","msg","isValidMemoryMessage","writeToServerMemory","payload","disableMsgOutput","send","buildMessage","error","type","done","close","registerType"],"mappings":"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","sourcesContent":["/**\r\n Copyright (c) 2016,2017,2018,2019,2020,2021 Klaus Landsdorf (https://bianco-royal.space/)\r\n All rights reserved.\r\n node-red-contrib-modbus - The BSD 3-Clause License\r\n\r\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\r\n **/\r\n/**\r\n * Modbus Server node.\r\n * @module NodeRedModbusServer\r\n *\r\n * @param RED\r\n */\r\nmodule.exports = function (RED) {\r\n  'use strict'\r\n  require('source-map-support').install()\r\n  const modbus = require('jsmodbus')\r\n  const net = require('net')\r\n  const coreServer = require('./core/modbus-server-core')\r\n  const mbBasics = require('./modbus-basics')\r\n  const internalDebugLog = require('debug')('contribModbus:server')\r\n\r\n  function ModbusServer (config) {\r\n    RED.nodes.createNode(this, config)\r\n    const bufferFactor = 8\r\n\r\n    this.name = config.name\r\n    this.logEnabled = config.logEnabled\r\n    this.hostname = config.hostname || '0.0.0.0'\r\n    this.serverPort = parseInt(config.serverPort)\r\n    this.responseDelay = parseInt(config.responseDelay) || 1\r\n    this.delayUnit = config.delayUnit\r\n\r\n    this.coilsBufferSize = parseInt(config.coilsBufferSize * bufferFactor)\r\n    this.holdingBufferSize = parseInt(config.holdingBufferSize * bufferFactor)\r\n    this.inputBufferSize = parseInt(config.inputBufferSize * bufferFactor)\r\n    this.discreteBufferSize = parseInt(config.discreteBufferSize * bufferFactor)\r\n\r\n    this.showErrors = config.showErrors\r\n    this.internalDebugLog = internalDebugLog\r\n    this.verboseLogging = RED.settings.verbose\r\n\r\n    const node = this\r\n\r\n    node.netServer = null\r\n    node.modbusServer = null\r\n\r\n    mbBasics.setNodeStatusTo('initialized', node)\r\n\r\n    let modbusLogLevel = 'warn'\r\n    if (RED.settings.verbose) {\r\n      modbusLogLevel = 'debug'\r\n    }\r\n\r\n    try {\r\n      node.netServer = new net.Server()\r\n      node.modbusServer = new modbus.server.TCP(node.netServer, {\r\n        logLabel: 'ModbusServer',\r\n        logLevel: modbusLogLevel,\r\n        logEnabled: node.logEnabled,\r\n        responseDelay: mbBasics.calc_rateByUnit(node.responseDelay, node.delayUnit),\r\n        coils: Buffer.alloc(node.coilsBufferSize, 0),\r\n        holding: Buffer.alloc(node.holdingBufferSize, 0),\r\n        input: Buffer.alloc(node.inputBufferSize, 0),\r\n        discrete: Buffer.alloc(node.discreteBufferSize, 0)\r\n      })\r\n\r\n      node.modbusServer.on('connection', function (client) {\r\n        internalDebugLog('Modbus Server client connection')\r\n        if (client && client.socket) {\r\n          internalDebugLog('Modbus Server client to ' + JSON.stringify(client.socket.address()) + ' from ' + client.socket.remoteAddress + ' ' + client.socket.remotePort)\r\n        }\r\n        mbBasics.setNodeStatusTo('active', node)\r\n      })\r\n\r\n      node.netServer.listen(node.serverPort, node.hostname, () => {\r\n        internalDebugLog('Modbus Server listening on modbus://' + node.hostname + ':' + node.serverPort)\r\n        mbBasics.setNodeStatusTo('initialized', node)\r\n      })\r\n\r\n      if (!node.showStatusActivities) {\r\n        mbBasics.setNodeDefaultStatus(node)\r\n      }\r\n    } catch (err) {\r\n      internalDebugLog(err.message)\r\n      if (node.showErrors) {\r\n        node.warn(err)\r\n      }\r\n      mbBasics.setNodeStatusTo('error', node)\r\n    }\r\n\r\n    node.on('input', function (msg) {\r\n      if (coreServer.isValidMemoryMessage(msg)) {\r\n        coreServer.writeToServerMemory(node, msg)\r\n        if (!msg.payload.disableMsgOutput) {\r\n          node.send(buildMessage(msg))\r\n        }\r\n      } else {\r\n        if (node.showErrors) {\r\n          node.error('Is Not A Valid Memory Write Message To Server', msg)\r\n        }\r\n        if (!msg.payload.disableMsgOutput) {\r\n          node.send(buildMessage(msg))\r\n        }\r\n      }\r\n    })\r\n\r\n    function buildMessage (msg) {\r\n      return [\r\n        { type: 'holding', message: msg, payload: node.modbusServer.holding },\r\n        { type: 'coils', message: msg, payload: node.modbusServer.coils },\r\n        { type: 'input', message: msg, payload: node.modbusServer.input },\r\n        { type: 'discrete', message: msg, payload: node.modbusServer.discrete },\r\n        { payload: 'request', type: 'message', message: msg }\r\n      ]\r\n    }\r\n\r\n    node.on('close', function (done) {\r\n      mbBasics.setNodeStatusTo('closed', node)\r\n      if (node.netServer) {\r\n        node.netServer.close(() => {\r\n          internalDebugLog('Modbus Server closed')\r\n          done()\r\n        })\r\n      }\r\n      node.modbusServer = null\r\n    })\r\n  }\r\n\r\n  try {\r\n    RED.nodes.registerType('modbus-server', ModbusServer)\r\n  } catch (err) {\r\n    internalDebugLog(err.message)\r\n  }\r\n}\r\n"],"file":"../modbus-server.js"}