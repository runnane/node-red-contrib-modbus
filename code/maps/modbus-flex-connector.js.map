{"version":3,"sources":["modbus-flex-connector.js"],"names":["module","exports","RED","require","install","mbBasics","internalDebugLog","ModbusFlexConnector","config","nodes","createNode","name","maxReconnectsPerMinute","emptyQueue","showStatusActivities","showErrors","connection","verboseLogging","settings","verbose","node","setNodeStatusTo","modbusClient","getNode","server","registerForModbus","initModbusClientEvents","onConfigDone","msg","config_change","send","onConfigError","err","message","error","Error","nodeStatus","statusText","emptyMsgOnFail","payload","on","invalidPayloadIn","client","actualServiceState","connectorType","JSON","stringify","emit","setNodeDefaultStatus","registerType"],"mappings":"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","sourcesContent":["/**\r\n Copyright (c) 2017,2018,2019,2020,2021 Klaus Landsdorf (https://bianco-royal.space/)\r\n All rights reserved.\r\n node-red-contrib-modbus - The BSD 3-Clause License\r\n\r\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\r\n */\r\n/**\r\n * Modbus flexible Getter node.\r\n * @module NodeRedModbusFlexGetter\r\n *\r\n * @param RED\r\n */\r\nmodule.exports = function (RED) {\r\n  'use strict'\r\n  require('source-map-support').install()\r\n  const mbBasics = require('./modbus-basics')\r\n  const internalDebugLog = require('debug')('contribModbus:flex:connector')\r\n\r\n  function ModbusFlexConnector (config) {\r\n    RED.nodes.createNode(this, config)\r\n\r\n    this.name = config.name\r\n    this.maxReconnectsPerMinute = config.maxReconnectsPerMinute || 4\r\n    this.emptyQueue = config.emptyQueue\r\n    this.showStatusActivities = config.showStatusActivities\r\n    this.showErrors = config.showErrors\r\n    this.connection = null\r\n\r\n    this.internalDebugLog = internalDebugLog\r\n    this.verboseLogging = RED.settings.verbose\r\n\r\n    const node = this\r\n    mbBasics.setNodeStatusTo('waiting', node)\r\n\r\n    const modbusClient = RED.nodes.getNode(config.server)\r\n    if (!modbusClient) {\r\n      return\r\n    }\r\n    modbusClient.registerForModbus(node)\r\n    mbBasics.initModbusClientEvents(node, modbusClient)\r\n\r\n    node.onConfigDone = function (msg) {\r\n      if (node.showStatusActivities) {\r\n        mbBasics.setNodeStatusTo('config done', node)\r\n      }\r\n      msg.config_change = 'emitted'\r\n      node.send(msg)\r\n    }\r\n\r\n    node.onConfigError = function (err, msg) {\r\n      internalDebugLog(err.message)\r\n      if (node.showErrors) {\r\n        node.error(err, msg)\r\n      }\r\n\r\n      if (err && err.message) {\r\n        msg.error = err\r\n      } else {\r\n        msg.error = new Error(err)\r\n      }\r\n      msg.error.nodeStatus = node.statusText\r\n\r\n      if (node.emptyMsgOnFail) {\r\n        msg.payload = ''\r\n      }\r\n\r\n      node.send(msg)\r\n    }\r\n\r\n    node.on('input', function (msg) {\r\n      if (mbBasics.invalidPayloadIn(msg)) {\r\n        return\r\n      }\r\n\r\n      if (!modbusClient.client) {\r\n        return\r\n      }\r\n\r\n      if (node.showStatusActivities) {\r\n        mbBasics.setNodeStatusTo(modbusClient.actualServiceState, node)\r\n      }\r\n\r\n      if (msg.payload.connectorType) {\r\n        internalDebugLog('dynamicReconnect: ' + JSON.stringify(msg.payload))\r\n        msg.payload.emptyQueue = node.emptyQueue\r\n        modbusClient.emit('dynamicReconnect', msg, node.onConfigDone, node.onConfigError)\r\n      } else {\r\n        const error = new Error('Payload Not Valid - Connector Type')\r\n        node.error(error, msg)\r\n\r\n        node.send(msg)\r\n      }\r\n    })\r\n\r\n    if (!node.showStatusActivities) {\r\n      mbBasics.setNodeDefaultStatus(node)\r\n    }\r\n  }\r\n\r\n  RED.nodes.registerType('modbus-flex-connector', ModbusFlexConnector)\r\n}\r\n"],"file":"../modbus-flex-connector.js"}