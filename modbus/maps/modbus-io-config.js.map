{"version":3,"sources":["modbus-io-config.js"],"names":["module","exports","RED","install","coreIO","require","node","watcher","config","fs","nodes","ModbusIOConfigNode","this","name","UNLIMITED_LISTENERS","createNode","format","addressOffset","setMaxListeners","path","lastUpdatedAt","lineReader","configData","err","message","on","line","push","JSON","parse","Date","now","warn","payload","allValueNamesFromIOFile","emit","internalDebug","curr","prev","mtime","LineByLineReader","done","unwatchFile"],"mappings":"aAMAA,OAAAC,QAAA,SAAAC,GAEAF,QAAOC,sBAAyBE,UAC9B,IAAAC,EAAAC,QAAA,yBA0EIC,EAAAA,MAAKC,aAAL,mBAzEJF,SAAAG,GAIE,IAAMC,EAAKJ,QAAQ,YADrBH,EAAAQ,MAASC,WAAAA,KAAoBH,GAM3BI,KAAKC,KAAOL,EAAOK,KAJnBD,KAAME,KAAAA,EAAAA,KAENZ,KAAIQ,OAAMK,EAAWC,OAErBJ,KAAKC,cAAcA,EAAnBI,cAEA,IAAKD,EAALJ,KACAN,EAAKW,gBAXgB,GAarBX,EAAMA,cAAN,KACKY,EAAAA,IAAgBJ,EAAAA,iBAArBR,EAAAa,MACAb,EAAKc,cAAgB,gBAArBd,EAAAa,MACAb,EAAMe,WAAa,GAEnBf,EAAKgB,GAAAA,QAAL,SAAAC,GAEAF,EAAAA,cAAuBE,EAAAC,WAIvBH,EAAWI,GAAG,OAAQ,SAAUC,GAC1BA,GACFpB,EAAKgB,WAAWK,KAAKC,KAAKC,MAAMH,MAKlCpB,EAAKc,GAAAA,MAAL,WACAhB,EAAAA,cAAqB0B,KAAAC,MACrBzB,EAAK0B,cAAK,0BAAA1B,EAAAa,MAAEc,EAAAA,KAAO,CAAE7B,QAAO8B,EAAAA,wBAAlB5B,GAAAO,KAAA,kCAAAM,KAAAb,EAAAa,OAAiDN,EAAAA,KAAM,gBAAAP,EAAAgB,cACjEhB,EAAK6B,cAAK,+BAAV7B,EAAAa,MAGFf,EAAAA,QAAOgC,EAAAA,UAAc9B,EAAAa,KAAA,SAAAkB,EAAAC,GAErBhC,EAAKC,cAALD,yBAAAA,OAAuC+B,EAAAE,QACrCnC,EAAOgC,cAAPhC,2BAAAA,OAAAkC,EAA8CD,QAG1CA,EAAKE,QAAUD,EAAKC,QAAxBnC,EAASmC,cAAc,kBAAQjC,EAAAa,MAC7Bf,EAAAA,WAAOgC,UACFd,EAAAA,eAGCD,EAAa,IAAIjB,EAAOoC,iBAAiBlC,EAAKa,OAA9CE,GAAAA,QAAiBjB,SAAOoC,GAE5BpC,EAAOgC,cAAcb,EAAIC,WAC1BH,EAFDI,GAAA,OAAA,SAAAC,GAKMA,GADNL,EAAAA,WAAcM,KAAQC,KAAAC,MAAUH,MAI/BL,EAJDI,GAAA,MAAA,WAOEnB,EAAKc,cAAgBU,KAAKC,MAD5BV,EAAAA,cAAqB,4BAAYf,EAAAa,MAC/Bb,EAAKc,KAAAA,CAAAA,QAAgBU,EAAKC,wBAA1BzB,GAAAO,KAAA,kCAAAM,KAAAb,EAAAa,OACAf,EAAAA,KAAOgC,gBAAc9B,EAAAgB,cACsCT,EAAAA,cAAM,iCAAvDP,EAAAa,SAEXb,EALDmB,GAAA,QAAA,SAAAgB,GAYFhC,EAAGiC,YAAYpC,EAAKa,MALlBf,EAAAA,QAAOgC,QACRK","file":"../modbus-io-config.js","sourcesContent":["/**\r\n Copyright (c) 2016,2017,2018,2019,2020,2021 Klaus Landsdorf (https://bianco-royal.space/)\r\n All rights reserved.\r\n node-red-contrib-modbus\r\n node-red-contrib-modbusio\r\n\r\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\r\n */\r\nmodule.exports = function (RED) {\r\n  'use strict'\r\n  require('source-map-support').install()\r\n  const coreIO = require('./core/modbus-io-core')\r\n\r\n  function ModbusIOConfigNode (config) {\r\n    const fs = require('fs-extra')\r\n    const UNLIMITED_LISTENERS = 0\r\n\r\n    RED.nodes.createNode(this, config)\r\n\r\n    this.name = config.name\r\n    this.path = config.path\r\n    this.format = config.format\r\n    this.addressOffset = config.addressOffset\r\n\r\n    const node = this\r\n    node.setMaxListeners(UNLIMITED_LISTENERS)\r\n    node.lastUpdatedAt = null\r\n    const lineReader = new coreIO.LineByLineReader(node.path)\r\n    coreIO.internalDebug('Read IO File ' + node.path)\r\n    node.configData = []\r\n\r\n    lineReader.on('error', function (err) {\r\n      coreIO.internalDebug(err.message)\r\n    })\r\n\r\n    lineReader.on('line', function (line) {\r\n      if (line) {\r\n        node.configData.push(JSON.parse(line))\r\n      }\r\n    })\r\n\r\n    lineReader.on('end', function () {\r\n      node.lastUpdatedAt = Date.now()\r\n      coreIO.internalDebug('Read IO Done From File ' + node.path)\r\n      node.warn({ payload: coreIO.allValueNamesFromIOFile(node), name: 'Modbus Value Names From IO File', path: node.path })\r\n      node.emit('updatedConfig', node.configData)\r\n    })\r\n\r\n    coreIO.internalDebug('Loading IO File Started For ' + node.path)\r\n\r\n    node.watcher = fs.watchFile(node.path, (curr, prev) => {\r\n      coreIO.internalDebug(`the current mtime is: ${curr.mtime}`)\r\n      coreIO.internalDebug(`the previous mtime was: ${prev.mtime}`)\r\n\r\n      if (curr.mtime !== prev.mtime) {\r\n        coreIO.internalDebug('Reload IO File ' + node.path)\r\n        node.configData = []\r\n        delete node.lastUpdatedAt\r\n\r\n        const lineReader = new coreIO.LineByLineReader(node.path)\r\n        lineReader.on('error', function (err) {\r\n          coreIO.internalDebug(err.message)\r\n        })\r\n\r\n        lineReader.on('line', function (line) {\r\n          if (line) {\r\n            node.configData.push(JSON.parse(line))\r\n          }\r\n        })\r\n\r\n        lineReader.on('end', function () {\r\n          node.lastUpdatedAt = Date.now()\r\n          coreIO.internalDebug('Reload IO Done From File ' + node.path)\r\n          node.warn({ payload: coreIO.allValueNamesFromIOFile(node), name: 'Modbus Value Names From IO File', path: node.path })\r\n          node.emit('updatedConfig', node.configData)\r\n        })\r\n\r\n        coreIO.internalDebug('Reloading IO File Started For ' + node.path)\r\n      }\r\n    })\r\n\r\n    node.on('close', function (done) {\r\n      fs.unwatchFile(node.path)\r\n      node.watcher.close()\r\n      done()\r\n    })\r\n  }\r\n\r\n  RED.nodes.registerType('modbus-io-config', ModbusIOConfigNode)\r\n}\r\n"]}