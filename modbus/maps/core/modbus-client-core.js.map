{"version":3,"sources":["core/modbus-client-core.js"],"names":["require","install","de","biancoroyal","modbus","core","client","internalDebug","internalDebugFSM","modbusSerialDebug","XStateFSM","stateLogEnabled","networkErrors","this","id","states","on","INIT","BREAK","STOP","broken","createStateMachineService","ACTIVATE","RECONNECT","reconnecting","createMachine","initial","OPENSERIAL","CONNECT","FAILURE","SWITCH","CLOSE","QUEUE","SEND","READ","WRITE","stopped","NEW","getActualUnitId","node","msg","Number","isInteger","payload","unitid","queueUnitId","parseInt","unit_id","startStateService","toggleMachine","interpret","start","checkUnitId","clientType","getLogFunction","EMPTY","activateSendingOnSuccess","cb","cberr","resp","then","err","empty","send","activateSendingOnFailure","sending","readModbusByFunctionCodeOne","address","quantity","coreClient","reading","Error","message","readModbusByFunctionCodeTwo","readDiscreteInputs","writing","readModbusByFunctionCodeThree","closed","readHoldingRegisters","readModbusByFunctionCodeFour","failed","readInputRegisters","readModbusByFunctionCode","fc","nodeLog","readModbus","queueLog","JSON","stringify","internalDebugLog","timeout","getTimeout","state","value","clienttype","activateSending","stateService","modbusErrorHandling","writeModbusByFunctionCodeFive","writeCoil","readCoils","length","writeCoils","writeModbusByFunctionCodeSix","getID","writeModbusByFunctionCodeSixteen","bufferCommands","writeRegisters","info","setUnitIdFromPayload","writeModbus","actualServiceState","setTimeout","clientTimeout","writeModbusByFunctionCodeFifteen","writeModbusByFunctionCodeFiveDupline","tcpPort","tcpType","serialPort","serialBaudrate","serialDatabits","serialStopbits","serialAsciiResponseStartDelimiter","serialConnectionDelay","setNewNodeOptionalSettings","unitId","commandDelay","reconnectTimeout","setNewNodeSettings","setNewTCPNodeSettings","tcpHost","setNewSerialNodeSettings","serialType","connectorType","messagesAllowedStates"],"mappings":"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","file":"../../core/modbus-client-core.js","sourcesContent":["/**\r\n Copyright (c) 2016,2017,2018,2019,2020,2021 Klaus Landsdorf (https://bianco-royal.space/)\r\n All rights reserved.\r\n node-red-contrib-modbus\r\n\r\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\r\n */\r\n'use strict'\r\nrequire('source-map-support').install()\r\n\r\n// eslint-disable-next-line no-var\r\nvar de = de || { biancoroyal: { modbus: { core: { client: {} } } } } // eslint-disable-line no-use-before-define\r\nde.biancoroyal.modbus.core.client.internalDebug = de.biancoroyal.modbus.core.client.internalDebug || require('debug')('contribModbus:core:client') // eslint-disable-line no-use-before-define\r\nde.biancoroyal.modbus.core.client.internalDebugFSM = de.biancoroyal.modbus.core.client.internalDebugFSM || require('debug')('contribModbus:core:client:fsm') // eslint-disable-line no-use-before-define\r\nde.biancoroyal.modbus.core.client.modbusSerialDebug = de.biancoroyal.modbus.core.client.modbusSerialDebug || require('debug')('modbus-serial') // eslint-disable-line no-use-before-define\r\nde.biancoroyal.modbus.core.client.XStateFSM = de.biancoroyal.modbus.core.client.XStateFSM || require('@xstate/fsm') // eslint-disable-line no-use-before-define\r\nde.biancoroyal.modbus.core.client.stateLogEnabled = de.biancoroyal.modbus.core.client.stateLogEnabled || false // eslint-disable-line no-use-before-define\r\n\r\nde.biancoroyal.modbus.core.client.networkErrors = ['ESOCKETTIMEDOUT', 'ETIMEDOUT', 'ECONNRESET', 'ENETRESET',\r\n  'ECONNABORTED', 'ECONNREFUSED', 'ENETUNREACH', 'ENOTCONN',\r\n  'ESHUTDOWN', 'EHOSTDOWN', 'ENETDOWN', 'EWOULDBLOCK', 'EAGAIN', 'EHOSTUNREACH']\r\n\r\nde.biancoroyal.modbus.core.client.createStateMachineService = function () {\r\n  this.stateLogEnabled = false\r\n\r\n  // failure is a general gate point in states to jump between states\r\n  return this.XStateFSM.createMachine({\r\n    id: 'modbus',\r\n    initial: 'new',\r\n    states: {\r\n      new: {\r\n        on: { INIT: 'init', BREAK: 'broken', STOP: 'stopped' }\r\n      },\r\n      broken: {\r\n        on: { INIT: 'init', STOP: 'stopped', FAILURE: 'failed', ACTIVATE: 'activated', RECONNECT: 'reconnecting' }\r\n      },\r\n      reconnecting: {\r\n        on: { INIT: 'init', STOP: 'stopped' }\r\n      },\r\n      init: {\r\n        on: { OPENSERIAL: 'opened', CONNECT: 'connected', BREAK: 'broken', FAILURE: 'failed', STOP: 'stopped', SWITCH: 'switch' }\r\n      },\r\n      opened: {\r\n        on: { CONNECT: 'connected', BREAK: 'broken', FAILURE: 'failed', CLOSE: 'closed', STOP: 'stopped', SWITCH: 'switch' }\r\n      },\r\n      connected: {\r\n        on: { CLOSE: 'closed', ACTIVATE: 'activated', QUEUE: 'queueing', BREAK: 'broken', FAILURE: 'failed', STOP: 'stopped', SWITCH: 'switch' }\r\n      },\r\n      activated: {\r\n        on: {\r\n          READ: 'reading',\r\n          WRITE: 'writing',\r\n          QUEUE: 'queueing',\r\n          BREAK: 'broken',\r\n          CLOSE: 'closed',\r\n          FAILURE: 'failed',\r\n          STOP: 'stopped',\r\n          SWITCH: 'switch'\r\n        }\r\n      },\r\n      queueing: {\r\n        on: {\r\n          ACTIVATE: 'activated',\r\n          SEND: 'sending',\r\n          READ: 'reading',\r\n          WRITE: 'writing',\r\n          EMPTY: 'empty',\r\n          BREAK: 'broken',\r\n          CLOSE: 'closed',\r\n          FAILURE: 'failed',\r\n          STOP: 'stopped',\r\n          SWITCH: 'switch'\r\n        }\r\n      },\r\n      empty: { on: { QUEUE: 'queueing', BREAK: 'broken', FAILURE: 'failed', CLOSE: 'closed', STOP: 'stopped', SWITCH: 'switch' } },\r\n      sending: { on: { ACTIVATE: 'activated', READ: 'reading', WRITE: 'writing', BREAK: 'broken', FAILURE: 'failed', STOP: 'stopped', SWITCH: 'switch' } },\r\n      reading: { on: { ACTIVATE: 'activated', BREAK: 'broken', FAILURE: 'failed', STOP: 'stopped' } },\r\n      writing: { on: { ACTIVATE: 'activated', BREAK: 'broken', FAILURE: 'failed', STOP: 'stopped' } },\r\n      closed: { on: { FAILURE: 'failed', BREAK: 'broken', CONNECT: 'connected', RECONNECT: 'reconnecting', INIT: 'init', STOP: 'stopped', SWITCH: 'switch' } },\r\n      failed: { on: { CLOSE: 'closed', BREAK: 'broken', STOP: 'stopped', SWITCH: 'switch' } },\r\n      switch: { on: { CLOSE: 'closed', BREAK: 'broken', STOP: 'stopped' } },\r\n      stopped: { on: { NEW: 'new', STOP: 'stopped' } }\r\n    }\r\n  })\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.getActualUnitId = function (node, msg) {\r\n  if (msg.payload && Number.isInteger(msg.payload.unitid)) {\r\n    return parseInt(msg.payload.unitid)\r\n  } else if (Number.isInteger(msg.queueUnitId)) {\r\n    return parseInt(msg.queueUnitId)\r\n  } else {\r\n    return parseInt(node.unit_id)\r\n  }\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.startStateService = function (toggleMachine) {\r\n  return this.XStateFSM.interpret(toggleMachine).start()\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.checkUnitId = function (unitid, clientType) {\r\n  if (clientType === 'tcp') {\r\n    return unitid >= 0 && unitid <= 255\r\n  } else {\r\n    return unitid >= 0 && unitid <= 247\r\n  }\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.getLogFunction = function (node) {\r\n  if (node.internalDebugLog) {\r\n    return node.internalDebugLog\r\n  } else {\r\n    return de.biancoroyal.modbus.core.client.internalDebug\r\n  }\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.activateSendingOnSuccess = function (node, cb, cberr, resp, msg) {\r\n  node.activateSending(msg).then(function () {\r\n    cb(resp, msg)\r\n  }).catch(function (err) {\r\n    cberr(err, msg)\r\n  }).finally(function () {\r\n    node.stateService.send('ACTIVATE')\r\n  })\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.activateSendingOnFailure = function (node, cberr, err, msg) {\r\n  node.activateSending(msg).then(function () {\r\n    cberr(err, msg)\r\n  }).catch(function (err) {\r\n    cberr(err, msg)\r\n  }).finally(function () {\r\n    node.stateService.send('ACTIVATE')\r\n  })\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.readModbusByFunctionCodeOne = function (node, msg, cb, cberr) {\r\n  const coreClient = de.biancoroyal.modbus.core.client\r\n  node.client.readCoils(parseInt(msg.payload.address), parseInt(msg.payload.quantity)).then(function (resp) {\r\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\r\n  }).catch(function (err) {\r\n    coreClient.activateSendingOnFailure(node, cberr, new Error(err.message), msg)\r\n    node.modbusErrorHandling(err)\r\n  })\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.readModbusByFunctionCodeTwo = function (node, msg, cb, cberr) {\r\n  const coreClient = de.biancoroyal.modbus.core.client\r\n  node.client.readDiscreteInputs(parseInt(msg.payload.address), parseInt(msg.payload.quantity)).then(function (resp) {\r\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\r\n  }).catch(function (err) {\r\n    coreClient.activateSendingOnFailure(node, cberr, new Error(err.message), msg)\r\n    node.modbusErrorHandling(err)\r\n  })\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.readModbusByFunctionCodeThree = function (node, msg, cb, cberr) {\r\n  const coreClient = de.biancoroyal.modbus.core.client\r\n  node.client.readHoldingRegisters(parseInt(msg.payload.address), parseInt(msg.payload.quantity)).then(function (resp) {\r\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\r\n  }).catch(function (err) {\r\n    coreClient.activateSendingOnFailure(node, cberr, new Error(err.message), msg)\r\n    node.modbusErrorHandling(err)\r\n  })\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.readModbusByFunctionCodeFour = function (node, msg, cb, cberr) {\r\n  const coreClient = de.biancoroyal.modbus.core.client\r\n  node.client.readInputRegisters(parseInt(msg.payload.address), parseInt(msg.payload.quantity)).then(function (resp) {\r\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\r\n  }).catch(function (err) {\r\n    coreClient.activateSendingOnFailure(node, cberr, new Error(err.message), msg)\r\n    node.modbusErrorHandling(err)\r\n  })\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.readModbusByFunctionCode = function (node, msg, cb, cberr) {\r\n  const coreClient = de.biancoroyal.modbus.core.client\r\n  const nodeLog = de.biancoroyal.modbus.core.client.getLogFunction(node)\r\n\r\n  switch (parseInt(msg.payload.fc)) {\r\n    case 1:\r\n      coreClient.readModbusByFunctionCodeOne(node, msg, cb, cberr)\r\n      break\r\n    case 2:\r\n      coreClient.readModbusByFunctionCodeTwo(node, msg, cb, cberr)\r\n      break\r\n    case 3:\r\n      coreClient.readModbusByFunctionCodeThree(node, msg, cb, cberr)\r\n      break\r\n    case 4:\r\n      coreClient.readModbusByFunctionCodeFour(node, msg, cb, cberr)\r\n      break\r\n    default:\r\n      coreClient.activateSendingOnFailure(node, cberr, new Error('Function Code Unknown'), msg)\r\n      nodeLog('Function Code Unknown %s', msg.payload.fc)\r\n      break\r\n  }\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.readModbus = function (node, msg, cb, cberr) {\r\n  const coreClient = de.biancoroyal.modbus.core.client\r\n  const nodeLog = de.biancoroyal.modbus.core.client.getLogFunction(node)\r\n\r\n  if (!node.client) {\r\n    nodeLog('Client Not Ready As Object On Reading Modbus')\r\n    return\r\n  }\r\n\r\n  if (!node.bufferCommands) {\r\n    if (node.clienttype !== 'tcp') {\r\n      node.stateService.send('READ')\r\n    }\r\n  } else {\r\n    node.queueLog(JSON.stringify({\r\n      info: 'read msg via Modbus',\r\n      message: msg.payload,\r\n      queueUnitId: msg.queueUnitId,\r\n      timeout: node.client.getTimeout(),\r\n      state: node.actualServiceState.value\r\n    }))\r\n  }\r\n\r\n  node.setUnitIdFromPayload(msg)\r\n  node.client.setTimeout(node.clientTimeout)\r\n\r\n  try {\r\n    coreClient.readModbusByFunctionCode(node, msg, cb, cberr)\r\n  } catch (err) {\r\n    nodeLog(err.message)\r\n    node.modbusErrorHandling(err)\r\n    coreClient.activateSendingOnFailure(node, cberr, err, msg)\r\n  }\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.writeModbusByFunctionCodeFive = function (node, msg, cb, cberr) {\r\n  const coreClient = de.biancoroyal.modbus.core.client\r\n  if (msg.payload.value) {\r\n    msg.payload.value = true\r\n  } else {\r\n    msg.payload.value = false\r\n  }\r\n  node.client.writeCoil(parseInt(msg.payload.address), msg.payload.value).then(function (resp) {\r\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\r\n  }).catch(function (err) {\r\n    if (node.client.getID() === 0) {\r\n      const resp = {\r\n        address: parseInt(msg.payload.address),\r\n        value: parseInt(msg.payload.value)\r\n      }\r\n      coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\r\n    } else {\r\n      coreClient.activateSendingOnFailure(node, cberr, err, msg)\r\n      node.modbusErrorHandling(err)\r\n    }\r\n  })\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.writeModbusByFunctionCodeFiveDupline = function (node, msg, cb, cberr) {\r\n  const coreClient = de.biancoroyal.modbus.core.client\r\n  node.client.writeCoil(parseInt(msg.payload.address), msg.payload.value).then(function (resp) {\r\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\r\n  }).catch(function (err) {\r\n    if (node.client.getID() === 0) {\r\n      const resp = {\r\n        address: parseInt(msg.payload.address),\r\n        value: msg.payload.value\r\n      }\r\n      coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\r\n    } else {\r\n      coreClient.activateSendingOnFailure(node, cberr, err, msg)\r\n      node.modbusErrorHandling(err)\r\n    }\r\n  })\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.writeModbusByFunctionCodeFifteen = function (node, msg, cb, cberr) {\r\n  const coreClient = de.biancoroyal.modbus.core.client\r\n  if (parseInt(msg.payload.value.length) !== parseInt(msg.payload.quantity)) {\r\n    coreClient.activateSendingOnFailure(node, cberr, new Error('Quantity should be less or equal to coil payload array length: ' +\r\n      msg.payload.value.length + ' Addr: ' + msg.payload.address + ' Q: ' + msg.payload.quantity), msg)\r\n  } else {\r\n    node.client.writeCoils(parseInt(msg.payload.address), msg.payload.value).then(function (resp) {\r\n      coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\r\n    }).catch(function (err) {\r\n      if (node.client.getID() === 0) {\r\n        const resp = {\r\n          address: parseInt(msg.payload.address),\r\n          value: parseInt(msg.payload.value)\r\n        }\r\n        coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\r\n      } else {\r\n        coreClient.activateSendingOnFailure(node, cberr, err, msg)\r\n        node.modbusErrorHandling(err)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.writeModbusByFunctionCodeSix = function (node, msg, cb, cberr) {\r\n  const coreClient = de.biancoroyal.modbus.core.client\r\n  node.client.writeRegister(parseInt(msg.payload.address), parseInt(msg.payload.value)).then(function (resp) {\r\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\r\n  }).catch(function (err) {\r\n    if (node.client.getID() === 0) {\r\n      const resp = {\r\n        address: parseInt(msg.payload.address),\r\n        value: parseInt(msg.payload.value)\r\n      }\r\n      coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\r\n    } else {\r\n      coreClient.activateSendingOnFailure(node, cberr, err, msg)\r\n      node.modbusErrorHandling(err)\r\n    }\r\n  })\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.writeModbusByFunctionCodeSixteen = function (node, msg, cb, cberr) {\r\n  const coreClient = de.biancoroyal.modbus.core.client\r\n  if (parseInt(msg.payload.value.length) !== parseInt(msg.payload.quantity)) {\r\n    coreClient.activateSendingOnFailure(node, cberr, new Error('Quantity should be less or equal to register payload array length: ' +\r\n      msg.payload.value.length + ' Addr: ' + msg.payload.address + ' Q: ' + msg.payload.quantity), msg)\r\n  } else {\r\n    node.client.writeRegisters(parseInt(msg.payload.address), msg.payload.value).then(function (resp) {\r\n      coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\r\n    }).catch(function (err) {\r\n      if (node.client.getID() === 0) {\r\n        const resp = {\r\n          address: parseInt(msg.payload.address),\r\n          value: parseInt(msg.payload.value)\r\n        }\r\n        coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\r\n      } else {\r\n        coreClient.activateSendingOnFailure(node, cberr, err, msg)\r\n        node.modbusErrorHandling(err)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.writeModbus = function (node, msg, cb, cberr) {\r\n  const coreClient = de.biancoroyal.modbus.core.client\r\n  const nodeLog = de.biancoroyal.modbus.core.client.getLogFunction(node)\r\n\r\n  if (!node.client) {\r\n    nodeLog('Client Not Ready As Object On Writing Modbus')\r\n    return\r\n  }\r\n\r\n  if (!node.bufferCommands) {\r\n    if (node.clienttype !== 'tcp') {\r\n      node.stateService.send('WRITE')\r\n    }\r\n  } else {\r\n    node.queueLog(JSON.stringify({\r\n      info: 'write msg',\r\n      message: msg.payload,\r\n      queueUnitId: msg.queueUnitId,\r\n      timeout: node.client.getTimeout(),\r\n      state: node.actualServiceState.value\r\n    }))\r\n  }\r\n\r\n  node.setUnitIdFromPayload(msg)\r\n  node.client.setTimeout(node.clientTimeout)\r\n\r\n  try {\r\n    switch (parseInt(msg.payload.fc)) {\r\n      case 15: // FC: 15\r\n        coreClient.writeModbusByFunctionCodeFifteen(node, msg, cb, cberr)\r\n        break\r\n      case 5: // FC: 5\r\n        coreClient.writeModbusByFunctionCodeFive(node, msg, cb, cberr)\r\n        break\r\n      case 50: // FC: 50\r\n        coreClient.writeModbusByFunctionCodeFiveDupline(node, msg, cb, cberr)\r\n        break\r\n      case 16: // FC: 16\r\n        coreClient.writeModbusByFunctionCodeSixteen(node, msg, cb, cberr)\r\n        break\r\n      case 6: // FC: 6\r\n        coreClient.writeModbusByFunctionCodeSix(node, msg, cb, cberr)\r\n        break\r\n      default:\r\n        coreClient.activateSendingOnFailure(node, cberr, new Error('Function Code Unknown'), msg)\r\n        nodeLog('Function Code Unknown %s', msg.payload.fc)\r\n        break\r\n    }\r\n  } catch (err) {\r\n    nodeLog(err.message)\r\n    coreClient.activateSendingOnFailure(node, cberr, err, msg)\r\n    node.modbusErrorHandling(err)\r\n  }\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.setNewTCPNodeSettings = function (node, msg) {\r\n  node.tcpHost = msg.payload.tcpHost || node.tcpHost\r\n  node.tcpPort = msg.payload.tcpPort || node.tcpPort\r\n  node.tcpType = msg.payload.tcpType || node.tcpType\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.setNewSerialNodeSettings = function (node, msg) {\r\n  if (msg.payload.serialPort) {\r\n    node.serialPort = msg.payload.serialPort || node.serialPort\r\n  }\r\n\r\n  if (msg.payload.serialBaudrate) {\r\n    node.serialBaudrate = parseInt(msg.payload.serialBaudrate) || node.serialBaudrate\r\n  }\r\n\r\n  node.serialDatabits = msg.payload.serialDatabits || node.serialDatabits\r\n  node.serialStopbits = msg.payload.serialStopbits || node.serialStopbits\r\n  node.serialParity = msg.payload.serialParity || node.serialParity\r\n  node.serialType = msg.payload.serialType || node.serialType\r\n\r\n  // Make sure is parsed when string, otherwise just assign.\r\n  if (msg.payload.serialAsciiResponseStartDelimiter && typeof msg.payload.serialAsciiResponseStartDelimiter === 'string') {\r\n    node.serialAsciiResponseStartDelimiter = parseInt(msg.payload.serialAsciiResponseStartDelimiter, 16)\r\n  } else {\r\n    node.serialAsciiResponseStartDelimiter = msg.payload.serialAsciiResponseStartDelimiter || node.serialAsciiResponseStartDelimiter\r\n  }\r\n\r\n  if (msg.payload.serialConnectionDelay) {\r\n    node.serialConnectionDelay = parseInt(msg.payload.serialConnectionDelay) || node.serialConnectionDelay\r\n  }\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.setNewNodeOptionalSettings = function (node, msg) {\r\n  if (msg.payload.unitId) {\r\n    node.unit_id = parseInt(msg.payload.unitId) || node.unit_id\r\n  }\r\n\r\n  if (msg.payload.commandDelay) {\r\n    node.commandDelay = parseInt(msg.payload.commandDelay) || node.commandDelay\r\n  }\r\n\r\n  if (msg.payload.clientTimeout) {\r\n    node.clientTimeout = parseInt(msg.payload.clientTimeout) || node.clientTimeout\r\n  }\r\n\r\n  if (msg.payload.reconnectTimeout) {\r\n    node.reconnectTimeout = parseInt(msg.payload.reconnectTimeout) || node.reconnectTimeout\r\n  }\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.setNewNodeSettings = function (node, msg) {\r\n  const nodeLog = de.biancoroyal.modbus.core.client.getLogFunction(node)\r\n  const coreClient = de.biancoroyal.modbus.core.client\r\n\r\n  if (!msg) {\r\n    nodeLog('New Connection message invalid.')\r\n    return false\r\n  }\r\n\r\n  switch (msg.payload.connectorType.toUpperCase()) {\r\n    case 'TCP':\r\n      coreClient.setNewTCPNodeSettings(node, msg)\r\n      nodeLog('New Connection TCP Settings ' + node.tcpHost + ' ' + node.tcpPort + ' ' + node.tcpType)\r\n      break\r\n\r\n    case 'SERIAL':\r\n      coreClient.setNewSerialNodeSettings(node, msg)\r\n      nodeLog('New Connection Serial Settings ' + node.serialPort + ' ' + node.serialBaudrate + ' ' + node.serialType)\r\n      break\r\n\r\n    default:\r\n      nodeLog('Unknown Dynamic Reconnect Type ' + msg.payload.connectorType)\r\n  }\r\n\r\n  coreClient.setNewNodeOptionalSettings(node, msg)\r\n\r\n  return true\r\n}\r\n\r\nde.biancoroyal.modbus.core.client.messagesAllowedStates = ['activated', 'queueing', 'sending', 'empty', 'connected']\r\n\r\nmodule.exports = de.biancoroyal.modbus.core.client\r\n"]}