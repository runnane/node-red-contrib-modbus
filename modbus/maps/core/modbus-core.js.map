{"version":3,"sources":["core/modbus-core.js"],"names":["require","install","de","biancoroyal","modbus","core","internalDebug","ObjectID","getObjectId","getOriginalMessage","messageList","msg","origMsg","messageId","payload","functionCodeModbusRead","dataType","functionCodeModbusWrite","buildMessage","values","response","this","topic","responseBuffer","input","Object","assign","rawMsg","module","exports"],"mappings":"aAQAA,QAAQ,sBAAsBC,UAG9B,IAAIC,GAAKA,IAAM,CAAEC,YAAa,CAAEC,OAAQ,CAAEC,KAAM,MAAhDH,GAAAC,YAAeC,OAAAC,KAAAC,cAAAJ,GAAAC,YAAAC,OAAAC,KAAAC,eAAAN,QAAA,QAAAA,CAAA,sBAAEG,GAAAA,YAAaC,OAAAC,KAAAE,SAAAL,GAAAC,YAAAC,OAAAC,KAAAE,UAAAP,QAAA,QAAAO,SAAYF,GAAAA,YAAMD,OAAAC,KAAAG,YAAA,WAAR,OAAA,IAAAN,GAAAC,YAAAC,OAAAC,KAAAE,UAQxCL,GAAGC,YAAYC,OAAOC,KAAKI,mBAAqB,SAAUC,EAAaC,GAPrE,IAACR,EAAYC,EAAYE,IAAAA,EAAAA,QAAgBJ,WAAAS,EAAeP,WAUxD,OATCD,GAAYC,EAAOC,UAUbK,EAAW,OAAQE,EAAQC,YARjCV,GAAAA,YAAHC,OAA2BI,KAAAA,cAAc,iEAAYI,EAAAC,YAYjDX,GAAGC,YAAYC,OAAOC,KAAKC,cAAc,qBAAuBK,EAAIG,QAAQD,WAR7EV,EAAHQ,GAGMC,GAGDV,GAAAC,YAAAC,OAAAC,KAAAU,uBAAA,SAAAC,GACF,OAAMA,GACLd,IAAGC,OACHS,OAAO,EACR,IAAA,QAUG,OAAO,EARX,IAAOA,kBAZT,OAAA,EAuBI,IAAK,gBARNT,OAAAA,EACD,QACE,OAAK,IAGHD,GAAAC,YAAAC,OAAAC,KAAAY,wBAAA,SAAAD,GAWJ,OAAQA,GAVN,IAAK,OACH,OAAO,EAYT,IAAK,kBAXL,OAAK,EACH,IAAA,SAaA,OAAO,GAZT,IAAA,oBACE,OAAO,GAVX,QADF,OAAA,IAiBId,GAAAC,YAAAC,OAAAC,KAAAa,aAAA,SAAAR,EAAAS,EAAAC,EAAAT,GACEC,EAAAS,KAAAZ,mBAAAC,EAAAC,GAcJC,EAAQE,QAAUK,EAbhBP,EAAKU,MAAAX,EAAAW,MACHV,EAAAW,eAAAH,EAeJR,EAAQY,MAAQC,OAAOC,OAAO,GAAIf,GAb9BgB,EAAAF,OAAAC,OAAA,GAAAd,GAGF,OAaFe,EAAOb,QAAUM,EAffO,EAAKR,OAAAA,SACHQ,EAAAJ,eACF,CAAAX,EAAAe,IAGHC,OAbDC,QAAA3B,GAAAC,YAAAC,OAAAC","file":"../../core/modbus-core.js","sourcesContent":["/**\r\n Copyright (c) 2016,2017,2018,2019,2020,2021 Klaus Landsdorf (https://bianco-royal.space/)\r\n All rights reserved.\r\n node-red-contrib-modbus\r\n\r\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\r\n */\r\n'use strict'\r\nrequire('source-map-support').install()\r\n\r\n// eslint-disable-next-line no-var\r\nvar de = de || { biancoroyal: { modbus: { core: {} } } } // eslint-disable-line no-use-before-define\r\nde.biancoroyal.modbus.core.internalDebug = de.biancoroyal.modbus.core.internalDebug || require('debug')('contribModbus:core') // eslint-disable-line no-use-before-define\r\nde.biancoroyal.modbus.core.ObjectID = de.biancoroyal.modbus.core.ObjectID || require('bson').ObjectID // eslint-disable-line no-use-before-define\r\n\r\nde.biancoroyal.modbus.core.getObjectId = function () {\r\n  return new de.biancoroyal.modbus.core.ObjectID()\r\n}\r\n\r\nde.biancoroyal.modbus.core.getOriginalMessage = function (messageList, msg) {\r\n  let origMsg = messageList.get(msg.payload.messageId || msg.messageId)\r\n\r\n  if (origMsg && origMsg.messageId) {\r\n    if (!messageList.delete(origMsg.messageId)) {\r\n      de.biancoroyal.modbus.core.internalDebug('WARNING: getOriginalMessage could not delete message from map ' + origMsg.messageId)\r\n    }\r\n  } else {\r\n    de.biancoroyal.modbus.core.internalDebug('Message Not Found ' + msg.payload.messageId)\r\n    origMsg = msg\r\n  }\r\n\r\n  return origMsg\r\n}\r\n\r\nde.biancoroyal.modbus.core.functionCodeModbusRead = function (dataType) {\r\n  switch (dataType) {\r\n    case 'Coil':\r\n      return 1\r\n    case 'Input':\r\n      return 2\r\n    case 'HoldingRegister':\r\n      return 3\r\n    case 'InputRegister':\r\n      return 4\r\n    default:\r\n      return -1\r\n  }\r\n}\r\n\r\nde.biancoroyal.modbus.core.functionCodeModbusWrite = function (dataType) {\r\n  switch (dataType) {\r\n    case 'Coil':\r\n      return 5\r\n    case 'HoldingRegister':\r\n      return 6\r\n    case 'MCoils':\r\n      return 15\r\n    case 'MHoldingRegisters':\r\n      return 16\r\n    default:\r\n      return -1\r\n  }\r\n}\r\n\r\nde.biancoroyal.modbus.core.buildMessage = function (messageList, values, response, msg) {\r\n  const origMsg = this.getOriginalMessage(messageList, msg)\r\n  origMsg.payload = values\r\n  origMsg.topic = msg.topic\r\n  origMsg.responseBuffer = response\r\n  origMsg.input = Object.assign({}, msg)\r\n\r\n  const rawMsg = Object.assign({}, origMsg)\r\n  rawMsg.payload = response\r\n  rawMsg.values = values\r\n  delete rawMsg.responseBuffer\r\n\r\n  return [origMsg, rawMsg]\r\n}\r\n\r\nmodule.exports = de.biancoroyal.modbus.core\r\n"]}