{"version":3,"sources":["modbus-flex-write.js"],"names":["module","exports","RED","require","install","mbCore","internalDebugLog","nodes","registerType","config","mbBasics","createNode","this","name","showStatusActivities","emptyMsgOnFail","settings","node","keepMsgProperties","getNode","server","bufferMessageList","modbusClient","registerForModbus","onModbusWriteDone","resp","msg","payload","errorProtocolMsg","err","logMsgError","buildMessage","sendEmptyMsgOnFail","message","origMsg","setModbusError","onModbusWriteError","emit","JSON","parse","prepareMsg","parseInt","fc","unitid","address","quantity","isValidModbusMsg","Number","isInteger","isValid","error","Object","setMsgPayloadFromHTTPRequests","value","call","indexOf","messageId","getObjectId","on","origMsgInput","assign","client","httpMsg","newMsg","buildNewMessageObject","set","buildNewMessage","setNodeStatusTo","actualServiceState","deregisterForModbus","clear","id","done","setNodeDefaultStatus"],"mappings":"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","file":"../modbus-flex-write.js","sourcesContent":["/**\r\n Copyright (c) 2016,2017,2018,2019,2020,2021 Klaus Landsdorf (https://bianco-royal.space/)\r\n All rights reserved.\r\n node-red-contrib-modbus - The BSD 3-Clause License\r\n\r\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\r\n **/\r\n/**\r\n * Modbus flexible Write node.\r\n * @module NodeRedModbusFlexWrite\r\n *\r\n * @param RED\r\n */\r\nmodule.exports = function (RED) {\r\n  'use strict'\r\n  require('source-map-support').install()\r\n  const mbBasics = require('./modbus-basics')\r\n  const mbCore = require('./core/modbus-core')\r\n  const internalDebugLog = require('debug')('contribModbus:flex:write')\r\n\r\n  function ModbusFlexWrite (config) {\r\n    RED.nodes.createNode(this, config)\r\n\r\n    this.name = config.name\r\n    this.showStatusActivities = config.showStatusActivities\r\n    this.showErrors = config.showErrors\r\n\r\n    this.emptyMsgOnFail = config.emptyMsgOnFail\r\n    this.keepMsgProperties = config.keepMsgProperties\r\n    this.internalDebugLog = internalDebugLog\r\n    this.verboseLogging = RED.settings.verbose\r\n\r\n    const node = this\r\n    node.bufferMessageList = new Map()\r\n    mbBasics.setNodeStatusTo('waiting', node)\r\n\r\n    const modbusClient = RED.nodes.getNode(config.server)\r\n    if (!modbusClient) {\r\n      return\r\n    }\r\n    modbusClient.registerForModbus(node)\r\n    mbBasics.initModbusClientEvents(node, modbusClient)\r\n\r\n    node.onModbusWriteDone = function (resp, msg) {\r\n      if (node.showStatusActivities) {\r\n        mbBasics.setNodeStatusTo('writing done', node)\r\n      }\r\n\r\n      node.send(mbCore.buildMessage(node.bufferMessageList, msg.payload, resp, msg))\r\n      node.emit('modbusFlexWriteNodeDone')\r\n    }\r\n\r\n    node.errorProtocolMsg = function (err, msg) {\r\n      mbBasics.logMsgError(node, err, msg)\r\n      mbBasics.sendEmptyMsgOnFail(node, err, msg)\r\n    }\r\n\r\n    node.onModbusWriteError = function (err, msg) {\r\n      node.internalDebugLog(err.message)\r\n      const origMsg = mbCore.getOriginalMessage(node.bufferMessageList, msg)\r\n      node.errorProtocolMsg(err, origMsg)\r\n      mbBasics.setModbusError(node, modbusClient, err, origMsg)\r\n      node.emit('modbusFlexWriteNodeError')\r\n    }\r\n\r\n    node.prepareMsg = function (msg) {\r\n      if (typeof msg.payload === 'string') {\r\n        msg.payload = JSON.parse(msg.payload)\r\n      }\r\n\r\n      msg.payload.fc = parseInt(msg.payload.fc)\r\n      msg.payload.unitid = parseInt(msg.payload.unitid)\r\n      msg.payload.address = parseInt(msg.payload.address)\r\n      msg.payload.quantity = parseInt(msg.payload.quantity)\r\n      return msg\r\n    }\r\n\r\n    node.isValidModbusMsg = function (msg) {\r\n      let isValid = true\r\n\r\n      if (!(Number.isInteger(msg.payload.fc) &&\r\n              (msg.payload.fc === 5 ||\r\n                msg.payload.fc === 6 ||\r\n                msg.payload.fc === 15 ||\r\n                msg.payload.fc === 16))) {\r\n        node.error('FC Not Valid', msg)\r\n        isValid &= false\r\n      }\r\n\r\n      if (isValid &&\r\n            !(Number.isInteger(msg.payload.address) &&\r\n              msg.payload.address >= 0 &&\r\n              msg.payload.address <= 65535)) {\r\n        node.error('Address Not Valid', msg)\r\n        isValid &= false\r\n      }\r\n\r\n      if (isValid &&\r\n            !(Number.isInteger(msg.payload.quantity) &&\r\n              msg.payload.quantity >= 1 &&\r\n              msg.payload.quantity <= 65535)) {\r\n        node.error('Quantity Not Valid', msg)\r\n        isValid &= false\r\n      }\r\n\r\n      return isValid\r\n    }\r\n\r\n    node.setMsgPayloadFromHTTPRequests = function (msg) {\r\n      /* HTTP requests for boolean and multiple data string [1,2,3,4,5] */\r\n      if (Object.prototype.hasOwnProperty.call(msg.payload, 'value') && typeof msg.payload.value === 'string') {\r\n        if (msg.payload.value === 'true' || msg.payload.value === 'false') {\r\n          msg.payload.value = (msg.payload.value === 'true')\r\n        } else {\r\n          if (msg.payload.value.indexOf(',') > -1) {\r\n            msg.payload.value = JSON.parse(msg.payload.value)\r\n          }\r\n        }\r\n      }\r\n      return msg\r\n    }\r\n\r\n    node.buildNewMessageObject = function (node, msg) {\r\n      const messageId = mbCore.getObjectId()\r\n      return {\r\n        topic: msg.topic || node.id,\r\n        messageId,\r\n        payload: {\r\n          value: (Object.prototype.hasOwnProperty.call(msg.payload, 'value')) ? msg.payload.value : msg.payload,\r\n          unitid: msg.payload.unitid,\r\n          fc: msg.payload.fc,\r\n          address: msg.payload.address,\r\n          quantity: msg.payload.quantity,\r\n          messageId\r\n        }\r\n      }\r\n    }\r\n\r\n    node.on('input', function (msg) {\r\n      if (mbBasics.invalidPayloadIn(msg) || !modbusClient.client) {\r\n        return\r\n      }\r\n\r\n      const origMsgInput = Object.assign({}, msg)\r\n      try {\r\n        const inputMsg = node.prepareMsg(origMsgInput)\r\n        if (node.isValidModbusMsg(inputMsg)) {\r\n          const httpMsg = node.setMsgPayloadFromHTTPRequests(inputMsg)\r\n          const newMsg = node.buildNewMessageObject(node, httpMsg)\r\n          node.bufferMessageList.set(newMsg.messageId, mbBasics.buildNewMessage(node.keepMsgProperties, httpMsg, newMsg))\r\n          modbusClient.emit('writeModbus', newMsg, node.onModbusWriteDone, node.onModbusWriteError)\r\n        }\r\n      } catch (err) {\r\n        node.errorProtocolMsg(err, origMsgInput)\r\n      }\r\n\r\n      if (node.showStatusActivities) {\r\n        mbBasics.setNodeStatusTo(modbusClient.actualServiceState, node)\r\n      }\r\n    })\r\n\r\n    node.on('close', function (done) {\r\n      mbBasics.setNodeStatusTo('closed', node)\r\n      node.bufferMessageList.clear()\r\n      modbusClient.deregisterForModbus(node.id, done)\r\n    })\r\n\r\n    if (!node.showStatusActivities) {\r\n      mbBasics.setNodeDefaultStatus(node)\r\n    }\r\n  }\r\n\r\n  RED.nodes.registerType('modbus-flex-write', ModbusFlexWrite)\r\n}\r\n"]}