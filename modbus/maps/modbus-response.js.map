{"version":3,"sources":["modbus-response.js"],"names":["module","exports","RED","require","install","mbBasics","setNodeStatusTo","config","createNode","this","registerShowMax","node","ModbusResponse","msg","on","Object","prototype","hasOwnProperty","call","payload","inputType","data","length","setNodeStatusByResponseTo","setNodeStatusResponse","JSON","stringify"],"mappings":"aAYAA,OAAAC,QAAA,SAAAC,GAEAC,QAAA,sBAAAC,UACAJ,IAAOC,EAAUE,QAAUD,mBA8CrBG,EAAAA,MAAAA,aAASC,kBAzCb,SAAyBC,GAHzBJ,EAAAA,MAAQK,WAAAC,KAARF,GACAE,KAAMJ,gBAAmBE,EAAAG,gBAEzB,IAAAC,EAASC,KAGPP,EAAKK,gBAAkBH,cAAOG,GAI9BL,EAAAA,GAAQ,QAACC,SAAgBO,GAEzBF,IAAKG,EAAY,UAWf,OARIC,OAAOC,UAAUC,eAAeC,KAAKL,EAAIM,QAAS,UAAtDC,EAAWJ,QAIXI,EAAIL,OAAOC,UAAUC,eAAeC,KAAKL,EAAIM,QAAS,WAA3CH,UAIHI,GAAR,IAAA,OACOP,EAAAM,QAALE,KAAAC,OAAAX,EAAAD,gBACEL,EAAQc,sBAAsBR,EAAKD,QAAAA,KAAnCY,OAAoDX,GAApDN,EAEOkB,0BAAA,SAAAV,EAAAM,QAAAR,GAEN,MAEH,IAAK,UADHE,EAAAM,QAAAG,QAAAT,EAAAM,QAAAG,OAAAX,EAAAD,gBAGEL,EAASmB,sBAAsBX,EAAIM,QAAQG,OAAQX,GADrDN,EAAQc,0BAAkB,SAAqBR,EAAIQ,QAACT,GAEnD,MACCL,QACDA,EAAAkB,0BAAA,SAAAE,KAAAC,UAAAb,EAAAM,SAAAR,MAEHA,EAAAG,GAAA,QAAA,WACET,EAAAA,gBAASkB,SAAAA","file":"../modbus-response.js","sourcesContent":["/**\r\n Copyright (c) 2016,2017,2018,2019,2020,2021 Klaus Landsdorf (https://bianco-royal.space/)\r\n Copyright 2016 - Jason D. Harper, Argonne National Laboratory\r\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc.\r\n All rights reserved.\r\n node-red-contrib-modbus\r\n\r\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\r\n **/\r\n/**\r\n * Modbus Response node.\r\n * @module NodeRedModbusResponse\r\n *\r\n * @param RED\r\n */\r\nmodule.exports = function (RED) {\r\n  'use strict'\r\n  require('source-map-support').install()\r\n  const mbBasics = require('./modbus-basics')\r\n\r\n  function ModbusResponse (config) {\r\n    RED.nodes.createNode(this, config)\r\n\r\n    this.registerShowMax = config.registerShowMax\r\n\r\n    const node = this\r\n\r\n    mbBasics.setNodeStatusTo('initialized', node)\r\n\r\n    node.on('input', function (msg) {\r\n      let inputType = 'default'\r\n\r\n      if (Object.prototype.hasOwnProperty.call(msg.payload, 'data')) {\r\n        inputType = 'data'\r\n      }\r\n\r\n      if (Object.prototype.hasOwnProperty.call(msg.payload, 'address')) {\r\n        inputType = 'address'\r\n      }\r\n\r\n      switch (inputType) {\r\n        case 'data':\r\n          if (msg.payload.data.length > node.registerShowMax) {\r\n            mbBasics.setNodeStatusResponse(msg.payload.data.length, node)\r\n          } else {\r\n            mbBasics.setNodeStatusByResponseTo('active', msg.payload, node)\r\n          }\r\n          break\r\n        case 'address':\r\n          if (msg.payload.length && msg.payload.length > node.registerShowMax) {\r\n            mbBasics.setNodeStatusResponse(msg.payload.length, node)\r\n          } else {\r\n            mbBasics.setNodeStatusByResponseTo('active', msg.payload, node)\r\n          }\r\n          break\r\n        default:\r\n          mbBasics.setNodeStatusByResponseTo('active', JSON.stringify(msg.payload), node)\r\n      }\r\n    })\r\n\r\n    node.on('close', function () {\r\n      mbBasics.setNodeStatusTo('closed', node)\r\n    })\r\n  }\r\n\r\n  RED.nodes.registerType('modbus-response', ModbusResponse)\r\n}\r\n"]}